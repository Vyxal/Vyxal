// Very important: DON'T EDIT THIS FILE!
// It's autogenerated
// See yaml_to_js.py

var codepage = 'λƛ¬∧⟑∨⟇÷×«␤»°•ß†€½∆ø↔¢⌐æʀʁɾɽÞƈ∞¨␠!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]`^_abcdefghijklmnopqrstuvwxyz{|}~↑↓∴∵›‹∷¤ð→←βτȧḃċḋėḟġḣḭŀṁṅȯṗṙṡṫẇẋẏż√⟨⟩‛₀₁₂₃₄₅₆₇₈¶⁋§ε¡∑¦≈µȦḂĊḊĖḞĠḢİĿṀṄȮṖṘṠṪẆẊẎŻ₌₍⁰¹²∇⌈⌊¯±₴…□↳↲⋏⋎꘍ꜝ℅≤≥≠⁼ƒɖ∪∩⊍£¥⇧⇩ǍǎǏǐǑǒǓǔ⁽‡≬⁺↵⅛¼¾Π„‟'
var codepage_descriptions = []

codepage_descriptions.push(`Lambda
Open a lambda - λ...;
`)

codepage_descriptions.push(`Lambda Map
Open a mapping lambda - ƛ
`)

codepage_descriptions.push(`Logical Not
Return the inverse (negation) of the truthiness of an item.
num a -> not a
str a -> a != "" | len(a) > 0
lst a -> a != [] | len(a) > 0
`)

codepage_descriptions.push(`Logical And
Returns the first truthy argument if both are truthy, otherwise returns the first falsy argument.
any a, any b -> a and b
`)

codepage_descriptions.push(`Apply Lambda
Like a mapping lambda, but the results are evaluated immediately, instead of being lazily evaluated
`)

codepage_descriptions.push(`Logical Or
Returns the first truthy argument, otherwise the first falsy argument.
any a, any b -> a or b
`)

codepage_descriptions.push(`Remove at Index
Returns every item in a list except the item at the given index.
any a, num b -> Remove item b of a
num a, any b -> Remove item a of b
`)

codepage_descriptions.push(`Item Split
Pushes each item of the top of the stack onto the stack.
num a -> Push each digit of a
str a -> Push each character of a
lst a -> Push each item of a
`)

codepage_descriptions.push(`Asterisk Literal
the string "*" (asterisk)
`)

codepage_descriptions.push(`Base Compressed String
Open/close a bijective base-255 compressed string - «...«
`)

codepage_descriptions.push(`Newline
NOP
`)

codepage_descriptions.push(`Base Compressed Number
Open/close a bijective base-255 compressed number - »...»
`)

codepage_descriptions.push(`Complex Number Separator
Separates the real and imaginary parts of a complex number
`)

codepage_descriptions.push(`MultiCommand
Logarithm / Repeat Character / Capitalisation transfer
num a, num b -> log_a(b)
num a, str b -> [char * a for char in b]
str a, num b -> [char * b for char in a]
str a, str b -> a.with_capitalisation_of(b)
lst a, lst b -> a molded  to  the shape of b
`)

codepage_descriptions.push(`Conditional Execute
Executes element A if the top of the stack is truthy
`)

codepage_descriptions.push(`Function Call
Calls a function / executes as python / number of distinct prime factors / vectorised not
fun a -> a()
num a -> len(prime_factors(a))
str a -> exec as python
lst a -> vectorised not
`)

codepage_descriptions.push(`Split On / Fill By Coordinates
Split a on b (works on lists and numbers as well) / Fill a matrix by calling a function with the lists of coordinates in the matrix.
any a, any b -> a split on b
any a, fun b -> for each value of a (all the way down) call b with the coordinates of that value and put that at the appropriate position in a
`)

codepage_descriptions.push(`Halve
Halves an item
num a -> a / 2
str a -> a split into two strings of equal lengths (as close as possible)
`)

codepage_descriptions.push(`Mathematical Digraph
Used for mathematical digraphs
`)

codepage_descriptions.push(`String Digraph
Used for string-based digraphs
`)

codepage_descriptions.push(`Combinations/Remove/Fixed Point Collection
Does either combinations_with_replacement, removes items from a not in b, or applies a on b until the result stops changing.
any a, num b -> combinations_with_replacement(a, length=b)
fun a, any b -> apply a on b until the result does not change, yielding intermediate values
any a, str b -> remove elements from a that are not in b
any a, lst b -> remove elements from a that are not in b
`)

codepage_descriptions.push(`Infinite Replacement / Apply at Indices
Replace b in a with c until a does not change / Call a function on all elements at specified indices together and put that back in the list
any a, any b, any c -> replace b in a with c until a does not change
lst a, fun b, lst c -> apply function b to items in c at indices in a
lst a, lst b, fun c -> apply function c to items in a at indices in b
fun a, lst b, lst c -> apply function a to items in b at indices in c
`)

codepage_descriptions.push(`Complement / Comma Split
1 - a if number, split by commas if string.
num a -> 1 - a
str a -> a.split(",")
`)

codepage_descriptions.push(`Is Prime / Case Check
(a is prime) if a is a number, else check which case a is
num a -> is a prime?
str a -> caseof(a) (1 if all letters in a are uppercase, 0 if all letters in a are lowercase, -1 if mixed case)
`)

codepage_descriptions.push(`Inclusive Zero Range
Inclusive range or whether each character is alphabetical
num a -> range(0,a + 1) (inclusive range from 0)
str a -> [is v alphabetical? for v in a]
`)

codepage_descriptions.push(`Exclusive Zero Range
Exclusive range or palindromise
num a -> range(0,a) (exclusive range from 0)
str a -> palindromise(a) (a + a[:-1:-1])
`)

codepage_descriptions.push(`Inclusive One Range
Inclusive range or uppercase
num a -> range(1,a+1) (inclusive range from 1)
str a -> a.uppercase()
`)

codepage_descriptions.push(`Exclusive One Range / Lowercase
Exclusive range or lowercase
num a -> range(1,a) (exclusive range from 0)
str a -> a.lowercase()
`)

codepage_descriptions.push(`List Digraph
Used for list-related digraphs
`)

codepage_descriptions.push(`Choose / random choice / set same
Binomial coefficient / choose a random items from b / same except duplicates
num a, num b -> a choose b (binomial coefficient)
num a, str b -> choose a random items from b
str a, num b -> choose b random items from a
str a, str b -> are the set of characters in the strings the same?
`)

codepage_descriptions.push(`Palindromise
Palindromise a
any a -> palindromise a (a + a[:-1:-1])
`)

codepage_descriptions.push(`Other Digraphs
Used for various random digraphs
`)

codepage_descriptions.push(`Space
NOP
`)

codepage_descriptions.push(`Stack Length
Push the length of the stack
`)

codepage_descriptions.push(`Pair
Place the top two items into a single list
any a, any b -> [a, b]
`)

codepage_descriptions.push(`Comment
The characters until the next newline are commented out
`)

codepage_descriptions[35] += `
#{ (Multiline Comment)
The characters until the next \`}#\` are commented out. Nestable.
`
codepage_descriptions.push(`Swap
Swap the top two items
any a, any b -> b, a
`)

codepage_descriptions.push(`Modulo / Format
Modulo two numbers / format two strings
num a, num b -> a % b
num a, str b -> b.format(a) (replace % in b with a)
str a, num b -> a.format(b) (replace % in a with b)
str a, str b -> a.format(b) (replace % in a with b)
str a, lst b -> a.format(b) (replace % in a with each item of b)
`)

codepage_descriptions.push(`Apply To Register
Apply the next element to the register
`)

codepage_descriptions.push(`Lambda Filter
Open a filter lambda - '...;
`)

codepage_descriptions.push(`Open For Loop
Start a for loop, iterating over the popped top of stack.
`)

codepage_descriptions.push(`Close For loop
Close a for loop
`)

codepage_descriptions.push(`Multiplication / Arity Change
Multiply two numbers or strings / Change the arity of a function
num a, num b -> a * b
num a, str b -> b repeated a times
str a, num b -> a repeated b times
str a, str b -> ring translate a according to b (in a, replace b[0] with b[1], b[1] with b[2], ..., and b[-1] with b[0])
fun a, num b -> change the arity of function a to b
num a, fun b -> change the arity of function b to a
`)

codepage_descriptions.push(`Addition
Adds the top two items on the stack
num a, num b -> a + b
num a, str b -> str(a) + b
str a, num b -> a + str(b)
str a, str b -> a + b
`)

codepage_descriptions.push(`Print
Print a with trailing newline
any a -> print(a)
`)

codepage_descriptions.push(`Subtract
Subtracts the top two items on the stack
num a, num b -> a - b
num a, str b -> ("-" * a) + b
str a, num b -> a + ("-" * b)
str a, str b -> a.replace(b, '')
`)

codepage_descriptions.push(`Decimal Separator
Decimal separator
`)

codepage_descriptions.push(`Divide / Split
Divide two numbers or split strings
num a, num b -> a / b
num a, str b -> b split into a pieces
str a, num b -> a split into b pieces
str a, str b -> a.split(b)
`)

codepage_descriptions.push(`Literal digit 0
Literal digit 0
`)

codepage_descriptions.push(`Literal digit 1
Literal digit 1
`)

codepage_descriptions.push(`Literal digit 2
Literal digit 2
`)

codepage_descriptions.push(`Literal digit 3
Literal digit 3
`)

codepage_descriptions.push(`Literal digit 4
Literal digit 4
`)

codepage_descriptions.push(`Literal digit 5
Literal digit 5
`)

codepage_descriptions.push(`Literal digit 6
Literal digit 6
`)

codepage_descriptions.push(`Literal digit 7
Literal digit 7
`)

codepage_descriptions.push(`Literal digit 8
Literal digit 8
`)

codepage_descriptions.push(`Literal digit 9
Literal digit 9
`)

codepage_descriptions.push(`Duplicate
Push a twice
any a -> a,a
`)

codepage_descriptions.push(`Close Structure
Close a lambda / map lambda / sort lambda / function
`)

codepage_descriptions.push(`Less Than
Basic comparison - less than
num a, num b -> a < b
num a, str b -> str(a) < b
str a, num b -> a < str(b)
str a, str b -> a < b
any a, fun b -> decrement a until b returns false
fun a, any b -> decrement b until a returns false
`)

codepage_descriptions.push(`Equals
Basic comparison - equals
num a, num b -> a == b
num a, str b -> str(a) == b
str a, num b -> a == str(b)
str a, str b -> a == b
`)

codepage_descriptions.push(`Greater Than
Basic comparison - greater than
num a, num b -> a > b
num a, str b -> str(a) > b
str a, num b -> a > str(b)
str a, str b -> a > b
any a, fun b -> increment a until b returns false
fun a, any b -> increment b until a returns false
`)

codepage_descriptions.push(`Input
Get the next input from the input source
`)

codepage_descriptions.push(`Function Call / Declaration
Call / declare function (@name; / @name|code;)
`)

codepage_descriptions.push(`All
Check if all items in a list are truthy / check if a character is a vowel
str a -> is_vowel(a) if a.length == 1 else [is_vowel(z) for z in a]
any a -> all(a)
`)

codepage_descriptions.push(`Binary To Decimal
Convert a binary string or list to base 10
any a -> int(a,2) (convert from base 2 to base 10)
`)

codepage_descriptions.push(`Chr / Ord
Convert between characters and ordinals
num a -> chr(a)
str a -> ord(a) if length 1 else list of ordinals
`)

codepage_descriptions.push(`Triplicate
Push three copies of a to stack
`)

codepage_descriptions.push(`Two Power / Python Eval
2 ** a, or eval(a)
num a -> 2 ** a
str a -> eval(a) (safe-eval as python)
`)

codepage_descriptions.push(`Filter
Filter a list by another list or function.
any a, fun b -> filter(b,a) (filter a by the ones that b returns a truthy result for)
any a, any b -> remove elements of a that are in b
`)

codepage_descriptions.push(`Max
Maximum value or a
any a -> max(a)
`)

codepage_descriptions.push(`Hex To Decimal
Convert hexadecimal to decimal
any a -> int(a,16) (from hexadecimal)
`)

codepage_descriptions.push(`Into Two Pieces
Push n spaces / quine cheese / into two pieces
num a -> push a spaces
str a -> equivalent to \`qp\`
lst a -> split a list into two halves
`)

codepage_descriptions.push(`Merge
Join two lists or items
lst a, str b -> a.append(b) (append)
lst a, num b -> a.append(b) (append)
str a, lst b -> b.prepend(a) (prepend)
num a, lst b -> b.prepend(a) (prepend)
lst a, lst b -> merged(a,b) (merge)
any a, any b -> a + b (concatenate)
`)

codepage_descriptions.push(`Factors / Substrings / Prefixes
Get either the factors of a, substrings that occur more than once, or prefixes
num a -> divisors(a) (positive integer factors)
str a -> all non-empty substrings of a that occur more than once in a
lst a -> prefixes(a) (prefixes)
`)

codepage_descriptions.push(`Length
Get length of a
any a -> len(a)
`)

codepage_descriptions.push(`Map
Map b over a
any a, fun b -> map(b,a) (apply b to each of a)
any a, any b -> pair each item of b with a ([[a, i] for i in b])
`)

codepage_descriptions.push(`Negate / Swap Case / First Integer Where Truthy
Negate a number / swap case of a string / first integer where a function truthy
num a -> -a  (negate)
str a -> swap_case(a) (toggle case)
fun a -> first integer where a(n) is true
`)

codepage_descriptions.push(`Count
Count number of times b occurs in a
any a, any b -> a.count(b)
`)

codepage_descriptions.push(`Strip
Remove the set of elements in b from both ends of a
any a, any b -> a.strip(b)
`)

codepage_descriptions.push(`Quit
Quit the program
`)

codepage_descriptions.push(`Reduce
Reduce a by b, or reverse each item of b
any a, fun b -> reduce(b,a) (Reduce a by b)
any a, any b -> a, vectorised_reverse(b)
`)

codepage_descriptions.push(`Stringify
Stringify a list or number
any a -> str(a) (Stringify)
`)

codepage_descriptions.push(`Truthy Indices / Triple / Triadify
Get indices of truthy elements, triple, or make the arity of a function 3
num a -> a * 3
any a -> truthy_indices(a)
fun a -> set the arity of function a to 3
`)

codepage_descriptions.push(`Uniquify
Remove duplicates
any a -> uniquify(a) (remove duplicates)
`)

codepage_descriptions.push(`Replace / Map to Indices
Replace b with c in a / Map a function at elements of a list whose indices are in another list
any a, any b, any c -> a.replace(b,c) (replace)
lst a, lst b, fun c -> for each i in b, change the ith element in a by applying the function, then return the new list
lst a, num b, fun c -> replace the bth element in a by applying the function, then return the new list
`)

codepage_descriptions.push(`Wrap
Stack wrapped into a list
`)

codepage_descriptions.push(`Break
Break out of the current loop or return early from a function.
`)

codepage_descriptions.push(`Interleave
Interleave two lists
any a, any b -> interleave(a,b) (a[0], b[0], a[1], b[1], ...)
`)

codepage_descriptions.push(`Zip
Zip two lists or Zip a with b mapped over a. Fills with 0s if needed.
any a, any b -> zip(a,b)
any a, fun b -> zip(a,map(b,a)) (zipmap, map and zip)
`)

codepage_descriptions.push(`Open If Statement
Open an if Statement
`)

codepage_descriptions.push(`Single char Literal
Pushes a single character
`)

codepage_descriptions.push(`Close If Statement
Close an if Statement
`)

codepage_descriptions.push(`String Literal
A string literal - \`...\`
`)

codepage_descriptions.push(`Reverse Stack
Reverse the stack.
`)

codepage_descriptions.push(`Pop
Pop the top item of the stack
`)

codepage_descriptions.push(`Any
Check if any items of a list are truthy / Check if a character is an uppercase letter
str a -> is_uppercase(a) if a.length == 1 else [is_uppercase(z) for z in a]
lst a -> any(a) (are any items truthy?)
`)

codepage_descriptions.push(`Binary
Convert a number or string to binary
num a -> bin(a) (list of binary digits of a)
str a -> [bin(ord(char)) for char in a] (list of binary digits for each codepoint in a)
`)

codepage_descriptions.push(`Contains / First Truthy Item Under Function Application
Check if one thing contains another / returns the first truthy item in a list after applying a function
any a, fun b -> first item of a where b(x) is truthy (shortcut for Fh)
any a, any b -> b in a (does a contain b, membership, contains)
`)

codepage_descriptions.push(`Double / Dyadify
Double a number or repeat a string twice / make a function dyadic
num a -> a * 2 (double)
str a -> a * 2 (repeated twice)
fun a -> change the arity of the function to 2
`)

codepage_descriptions.push(`Exponentiation
Exponentiate two numbers / extend string / get length of a regex match
num a, num b -> a ** b (exponentiation)
str a, num b -> append a[0] until a is length b (spaces are used if a is empty)
num a, str b -> append b[0] until b is length a (spaces are used if b is empty)
str a, str b -> regex.search(pattern=a, string=b).span() (length of regex match)
`)

codepage_descriptions.push(`Flatten
Turn a number into a list of digits, split a string into a list of characters, or flatten a list.
num a -> digits of a
str a -> list of characters of a
lst a -> flatten(a) (deep flatten)
`)

codepage_descriptions.push(`Minimum
Take the minimum of a list
any a -> min(a)
`)

codepage_descriptions.push(`Head
First item of something
any a -> a[0] (first item)
`)

codepage_descriptions.push(`Index
Index into a list
any a, num b -> a[b] (index)
num a, any b -> b[a] (index)
str a, str b -> enclose b in a (b[0:len(b)//2] + a + b[len(b)//2:])
any a, [x] b -> a[:b] (0 to bth item of a)
any a, [x,y] b -> a[x:y] (x to yth item of a)
any a, [x,y,m] b -> a[x:y:m] (x to yth item of a, taking every mth)
`)

codepage_descriptions.push(`Join
Join a list by a string
any a, any b -> a.join(b)
`)

codepage_descriptions.push(`Constant Digraph
Used for constant digraphs.
`)

codepage_descriptions.push(`Cumulative Groups
Cumulative groups (overlapping groups, aperture) / Equal length
any a, num b -> [a[0:b], a[1:b+1], a[2:b+2], ..., a[-b:]]
num a, any b -> [b[0:a], b[1:a+1], b[2:a+2], ..., b[-a:]]
any a, any b -> length(a) == length(b)
`)

codepage_descriptions.push(`Mirror
Append input reversed to itself.
num a -> a + reversed(a) (as number)
str a -> a + reversed(a)
lst a -> append reversed(a) to a
`)

codepage_descriptions.push(`Context
Context variable, value of the current loop or function.
`)

codepage_descriptions.push(`Remove
Remove instances of b in a
num a, fun b -> first a positive integers where b is truthy
fun a, num b -> first b positive integers where a is truthy
any a, any b -> a.replace(b,"")
`)

codepage_descriptions.push(`Prepend
Prepend b to a
any a, any b -> a.prepend(b) (prepend b to a)
`)

codepage_descriptions.push(`Uneval
Enclose in backticks, escape backslashes and backticks.
any a -> uneval(a) (enclose in backticks + escape)
`)

codepage_descriptions.push(`Range
Range between two numbers, or cumulative reduce, or regex match
num a, num b -> range(a,b) (range from a to b)
num a, str b -> append spaces to b to make it length a
str a, num b -> prepend spaces to a to make it length b
any a, fun b -> cumulative_reduce(a,function=b) (prefixes of a reduced by b)
str a, str b -> regex.has_match(pattern=a,string= b) (does b match a)
`)

codepage_descriptions.push(`sort
Sort a list or string
any a -> sorted(a) (sort)
`)

codepage_descriptions.push(`Tail
Last item
any a -> a[-1] (last item)
`)

codepage_descriptions.push(`Minus One
Push -1
`)

codepage_descriptions.push(`Vectorise
Vectorise an element
`)

codepage_descriptions[118] += `
¨v (Simple vectorise)
Simple vectorise an element. Well, you'll have to look at the code to know what that means.
`
codepage_descriptions.push(`Listify
a wrapped in a singleton list
any a -> [a] (wrap in singleton list)
`)

codepage_descriptions.push(`Recurse / Continue / Print Stack
Call current function (Functions/Lambdas) / Continue (For Loops) / Print the entire stack (otherwise)
`)

codepage_descriptions.push(`Uninterleave
Push every other item of a, and the rest.
any a -> a[::2], a[1::2] (every second item, the rest)
`)

codepage_descriptions.push(`Zip-self
Zip a with itself
any a -> zip(a,a)
`)

codepage_descriptions.push(`Open While Loop
Open a while loop - \`{...}\`
`)

codepage_descriptions.push(`Branch In Structure
Branch the structure - means various things depending on context
`)

codepage_descriptions.push(`Close While Loop
Close a while loop
`)

codepage_descriptions.push(`Filter / Execute Without Pop
For monads, filter a list by that. For dyads, execute without popping from the stack.
`)

codepage_descriptions.push(`Max by Tail
Maximum by last item
any a -> max(a, key=lambda x: x[-1]) (maximum by last item)
`)

codepage_descriptions.push(`Min by Tail
Minimum by last item
any a -> min(a, key=lambda x: x[-1]) (minimum by last item)
`)

codepage_descriptions.push(`Dyadic Maximum
Maximum of two values / Maximum of a list by a function
any a, any b -> max(a,b)
any a, fun b -> max(a,key=b)
`)

codepage_descriptions.push(`Dyadic Minimum
Minimum of two values / Minimum of a list by a function
any a, any b -> min(a,b)
any a, fun b -> min(a,key=b)
`)

codepage_descriptions.push(`Increment / Space Replace With 0
Add 1 to a number / replace all spaces in a string with "0"
num a -> a + 1
string a -> a.replace(" ","0")
`)

codepage_descriptions.push(`Decrement
Subtract 1 from a number
num a -> a - 1
str a -> a + "-"
`)

codepage_descriptions.push(`Parity
A number modulo 2
num a -> a % 2 (odd?)
str a -> second half of A
`)

codepage_descriptions.push(`Empty String
The empty string
`)

codepage_descriptions.push(`Space
A Space
`)

codepage_descriptions.push(`Variable Set
Set variable (→name)
`)

codepage_descriptions.push(`Variable Get
Get the value of a variable (←name)
`)

codepage_descriptions.push(`To Base Ten / From Custom Base
Convert a number from a custom base to base 10
any a, num b -> a to base 10 from number base b, treating list items / string items as digits
str a, str b -> a to base 10 from custom string base b, replacing values in a with their index in b and converting to base 10
`)

codepage_descriptions.push(`From Base Ten / To Custom Base
Convert a number to a different base from base 10.
num a, num b -> list of digits of a in base b
num a, str b -> a converted into a string of characters of b
num a, lst b -> a converted into a list of arbitrary values from b
`)

codepage_descriptions.push(`Absolute value
Take the absolute value of a number, or remove whitespace from a string
num a -> abs(a) (absolute value)
str a -> remove whitespace from a
`)

codepage_descriptions.push(`Boolify
Convert an arbitrary value into a truthy or falsy value, vectorises with flag t
any a -> bool(a) (booliify)
`)

codepage_descriptions.push(`Not One
Check if something is not equal to 1
any a -> a != 1
`)

codepage_descriptions.push(`Divmod
Divmod / combinations / trim
num a, num b -> [a // b, a % b] (divmod - division and modulo)
str a, num b -> combinations of a with length b
lst a, num b -> combinations of a with length b
str a, str b -> overwrite the start of a with b (b + a[len(b):])
`)

codepage_descriptions.push(`Enumerate
Zip with a range of the same length
any a -> enumerate(a) (zip with 1...len(a))
`)

codepage_descriptions.push(`Find
Find a value in another
any a, any b -> a.find(b) (indexing, -1 if not found)
any a, fun b -> truthy indices of mapping b over a
`)

codepage_descriptions.push(`Gcd / Group by Function
Greatest Common Denominator of a list or some numbers
lst a -> GCD(a) (gcd of whole list)
num a, num b -> gcd(a,b) (dyadic gcd)
str a, str b -> longest common suffix of a and b
fun a, any b -> group b by the results of function a
any a, fun b -> group a by the results of function b
`)

codepage_descriptions.push(`Head Extract
Separate the first item of something and push both to stack
any a -> a[0], a[1:] (head extract)
`)

codepage_descriptions.push(`Floor Division
Floor divide a by b
num a, num b -> a // b (floor division, floor(a / b))
str a, num b -> (a divided into b pieces)[0]
num a, str b -> (b divided into a pieces)[0]
any a, fun b -> right reduce a by b (foldr)
fun a, any b -> right reduce b by a (foldr)
`)

codepage_descriptions.push(`Left Justify / Gridify / Infinite Replace / Collect until false
Find one value inside another, starting from a certain index.
num a, num b, num c -> a <= c <= b
num a, num b, str c -> a by b grid of c
num a, str b, num c -> a by c grid of b
num a, str b, str c -> b.ljust(a,filler=c)
str a, num b, num c -> b by c grid of a
str a, num b, str c -> a.ljust(c,filler=b)
str a, str b, num c -> a.ljust(b,filler=c)
str a, str b, str c -> a.infinite_replace(b, c)
fun a, fun b, any c -> [c, a(c), a(a(c)), ...], stopping at the first element x such that b(x) is falsy
`)

codepage_descriptions.push(`Mean
Average of a list - sum / length
str a -> palindromise(a) (a + a[:-1:-1])
lst a -> mean(a)
`)

codepage_descriptions.push(`Join By Nothing
Join a list by the empty string. Vectorises if the list contains lists.
num a -> abs(a) <= 1
str a -> pad with 0s to nearest positive multiple of 8
lst a -> "".join(a)
fun a -> first integer x where a(x) is truthy
`)

codepage_descriptions.push(`Slice
Slice from an index to the end
fun a, num b -> first b integers for which a(x) is truthy
any a, num b -> a[b:] (slice from b to the end)
str a, str b -> vertically merge a and b
`)

codepage_descriptions.push(`Powerset
All possible combinations of a
any a -> all subsets of a (including the empty subset)
`)

codepage_descriptions.push(`Round
Round a number to the nearest integer / real and imaginary part of complex number
num a -> round(a)
complex a -> [real(a), imag(a)]
str a -> quad palindromise with overlap
`)

codepage_descriptions.push(`Sort by Function
Sort a list by a function / create a range / split on a regex
any a, fun b -> sorted(a, key=b) (sort by b)
num a, num b -> range(a, b + 1) (inclusive range from a to b)
str a, str b -> regex.split(pattern=b, string=a)
`)

codepage_descriptions.push(`Tail Extract
Remove the last item and push both onto the stack
any a -> a[:-1],a[-1]
`)

codepage_descriptions.push(`Chunk Wrap
Wrap a list in chunks of a certain length / apply a function to every second item of a list
any a, num b -> a wrapped in chunks of length b
num a, any b -> b wrapped in chunks of length a
any a, lst b -> wrap a into chunks with lengths given in b, repeating if necessary
lst a, any b -> wrap b into chunks with lengths given in a, repeating if necessary
any a, fun b -> apply b to every second item of a ([a[0], b(a[1]), a[2], ...])
fun a, any b -> apply a to every second item of b ([b[0], a(b[1]), b[2], ...])
str a, str b -> split a on first occurrence of b
`)

codepage_descriptions.push(`Repeat
Repeat a value several times
str a, num b -> a * b
num a, str b -> b * a
any a, num b -> repeat a b times ([a, a, ...])
str a, str b -> a + " " + b
fun a, any b -> repeat function a on b while results are not unique ([a(b), a(a(b)), a(a(a(b))), ...] stopping at the first element i such that i == a(i))
any a, fun b -> repeat function a on b while results are not unique ([b(a), b(b(a)), b(b(b(a))), ...] stopping at the first element i such that i == b(i))
`)

codepage_descriptions.push(`Exclusive Range Length
Range from 0 to length of a
any a -> range(0, len(a)) (exclusive range from 0 to length of a)
`)

codepage_descriptions.push(`Inclusive Range Length
Range from 1 to length of a inclusive
any a -> range(1, len(a)+1) (inclusive range from 1 to length of a)
`)

codepage_descriptions.push(`Square Root
Square root a number / every second character of a
num a -> sqrt(a) (square root)
str a -> every second character of a (a[0] + a[2] + ...)
`)

codepage_descriptions.push(`Open List
Open a list - ⟨...⟩
`)

codepage_descriptions.push(`Close list
Close a list - ⟨...⟩
`)

codepage_descriptions.push(`Two Character String
Collect the next two characters as a string - ‛..
`)

codepage_descriptions.push(`Ten
Push 10 to the stack
`)

codepage_descriptions.push(`Hundred
Push 100 to the stack
`)

codepage_descriptions.push(`Is Even
Check if a value is even
num a -> a % 2 == 0 (even?)
any a -> len(a) % 2 == 0 (length even?)
`)

codepage_descriptions.push(`Divisible By Three
Check if a is divisible by 3
num a -> a % 3 == 0 (divisible by 3?)
any a -> len(a) == 1 (length is 1?)
`)

codepage_descriptions.push(`Twenty Six
Push 26 to the stack
`)

codepage_descriptions.push(`Divisible By Five
Check if a is divisible by 5
num a -> a % 5 == 0
any a -> a, len(a)
`)

codepage_descriptions.push(`Sixty Four
Push 64 to the stack
`)

codepage_descriptions.push(`One Twenty Eight
Push 128 to the stack
`)

codepage_descriptions.push(`Two Fifty Six
Push 256 to the stack
`)

codepage_descriptions.push(`Newline
Push a newline to the stack
`)

codepage_descriptions.push(`Join On Newlines
Join the top of the stack on newlines (insert "\n" between items)
any a -> "\\n".join(a)
`)

codepage_descriptions.push(`Vertical Join
Transpose (filling with spaces) and then join on newlines
any a -> transpose a, join on newlines
`)

codepage_descriptions.push(`Absolute Difference / Repeat / Regex match
Returns the absolute difference / Fills an array of a certain length / Does a regex match
num a, num b -> abs(a - b)
num a, str b -> [b] * a
str a, num b -> [a] * b
str a, str b -> regex.match(b, a) (first match of regex b on a)
`)

codepage_descriptions.push(`Factorial
Returns the factorial of the top of the stack
num a -> factorial(a) (math.gamma(a + 1))
str a -> a.sentence_case()
`)

codepage_descriptions.push(`Summate
Returns the sum of the top of the stack (reduce by addition)
num a -> sum(digits of a)
str a -> a
lst a -> sum(a)
`)

codepage_descriptions.push(`Cumulative Sum
Returns the sums of the prefixes of the top of the stack (cumulatively reduce by addition)
any a -> cumulative_sum(a) ([a[0], a[0]+a[1], a[0]+a[1]+a[2], ...])
`)

codepage_descriptions.push(`All Equal
Returns whether all items are equal
any a -> are all items in a equal?
`)

codepage_descriptions.push(`Sorting Lambda
Sort the top of the stack by the function µ...;
`)

codepage_descriptions.push(`Assign
The equivalent of a[b] = c
any a, num b, any c -> a but item b (0-indexed) is set to c
`)

codepage_descriptions.push(`Bifurcate
Pushes the top of the stack then its reverse. Literally duplicate and reverse
any a -> a, reversed(a)
`)

codepage_descriptions.push(`Counts
Returns a list of [item, count of item in the top of stack]
any a -> [[x, a.count(x)] for x in a]
`)

codepage_descriptions.push(`Is Divisible / Arbitrary Duplicate / Ordered Group By
Returns whether two items are divisible / numerous copies of the top of the stack / groups by results of function preserving order
num a, num b -> a % b == 0
num a, str b -> a copies of b
str a, num b -> b copies of a
str a, str b -> b + " " + a
any a, fun b -> group a by the results of b, order is preserved
fun a, any b -> group b by the results of a, order is preserved
`)

codepage_descriptions.push(`Vyxal Exec / Reciprocal
Executes as Vyxal / Reciprocal of number
str a -> vy_exec(a)
num a -> 1 / a
`)

codepage_descriptions.push(`Generator / Modulo Index / Format
Make a generator from function a with initial vector b, or get every nth item or format numbers as decimals.
num a, num b -> sympy.N(a, b) (evaluate a to b decimal places)
str a, num b -> every bth letter of a (a[::b])
num a, str b -> every ath letter of b (b[::a])
str a, str b -> replace spaces in a with b
lst a, num b -> every bth item of a (a[::b])
num a, lst b -> every ath item of b (b[::a])
fun a, lst b -> generator from function a with initial vector b
`)

codepage_descriptions.push(`Group consecutive
Group consecutive identical items
lst a -> group consecutive identical items
str a -> group consecutive identical characters
num a -> group consecutive identical digits
`)

codepage_descriptions.push(`Head Remove / Behead
All but the first item of a list / Drop 1
lst a -> a[1:] or [] if empty
str a -> a[1:] or '' if empty
num a -> remove first digit or do nothing if <1
`)

codepage_descriptions.push(`Index into or collect while unique
Index into list at indices / Collect values while values are unique
any a, lst b -> [a[item] for item in b]
any a, fun b -> apply b on a and collect unique values
`)

codepage_descriptions.push(`Transliterate
Replace each item of one value in another value with the corresponding element from a third value
any a, any b, any c -> transliterate(a,b,c) (in a, replace b[0] with c[0], b[1] with c[1], b[2] with c[2], ...)
fun a, fun b, any c -> call b on c until a(c) is falsy
`)

codepage_descriptions.push(`Insert
Insert a value at a specified index / Map a function over every nth item of a list
any a, num b, any c -> a.insert(b,c) (insert c at position b in a)
any a, num b, fun c -> c mapped over every bth item of a ([c(v) if i%b==0 else v for i,v in enumerate(a)])
`)

codepage_descriptions.push(`Integer partitions
Integer partitions / join by space
num a -> integer_partitions(a) (integer partitions)
any a -> " ".join(a) (join by space)
`)

codepage_descriptions.push(`Over
Push the second-last item of stack to the top
`)

codepage_descriptions.push(`Permutations
Get all permutations of a value
any a -> permutations(a) (get all permutations)
`)

codepage_descriptions.push(`Reverse
Reverse a value
any a -> reversed(a)
`)

codepage_descriptions.push(`Vectorised sums
Sum of each item in a list
`)

codepage_descriptions.push(`Tail Remove
Cut off the last item of a list
any a -> a[:-1] (all but the last item)
`)

codepage_descriptions.push(`Split And Keep Delimiter
Split a value and keep the delimiter
any a, any b -> a.split_and_keep_delimiter(b) (split and keep the delimiter)
fun a, any b -> apply a to every second item of b starting on the first item
`)

codepage_descriptions.push(`Cartesian Product / Fixpoint
Take the Cartesian Product of two values, or apply a function until there is no change. If arguments are numbers, turns them into ranges.

any a, any b -> cartesian-product(a,b)
fun a, any b -> apply a on b until b does not change
`)

codepage_descriptions.push(`Slice Until
Slice a list until a certain index / find all results for a regex match
any a, num b -> a[0:b] (slice until b)
num a, any b -> b[0:a] (slice until a)
str a, str b -> regex.findall(pattern=a,string=b) (find all matches for a regex)
any a, fun b -> take results from a while b(x) is truthy
fun a, any b -> take results from b while a(x) is truthy
`)

codepage_descriptions.push(`Slice From One Until
Slice from index 1 until a number / get groups of a regex match
any a, num b -> a[1:b] (slice from 1 until b)
num a, any b -> b[1:a] (slice from 1 until a)
str a, str b -> regex.match(pattern=a,string=b).groups() (Get groups for a regex match)
`)

codepage_descriptions.push(`Parallel Apply
Parallel apply two elements to the top of the stack
`)

codepage_descriptions.push(`Parallel Apply Wrap
Parallel apply two elements and wrap the results in a list
`)

codepage_descriptions.push(`First Input
Push the first input
`)

codepage_descriptions.push(`Second Input
Push the second input
`)

codepage_descriptions.push(`Square
Square a number / Format a string into a square
num a -> a ** 2 (squared)
str a -> a formatted as a square (list of sqrt(len(a)) strings, each sqrt(len(a)) long, such that joining the strings and removing spaces in the end gives a)
`)

codepage_descriptions.push(`Shift
Shift the top of stack two values down
any a, any b, any c -> c,a,b (shift)
`)

codepage_descriptions.push(`Ceiling
Take the ceiling of a number / Imaginary part of complex number / split a string on spaces
num a -> ceil(a) (ceiling)
complex a -> imaginary part of a
str a -> split on spaces
`)

codepage_descriptions.push(`Floor
Floor a number / real part of complex number / extract the integer part of a string
num a -> floor(a) (floor)
complex a -> real part of a
str a -> integer part of a
`)

codepage_descriptions.push(`Deltas
Deltas (consecutive differences)
any a -> deltas(a) ([a[1] - a[0], a[2] - a[1], ...])
`)

codepage_descriptions.push(`Sign
Get the sign of a number
num a -> sign_of(a) (positive = 1, 0 = 0; negative = -1)
str a -> is a numeric
`)

codepage_descriptions.push(`Print Without Newline
Print a value without a trailing newline
`)

codepage_descriptions.push(`Print Without Popping
Print a value without popping the stack
`)

codepage_descriptions.push(`Input List
All inputs wrapped in a list
`)

codepage_descriptions.push(`Right Bit Shift
Right-bitshift a value / right-justify a string
num a, num b -> a << b
num a, str b -> a.rjust(b)
str a, num b -> b.rjust(a)
str a, str b -> a.rjust(len(b)-len(a))
`)

codepage_descriptions.push(`Left Bit Shift
Left-bitshift a value / left-justify a string
num a, num b -> a >> b
num a, str b -> a.ljust(b)
str a, num b -> b.ljust(a)
str a, str b -> a.ljust(len(b)-len(a))
`)

codepage_descriptions.push(`Bitwise And
Performs bitwise and between two numbers / centre a string
num a, num b -> a & b
num a, str b -> b.center(a)
str a, num b -> a.center(b)
str a, str b -> a.center(len(b) - len(a))
`)

codepage_descriptions.push(`Bitwise Or
Performs bitwise or between two numbers / Removes a character at nth index / Merges strings on longest common prefix and suffix
num a, num b -> a | b
num a, str b -> b[:a]+b[a+1:]
str a, num b -> a[:b]+a[b+1:]
str a, str b -> merge_join(a,b)
`)

codepage_descriptions.push(`Bitwise Xor
Performs bitwise xor between two numbers / appends n spaces to a string / prepends n characters to a string / Levenshtein Distance
num a, num b -> a ^ b
num a, str b -> \" \" * a + b
str a, num b -> a + \" \" * b
str a, str b -> levenshtein_distance(a,b)
`)

codepage_descriptions.push(`Bitwise Not
Performs bitwise not on a number / check if any letters are uppercase / keep only truthy elements of a list
num a -> ~a
str a -> any_upper(a)
lst a -> keep truthy
`)

codepage_descriptions.push(`Random Choice
Random choice of single item from array
lst a -> random.choice(a)
num a -> Random integer from 0 to a
`)

codepage_descriptions.push(`Lesser Than or Equal To
a is lesser than or equal to b?
any a, any b -> a <= b
`)

codepage_descriptions.push(`Greater Than or Equal To
a is greater than or equal to b?
any a, any b -> a >= b
`)

codepage_descriptions.push(`Not Equal To
a is not equal to b?
any a, any b -> a != b
`)

codepage_descriptions.push(`Exactly Equal To
a equal to b? (non-vectorizing)
any a, any b -> a == b
`)

codepage_descriptions.push(`Reduce by
Reduce by an element
`)

codepage_descriptions.push(`Scan by
Cumulatively reduce by an element
`)

codepage_descriptions.push(`Set Union
Merge two arrays without duplicates
any a, any b -> list(set(a).union(set(b)))
`)

codepage_descriptions.push(`Transpose
Transpose an array
any a -> transposed array
`)

codepage_descriptions.push(`Symmetric Set difference
Uncommon elements of two arrays
any a, any b -> list(set(a) ^ set(b))
`)

codepage_descriptions.push(`Set Register
Set the register to argument value
any a -> set_register(a)
`)

codepage_descriptions.push(`Push Register
Push the current register value
`)

codepage_descriptions.push(`Grade Up
Indices of elements to sort in ascending order / uppercase / increment number twice
lst a -> graded_up(a)
str a -> a.upper()
num a -> a + 2
`)

codepage_descriptions.push(`Grade Down
Indices of elements to sort in descending order / lowercase / decrement number twice
lst a -> graded_down(a)
str a -> a.lower()
num a -> a - 2
`)

codepage_descriptions.push(`Remove non-alphabets
Remove non-alphabetical characters / power with base 2
str a -> filter(isalpha, a)
num a -> 2 ** a
`)

codepage_descriptions.push(`Nth prime
nth prime / all substrings
str a -> substrings(a)
num a -> nth_prime(a)
`)

codepage_descriptions.push(`Prime factorization
prime factorization / append first element
num a -> prime_factorization(a) (distinct prime factors)
str a -> a + a[0]
lst a -> a + [a[0]]
`)

codepage_descriptions.push(`Prime factors
all prime factors / Title Case string
num a -> prime_factors(a) (prime factors possibly with repetition)
str a -> title_case(a)
`)

codepage_descriptions.push(`Multiplicity / Remove Fixpoint / First Truthy Index Under Function
Order, Multiplicity, Valuation / remove till fixpoint / First truthy index under function application
num a, num b -> multiplicity(a,b)
str a, str b -> remove_till_fixpoint(a,b)
fun a, any b -> first index in a where b(x) is truthy (shortcut for ḟh)
`)

codepage_descriptions.push(`Modulo 3
Modulo 3 / Split into Length 2
num a -> a % 3
str a -> a split into chunks of length 2
`)

codepage_descriptions.push(`Rotate Left
Rotate Left / Rotate Left Once
any a, num b -> rotate_left(a,b)
any a, any b -> a,(b[1:]+b[:1])
`)

codepage_descriptions.push(`Rotate Right
Rotate Right / Rotate Right Once
any a, num b -> rotate_right(a,b)
any a, any b -> a,(b[-1:]+b[:-1])
`)

codepage_descriptions.push(`One Element Lambda
One Element lambda function (prefix)
`)

codepage_descriptions.push(`Two Element Lambda
Two Element lambda function (prefix)
`)

codepage_descriptions.push(`Three Element Lambda
Three Element lambda function (prefix)
`)

codepage_descriptions.push(`Index of next character in codepage
Compressed number in 1-128 (prefix)
`)

codepage_descriptions.push(`Split On newlines
Split on newlines / Power with base 10
str a -> a.split("\n")
num a -> 10 ** a
`)

codepage_descriptions.push(`Push To Global Array
Push to global array (no popping)
`)

codepage_descriptions.push(`Pop From Global Array
Pop from global array, push to stack
`)

codepage_descriptions.push(`Push Global Array
Push global array, no modification of global array
`)

codepage_descriptions.push(`Product of Array / Cartesian product over list
Product of Array / Cartesian product over a list of lists
lst[num] a -> reduce list by multiplication
lst[str|lst] a -> reduce list by Cartesian product
`)

codepage_descriptions.push(`Rotate Stack Left
Rotate Stack Left
`)

codepage_descriptions.push(`Rotate Stack Right
Rotate Stack Right
`)

codepage_descriptions[65] += `
kA (Uppercase alphabet)
"ABCDEFGHIJKLMNOPQRSTUVWXYZ" (uppercase alphabet)
`
codepage_descriptions[101] += `
ke (e, Euler's number)
2.718281828459045 (math.e, Euler's number)
`
codepage_descriptions[102] += `
kf (Fizz)
Fizz
`
codepage_descriptions[98] += `
kb (Buzz)
Buzz
`
codepage_descriptions[70] += `
kF (FizzBuzz)
FizzBuzz
`
codepage_descriptions[72] += `
kH (Hello, World!)
Hello, World!
`
codepage_descriptions[104] += `
kh (Hello World (No Punctuation))
Hello World
`
codepage_descriptions[49] += `
k1 (1000)
10^3 / 1000
`
codepage_descriptions[50] += `
k2 (10000)
10^4 / 10000
`
codepage_descriptions[51] += `
k3 (100000)
10^5 / 100000
`
codepage_descriptions[52] += `
k4 (1000000)
10^6 / 1000000
`
codepage_descriptions[97] += `
ka (Lowercase alphabet)
"abcdefghijklmnopqrstuvwxyz" (lowercase alphabet)
`
codepage_descriptions[76] += `
kL (Lowercase and uppercase alphabet)
"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" (uppercase+lowercase alphabet)
`
codepage_descriptions[100] += `
kd (Digits)
"0123456789" (Digits 0-9)
`
codepage_descriptions[54] += `
k6 (Hex digits (lowercase))
"0123456789abcdef" (Hex digits)
`
codepage_descriptions[95] += `
k^ (Hex digits (uppercase))
"0123456789ABCDEF" (Hex digits uppercase)
`
codepage_descriptions[111] += `
ko (Octal digits)
"01234567" (Octal digits)
`
codepage_descriptions[112] += `
kp (Punctuation)
string.punctuation (Punctuations)
`
codepage_descriptions[80] += `
kP (Printable ASCII)
printable ascii
`
codepage_descriptions[119] += `
kw (ASCII Whitespace)
All ASCII whitespace
`
codepage_descriptions[114] += `
kr (Digits, lowercase alphabet, and uppercase alphabet)
"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" (0-9A-Za-z)
`
codepage_descriptions[66] += `
kB (Uppercase and lowercase alphabet)
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" (A-Za-z)
`
codepage_descriptions[90] += `
kZ (Uppercase alphabet reversed)
"ZYXWVUTSRQPONMLKJIHGFEDCBA" (uppercase alphabet reversed)
`
codepage_descriptions[122] += `
kz (Lowercase alphabet reversed)
"zyxwvutsrqponmlkjihgfedcba" (lowercase alphabet reversed)
`
codepage_descriptions[108] += `
kl (Uppercase and lowercase alphabet, reversed)
"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba" (Z-Az-a)
`
codepage_descriptions[105] += `
ki (Pi)
3.141592653589793 (Pi)
`
codepage_descriptions[110] += `
kn (NaN)
math.nan
`
codepage_descriptions[103] += `
kg (Golden ratio/phi)
1.618033988749895 (golden ratio/phi)
`
codepage_descriptions[68] += `
kD (Current day in the format YYYY-MM-DD)
Current day in the format YYYY-MM-DD
`
codepage_descriptions[78] += `
kN (Current time as a list of ⟨hh|mm|ss⟩)
Current time as a list of ⟨hh|mm|ss⟩
`
codepage_descriptions[143] += `
kḋ (Current day in the format DD/MM/YYYY)
Current day in the format DD/MM/YYYY
`
codepage_descriptions[186] += `
kḊ (Current day in the format MM/DD/YYYY)
Current day in the format MM/DD/YYYY
`
codepage_descriptions[135] += `
kð (Current day in the format ⟨DD|MM|YYYY⟩)
Current day in the format ⟨DD|MM|YYYY⟩
`
codepage_descriptions[138] += `
kβ (Braces, square brackets, angle brackets, and parentheses)
{}[]<>()
`
codepage_descriptions[184] += `
kḂ (Parentheses, square brackets, and braces)
"()[]{}" (Brackets)
`
codepage_descriptions[14] += `
kß (Parentheses and square brackets)
()[]
`
codepage_descriptions[141] += `
kḃ (Opening brackets)
"([{" (Open brackets)
`
codepage_descriptions[225] += `
k≥ (Closing brackets)
")]}" (Close brackets)
`
codepage_descriptions[224] += `
k≤ (Opening brackets (with <))
"([{<" (Fish bones :P)
`
codepage_descriptions[253] += `
kΠ (Closing brackets (with >))
")]}>" (Closing brackets)
`
codepage_descriptions[118] += `
kv (Lowercase vowels)
"aeiou" (Vowels lowercase)
`
codepage_descriptions[86] += `
kV (Upercase vowels)
"AEIOU" (Vowels uppercase)
`
codepage_descriptions[5] += `
k∨ (Lowercase and uppercase vowels)
"aeiouAEIOU" (vowelsVOWELS)
`
codepage_descriptions[6] += `
k⟇ (Vyxal codepage)
Yields the Vyxal codepage
`
codepage_descriptions[17] += `
k½ ([1, 2])
[1, 2]
`
codepage_descriptions[148] += `
kḭ (4294967296)
2 ** 32, 2^32, 4294967296
`
codepage_descriptions[43] += `
k+ ([1, -1])
[1, -1]
`
codepage_descriptions[45] += `
k- ([-1, 1])
[-1, 1]
`
codepage_descriptions[181] += `
k≈ ([0, 1])
[0, 1]
`
codepage_descriptions[47] += `
k/ (Slashes)
"/\\" (Forwardslash, backslash)
`
codepage_descriptions[82] += `
kR (360)
360
`
codepage_descriptions[87] += `
kW (https://)
https://
`
codepage_descriptions[223] += `
k℅ (http://)
http://
`
codepage_descriptions[217] += `
k↳ (https://www.)
https://www.
`
codepage_descriptions[208] += `
k² (http://www.)
http://www.
`
codepage_descriptions[174] += `
k¶ (512)
512
`
codepage_descriptions[175] += `
k⁋ (1024)
1024
`
codepage_descriptions[180] += `
k¦ (2048)
2048
`
codepage_descriptions[194] += `
kṄ (4096)
4096
`
codepage_descriptions[151] += `
kṅ (8192)
8192
`
codepage_descriptions[178] += `
k¡ (16384)
16384
`
codepage_descriptions[177] += `
kε (32768)
32768
`
codepage_descriptions[214] += `
k₴ (65536)
65536
`
codepage_descriptions[8] += `
k× (2147483648)
2147483648
`
codepage_descriptions[206] += `
k⁰ (Lowercase consonants with y)
bcdfghjklmnpqrstvwxyz
`
codepage_descriptions[207] += `
k¹ (Lowercase consonants without y)
bcdfghjklmnpqrstvwxz
`
codepage_descriptions[84] += `
kT (BF command set)
BF command set ("[]<>-+.,")
`
codepage_descriptions[153] += `
kṗ (Bracket pair list)
List of bracket pairs ("[(),[],{},<>]")
`
codepage_descriptions[196] += `
kṖ (Nested brackets)
String of all brackets nested ("([{<>}])")
`
codepage_descriptions[83] += `
kS (Amogus)
Amogus ("ඞ")
`
codepage_descriptions[166] += `
k₁ ([1, 1])
The list [1, 1]
`
codepage_descriptions[167] += `
k₂ (2 ** 20)
2 to the power of 20, 1048576
`
codepage_descriptions[168] += `
k₃ (2 ** 30)
2 to the power of 30, 1073741824
`
codepage_descriptions[230] += `
k∪ (Lowercase Vowels With Y)
Lowercase vowels with y, "aeiouy"
`
codepage_descriptions[232] += `
k⊍ (Uppercase Vowels With Y)
Uppercase vowels with y, "AEIOUY"
`
codepage_descriptions[231] += `
k∩ (Vowels With Y)
Vowels with y, "aeiouyAEIOUY"
`
codepage_descriptions[216] += `
k□ (Directions)
Cardinal directions, [[0,1],[1,0],[0,-1],[-1,0]]
`
codepage_descriptions[197] += `
kṘ (Roman Numerals)
IVXLCDM
`
codepage_descriptions[13] += `
k• (Qwerty Keyboard)
The list ["qwertyuiop","asdfghjkl","zxcvbnm"]
`
codepage_descriptions[98] += `
∆b (Binary String)
Get a binary string of a number
num a -> bin(a).replace("0b", "")
`
codepage_descriptions[99] += `
∆c (Cosine)
Get the cosine of an angle in radians
num a -> math.cos(a)
`
codepage_descriptions[67] += `
∆C (Arc Cosine)
Get the arccosine of an angle in radians
num a -> math.arrcos(a)
`
codepage_descriptions[113] += `
∆q (Quadratic Solver)
Solve a quadratic equation of the form ax^2 + bx = 0
num a, num b -> x such that ax^2 + bx = 0
num a, str b -> solve for x such that a = b(x)
str a, num b -> solve for x such that a(x) = b
str a, str b -> solve for x such that a(x) = b(x)
`
codepage_descriptions[81] += `
∆Q (General Quadratic Solver)
Solve a quadratic equation of the form x^2 + ax + b = 0
num a, num b -> roots(a, b) / x^2 + ax + b = 0
num a, str b -> evaluate single variable expression b with x=a
str a, num b -> evaluate single variable expression a with x=b
str a, str b -> solve equations a and b simultaneously for x and y
`
codepage_descriptions[115] += `
∆s (Sine)
Get the sine of an angle in radians
num a -> math.sin(a)
`
codepage_descriptions[83] += `
∆S (Arc Sine)
Get the arcsine of an angle in radians
num a -> math.arcsin(a)
`
codepage_descriptions[116] += `
∆t (Tangent)
Get the tangent of an angle in radians
num a -> math.tan(a)
`
codepage_descriptions[84] += `
∆T (Arc Tangent)
Get the arctangent of an angle in radians
num a -> math.arctan(a)
`
codepage_descriptions[80] += `
∆P (Polynomial Solver)
Solve a polynomial of the form a[0]x^len(a) + a[1]x^len(a)-1 ... = 0
lst a -> roots(a)
`
codepage_descriptions[29] += `
∆ƈ (n Pick r (npr))
Get the number of combinations of r items from a set of n items
num a, num b -> n_pick_r(a, b)
num a, str b -> n_pick_r(a, len(b))
str a, num b -> n_pick_r(len(a), b)
str a, str b -> n_pick_r(len(a), len(b))
`
codepage_descriptions[213] += `
∆± (Copy Sign)
Copy the sign of one number to the other
num a, num b -> math.copysign(a, b)
`
codepage_descriptions[75] += `
∆K (Sum of Proper Divisors / Stationary Points)
Get the sum of all proper divisors of a number /  get the stationary points of a function
num a -> sum_of_proper_divisors(a)
str a -> stationary_points(a)
`
codepage_descriptions[208] += `
∆² (Perfect Square?)
Is the number a perfect square? (1, 4, 9, 16, 25, 36)
num a -> is_perfect_square(a)
`
codepage_descriptions[101] += `
∆e (Euler's Number (e) raised to power a)
Get the value of Euler's number (e) raised to the power of a
num a -> e ** a
str a -> simplify expression a
`
codepage_descriptions[69] += `
∆E ((Euler's Number (e) Raised to Power a) - 1)
Get the value of Euler's number (e) raised to the power of a minus 1
num a -> (e ** a) - 1
str a -> expand expression a
`
codepage_descriptions[76] += `
∆L (Natural Logarithm)
Get the natural logarithm of a number
num a -> math.log(a)
`
codepage_descriptions[108] += `
∆l (Logarithm (log_2))
Get the logarithm of a number to base 2
num a -> math.log2(a)
`
codepage_descriptions[139] += `
∆τ (Common Logarithm)
Get the common logarithm of a number
num a -> math.log10(a)
`
codepage_descriptions[100] += `
∆d (Straight Line Distance)
Get the straight line distance between two points (x1, x2, ..., xn) and (y1, y2, ..., yn)
lst a, lst b -> euclidean_distance(a, b)
`
codepage_descriptions[68] += `
∆D (To Degrees)
Convert an angle from radians to degrees
num a -> math.degrees(a)
`
codepage_descriptions[82] += `
∆R (To Radians)
Convert an angle from degrees to radians
num a -> math.radians(a)
`
codepage_descriptions[196] += `
∆Ṗ (Next Prime After a Number / Discriminant of Polynomial)
Get the next prime number after a given number / the discriminant of a polynomial
num a -> next_prime(a)
str a -> discriminant(a)
`
codepage_descriptions[153] += `
∆ṗ (First Prime Before a Number / Factor Expression)
Get the first prime number before a given number / factor a mathematical expression
num a -> prev_prime(a)
str a -> factorise(a)
`
codepage_descriptions[112] += `
∆p (Nearest Prime to a Number / Python equivalent of an expression)
Get the prime number closest to a given number, get the greater to break ties / return the python equivalent of a mathematical expression - sympy's .pycode() function
num a -> nearest_prime(a)
str a -> sympy.nsimplify(a).pycode()
`
codepage_descriptions[154] += `
∆ṙ (Polynomial from Roots)
Get the polynomial with coefficients from the roots of a polynomial
list a -> polynomial(a)
`
codepage_descriptions[87] += `
∆W (Round to n Decimal Places)
Round a number to n decimal places
num a, num b -> round(a, no_dec_places=b) (b significant digits)
`
codepage_descriptions[37] += `
∆% (Modular Exponentiation)
Get the modular exponentiation a**b mod c
any a, any b, any c -> pow(a, b, c)
`
codepage_descriptions[192] += `
∆Ŀ (Least Common Multiple)
Get the least common multiple of two numbers
lst a -> lcm(a)
num a, num b -> lcm(a, b)
`
codepage_descriptions[105] += `
∆i (nth Digit of Pi / Integrate)
Get the nth digit of pi
num a -> nth_digit_of_pi(a)
str a -> antiderivative of a
`
codepage_descriptions[73] += `
∆I (First N Digits of Pi)
Generate the first n digits of pi
num a -> the first (a + 1)th digits of pi
`
codepage_descriptions[187] += `
∆Ė (N Digits of Euler's Number (e) / Sympy Evaluate)
Get the first n digits of Euler's number (e) / evaluate an expression as sympy
num a -> first n digits of e
str a -> evaluate(a)
`
codepage_descriptions[144] += `
∆ė (Nth Digit of Euler's Number (e) / Differentiate)
Get the nth digit of Euler's number (e)
num a -> nth_digit_of_e(a)
str a -> derivative(a)
`
codepage_descriptions[102] += `
∆f (nth Fibonacci Number)
Get the nth fibonacci number, 1-indexed
num a -> nth_fibonacci(a) (0 -> 1, 1 -> 1, 2 -> 2, ...)
`
codepage_descriptions[70] += `
∆F (nth Fibonacci Number, 0-indexed)
Get the nth fibonacci number, 0-indexed
num a -> nth_fibonacci(a) (0 -> 0, 1 -> 1, 2 -> 1, ...)
`
codepage_descriptions[197] += `
∆Ṙ (Random Float)
Get a random float in the range [0, 1), pseudo random number
num a -> random.random()
`
codepage_descriptions[156] += `
∆ṫ (Totient Function / Local Minima)
Get the totient function of a number / local minima of a function
num a -> totient(a)
str a -> local_minima(a)
`
codepage_descriptions[90] += `
∆Z (ZFill)
Pad a string with zeros to a given length
str, num a -> zfill(a, b)
`
codepage_descriptions[142] += `
∆ċ (Nth Cardinal)
Get the nth cardinal / convert number to words
num a -> num_to_words(a)
`
codepage_descriptions[111] += `
∆o (Nth Ordinal)
Get the nth ordinal / convert number to wordth ordinal
num a -> num_to_ordinal(a)
`
codepage_descriptions[77] += `
∆M (Mode)
Get the mode of a list
lst a -> mode(a)
`
codepage_descriptions[150] += `
∆ṁ (Median)
Get the median of a list - returns a list of the two middle items if even length list (use ṁ to average them)
lst a -> median(a)
`
codepage_descriptions[185] += `
∆Ċ (Polynomial Expression From Coefficients)
Get the polynomial expression from a list of coefficients
num a -> polynomial of degree n
str a -> a
lst a -> polynomial_expression(a)
`
codepage_descriptions[21] += `
∆¢ (Carmichael Function)
Get the Carmichael function of a number / Local Maxima
num a -> carmichael(a)
str a -> local_maxima(a)
`
codepage_descriptions[131] += `
∆› (Increment until false)
Increment a until b(a) is false (deprecated, use \`>\` instead)
any a, fun b -> while b(a): a += 1
fun a, any b -> while a(b): b += 1
`
codepage_descriptions[132] += `
∆‹ (Decrement until false)
Decrement a until b(a) is false (deprecated, use \`<\` instead)
any a, fun b -> while b(a): a -= 1
fun a, any b -> while a(b): b -= 1
`
codepage_descriptions[240] += `
∆ǐ (Prime Exponents)
Get the exponents of prime factors of a number
num a -> prime_exponents(a) (in the order of prime_factors(a))
`
codepage_descriptions[98] += `
øb (Parenthesise)
Parenthesise a string
any a -> "("" + a + ")"
`
codepage_descriptions[66] += `
øB (Bracketify)
Enclose a string in brackets
any a -> "["" + a + "]"
`
codepage_descriptions[141] += `
øḃ (Curly Bracketify)
Enclose a string in curly brackets
any a -> "{"" + a + "}"
`
codepage_descriptions[184] += `
øḂ (Angle Bracketify)
Enclose a string in angle brackets
any a -> "<"" + a + ">"
`
codepage_descriptions[138] += `
øβ (Balanced Brackets)
Check if brackets in a string ("{}()[]<>") are balanced
any a -> balanced_brackets(a)
`
codepage_descriptions[217] += `
ø↳ (Custom Pad Left)
Pad a string to the left with a certain character
any a, str b, num c -> pad a to the left with c so a has length b
any a, num b, str c -> pad a to the left with b so a has length c
`
codepage_descriptions[218] += `
ø↲ (Custom Pad Right)
Pad a string to the right with a certain character
any a, str b, num c -> pad a to the right with c so a has length b
any a, num b, str c -> pad a to the right with b so a has length c
`
codepage_descriptions[77] += `
øM (Flip Brackets Vertical Palindromise)
Vertically palindromise and reverse brackets and slashes, without duplicating center
any a -> palindromise, without duplicating center, and flip brackets and slashes in the second half
`
codepage_descriptions[153] += `
øṗ (Flip Brackets Vertical Palindromise, Center, Join on Newlines)
Vertically palindromise each and reverse brackets and slashes, without duplicating center, then center and join by newlines. Equivalent to \`øMøĊ⁋\`
any a -> palindromise each, without duplicating center, flip brackets and slashes in the second half, center by padding with spaces, and join by newlines
`
codepage_descriptions[109] += `
øm (Flip Brackets Vertical Mirror, Center, Join on Newlines)
Vertically mirror each and reverse brackets and slashes, then center and join by newlines. Equivalent to \`øṀøĊ⁋\`
any a -> mirror each, flip brackets and slashes in the second half, center by padding with spaces, and join by newlines
`
codepage_descriptions[111] += `
øo (Remove Until No change)
Remove b from a until a does not change
str a, str b -> remove b from a until a does not change
str a, lst b -> remove everything in b (in order) from a until a does not change
`
codepage_descriptions[86] += `
øV (Replace Until No Change)
Replace b with c in a until a does not change
str a, str b, str c -> a.replace_until_no_change(b,c)
`
codepage_descriptions[99] += `
øc (String Compress)
Compress a string of lowercase letters and spaces in base 255
str a -> base_255_string_compress(a)
`
codepage_descriptions[67] += `
øC (Number Compress)
Compress a positive integer in base 255
num a -> base_255_number_compress(a)
`
codepage_descriptions[185] += `
øĊ (Center)
Center a list of strings
lst a -> center(a) (pad each item with spaces so all are the same length and centered)
`
codepage_descriptions[101] += `
øe (Run Length Encoding)
Run length encoding, convert from string/list to list of items and amount repeated.
str a -> run_length_encoded(a)
`
codepage_descriptions[187] += `
øĖ (Separated Run Length Encoding)
Run length encoding, convert from string/list to list of items and list of amounts. Equivalent to \`øe∩÷\`
str a -> run length encode a and push items and lengths
`
codepage_descriptions[100] += `
ød (Run Length Decoding)
Run length decoding, convert from list of characters and lengths to a string/list
lst a -> run_length_decoded(a)
`
codepage_descriptions[186] += `
øḊ (Dyadic Run Length Decode)
Run length decoding, convert list of characters and list of lengths to a string/list
lst a, lst b -> run length decode with items a and lengths b
`
codepage_descriptions[68] += `
øD (Dictionary Compression)
Optimally compress a string of English using words from the Vyxal dictionary
str a -> dictionary_compressed(a)
`
codepage_descriptions[87] += `
øW (Group on words)
Group a string on words
str a -> Group a on words, leaving chunks of [a-zA-Z] together and having everything else as a single character
`
codepage_descriptions[142] += `
øċ (Semi Optimal number compress)
Semi-optimally compress a number
num a -> optimal_number_compress(a)
`
codepage_descriptions[154] += `
øṙ (Regex replace)
Replace matches of a with c in b
any a, any b, fun c -> apply c to matches of a in b
any a, any b, any c -> replace matches of a with c in b
`
codepage_descriptions[112] += `
øp (Starts With)
Check if one value starts with another
any a, any b -> a.startswith(b) (Starts with b?)
`
codepage_descriptions[69] += `
øE (Ends With)
Check if one value ends with another
any a, any b -> a.endswith(b) (ends with b?)
`
codepage_descriptions[102] += `
øf (Ends With Set)
Check if a value ends with others
any a, any b -> does a end with all of b?
`
codepage_descriptions[115] += `
øs (Starts With Set)
Check if a value starts with others
any a, any b -> does a start with all of b?
`
codepage_descriptions[80] += `
øP (Pluralise Count)
Create a sentence of the form 'a bs'
num a, str b -> a + " " + b + (s if a != 1 else "") (concatenate with space, append a s if not 1)
`
codepage_descriptions[150] += `
øṁ (Vertical Mirror)
Vertical Mirror - Split by newlines, mirror each line, join by newlines
str a -> vertical_mirror(a)
`
codepage_descriptions[193] += `
øṀ (Flip Brackets Vertical Mirror)
Vertical mirror, and swap brackets and slashes in the second half.
any a -> vertical_mirror(a, mapping = flip brackets and slashes)
`
codepage_descriptions[196] += `
øṖ (String Partitions)
All partitions of a string/list
any a -> all_partitions(a)
`
codepage_descriptions[143] += `
øḋ (To Decimal)
Convert a rational to its decimal representation.
num a -> to_decimal(a)
`
codepage_descriptions[6] += `
ø⟇ (Get Codepage Character / Get Codepage Index)
Get the character at a certain index in the vyxal codepage / Get the index of a character in the vyxal codepage
num a -> vyxal_codepage[a]
str a -> vyxal_codepage.index(a)
`
codepage_descriptions[197] += `
øṘ (Roman Numeral)
Convert a decimal to its roman numeral representation / Convert a roman numeral to its decimal representation.
num a -> to_roman_numeral(a)
str a -> from_roman_numeral(a)
`
codepage_descriptions[74] += `
øJ (Parse JSON)
Parse a JSON string into a Vyxal object
str a -> json.loads(a)
`
codepage_descriptions[188] += `
øḞ (Replace First Occurrence)
Replace the first instance of an item with another item
any a, any b, any c -> a.replace_first(b, c)
`
codepage_descriptions[194] += `
øṄ (Replace Nth Occurrence)
Replace the nth instance of an item with another item. If n is negative, then replaces the last nth instance.
any a, any b, any c, any d -> a.replace_nth_occurrence(b, c, d)
`
codepage_descriptions[83] += `
øS (Strip whitespace from both sides)
Strip whitespace from both sides of a string / Remove trailing zeros from a number
str a -> a.strip()
num a -> remove trailing zeros
`
codepage_descriptions[76] += `
øL (Strip whitespace from the left side)
Strip whitespace from the left side of a string
str a -> a.lstrip()
`
codepage_descriptions[82] += `
øR (Strip whitespace from the right side)
Strip whitespace from the right side of a string
str a -> a.rstrip()
`
codepage_descriptions[108] += `
øl (Strip from the left side)
Strip from the left side of a string
str a, num b -> a.lstrip(b)
`
codepage_descriptions[114] += `
ør (Strip from the right side)
Strip from the right side of a string
str a, num b -> a.rstrip(b)
`
codepage_descriptions[95] += `
ø^ (Canvas Draw)
Draw on a canvas (see knowledge/spec/canvas.md for more details) and return it as a string
num a, lst b, str c -> draw with a = length, b = dirs, c = text
num a, str b, str c -> draw with a = length, b/c dependent on dir validity
any a, num b, any c -> draw with b = length ^
any a, any b, num c -> draw with c = length ^
str a, any b, any c -> draw with a = text, b/c dependent on dir validity
lst a, str b, any c -> draw with b = text, ^
lst a, lst b, str c -> draw with c = text, ^
`
codepage_descriptions[3] += `
ø∧ (Global Canvas Draw)
Draw on the global canvas (see knowledge/spec/canvas.md for more details), which is implicitly printed.
num a, lst b, str c -> draw with a = length, b = dirs, c = text
num a, str b, str c -> draw with a = length, b/c dependent on dir validity
any a, num b, any c -> draw with b = length ^
any a, any b, num c -> draw with c = length ^
str a, any b, any c -> draw with a = text, b/c dependent on dir validity
lst a, str b, any c -> draw with b = text, ^
lst a, lst b, str c -> draw with c = text, ^
`
codepage_descriptions[46] += `
ø. (Surround)
Surround a value with another
str a, str b -> a.surround(b)
lst a, any b -> a.surround(b)
any a, lst b -> b.surround(a)
`
codepage_descriptions[149] += `
øŀ (Left Align)
Left align a string/string list
str a -> justify to left
lst a -> justify each to left
`
codepage_descriptions[27] += `
øɽ (Right Align)
Right align a string/string list
str a -> justify to right
lst a -> justify each to right
`
codepage_descriptions[42] += `
Þ* (Cartesian product over list)
Cartesian product over a list of lists
lst a -> itertools.product(*a)
`
codepage_descriptions[97] += `
Þa (Adjacency matrix (Directed))
Adjacency matrix of directed graph (nonzero A_ij denotes edge from i to j)
lst a -> adjacency matrix of directed graph (where a = [[i, j] for each edge i to j])
`
codepage_descriptions[110] += `
Þn (Infinite list of all integers)
All integers in an infinite list (0, 1, -1, 2, -2, ...)
`
codepage_descriptions[160] += `
Þż (Lift)
Multiply a numeric list by a range from 1 to its length
lst a -> lift
`
codepage_descriptions[65] += `
ÞA (Adjacency matrix (Undirected))
Adjacency matrix of undirected graph
lst a -> adjacency matrix of undirected graph (where a = [[i, j] for each edge i to j])
`
codepage_descriptions[111] += `
Þo (Ordinals)
An infinite list of first, second, third, fourth etc
`
codepage_descriptions[99] += `
Þc (Cardinals)
An infinite list of one, two, three, four etc
`
codepage_descriptions[112] += `
Þp (Primes)
An infinite list of primes
`
codepage_descriptions[117] += `
Þu (All Unique)
Are all elements of a list/string unique?
any a -> all_unique(a)
`
codepage_descriptions[106] += `
Þj (Depth)
Depth of ragged list
lst a -> Depth
`
codepage_descriptions[201] += `
ÞẊ (Cartesian Power)
Cartesian power, cartesian product with self n times. If both arguments are numbers, turns the left into a range.

any a, num b -> cartesian_power(a, b)
num a, any b -> cartesian_power(b, a)
`
codepage_descriptions[102] += `
Þf (Flatten By depth)
Flatten a list by a certain depth (default 1)
lst a, num b -> flatten a by depth b
any a, lst b -> a, flatten b by depth 1
`
codepage_descriptions[66] += `
ÞB (Random Bits)
Fill a list with random bits
num a -> list of length a filled with random bits
any a -> list of length n(a) filled with random bits
`
codepage_descriptions[60] += `
Þ< (All Less Than Increasing)
Find all numbers less than a certain value in a (potentially infinite) list assumed to be (non-strictly) increasing
any a, num b -> all values of a up to (not including) the first greater than or equal to b
`
codepage_descriptions[244] += `
Þǔ (Untruth)
Return a list with 1s at the (0-indexed) indices in a, and 0s elsewhere
any a -> [int(x in a) for x in range(max(a))]
`
codepage_descriptions[243] += `
ÞǓ (Connected Uniquify)
Remove occurences of adjacent duplicates in a list
any a -> connected uniquify a (\`Ġvh\`)
`
codepage_descriptions[105] += `
Þi (Multidimensional Indexing)
Index a list of coordinates into a value.
lst a, lst b -> reduce by indexing with a as initial value (a[b[0]][b[1]][b[2]]...)
`
codepage_descriptions[73] += `
ÞI (All Indices (Multidimensional))
All multidimensional indices of element in list
lst a, any b -> all indices of b in a
any a, lst b -> all indices of a in b
any a, any b -> all indices of b in a
`
codepage_descriptions[145] += `
Þḟ (Multidimensional Search)
Find the first multidimensional index of a value in another
lst a, any b -> find the first occurrence of a in b and return as a multidimensional index
`
codepage_descriptions[188] += `
ÞḞ (Fill to make rectangular)
Fill a 2-D list to make it rectangular
lst a, any b -> fill a with b to make it rectangular
any a, lst b -> fill b with a to make it rectangular
`
codepage_descriptions[109] += `
Þm (Zero Matrix)
Given a list of dimensions, create a matrix with those dimensions, filled with zeroes
lst a -> matrix with dimensions each item of a, where the first is the innermost and the last is the outermost
`
codepage_descriptions[194] += `
ÞṄ (Infinite Integer Partitions)
Infinite list of sets of positive integers (equivalent to Þ∞vṄÞf)
`
codepage_descriptions[7] += `
Þ÷ (Divide List Into N Equal Length Parts)
Divide a list into n equal length parts, possibly with an extra part
any a, num b -> divide a into b equal length parts, possibly with an extra part
num a, any b -> divide b into a equal length parts, possibly with an extra part
`
codepage_descriptions[90] += `
ÞZ (Fill By Coordinates)
Fill a matrix by calling a function with the lists of coordinates in the matrix.
any a, fun b -> for each value of a (all the way down) call b with the coordinates of that value and put that at the appropriate position in a
`
codepage_descriptions[215] += `
Þ… (Evenly Distribute)
Evenly distribute a number over elements of a list
list a, num b -> [i + b // len(a) for i in a], with any excess added to the last element, such that the sum of the list increases by b
`
codepage_descriptions[128] += `
Þ↓ (Minimum By Function)
Find the minimum value of a list by applying a function to each element
lst a, fun b -> minimum value of a by applying b to each element
`
codepage_descriptions[127] += `
Þ↑ (Maximum By Function)
Find the maximum value of a list by applying a function to each element
lst a, fun b -> maximum value of a by applying b to each element
`
codepage_descriptions[8] += `
Þ× (All Combinations)
All combinations of a list / string, of all lengths, with replacement
any a -> all (non-empty) combinations of a, of all lengths and all orders, with replacement
`
codepage_descriptions[120] += `
Þx (All Combinations Without Replacement)
All combinations of a list / string, of all lengths, without replacement
any a -> all (non-empty) combinations of a, of all lengths and all orders, without replacement
`
codepage_descriptions[70] += `
ÞF (All Fibonacci)
All Fibonacci numbers as a LazyList.
`
codepage_descriptions[33] += `
Þ! (All Factorials)
All factorials as a LazyList.
`
codepage_descriptions[85] += `
ÞU (Uniquify Mask)
A list of booleans describing which elements of a will remain after uniquifying.
any a -> a list of booleans describing which elements of a will remain after uniquifying
`
codepage_descriptions[68] += `
ÞD (Diagonals)
Diagonals of a matrix, starting with the main diagonal.
lst a -> diagonals of a, starting with the main diagonal
`
codepage_descriptions[143] += `
Þḋ (Anti-diagonals)
Anti-diagonals of a matrix, starting with the main anti-diagonal.
lst a -> anti-diagonals of a, starting with the main anti-diagonal
`
codepage_descriptions[83] += `
ÞS (Sublists)
Sublists of a list.
lst a -> non-empty sublists of a
`
codepage_descriptions[199] += `
ÞṪ (Transpose With Filler)
Transpose a matrix, with a filler value for empty cells.
lst a, any b -> transpose a, with filler value b
`
codepage_descriptions[223] += `
Þ℅ (Random Permutation)
Random permutation of a list / string
any a -> random permutation of a
`
codepage_descriptions[193] += `
ÞṀ (Matrix Multiplication)
Multiply two matrices together.
lst a, lst b -> matrix multiply a and b
`
codepage_descriptions[186] += `
ÞḊ (Matrix Determinant)
Calculate the determinant of a matrix.
lst a -> determinant(a)
`
codepage_descriptions[92] += `
Þ\ (Antidiagonal)
Antidiagonal of a matrix
lst a -> antidiagonal(a)
`
codepage_descriptions[47] += `
Þ/ (Main Diagonal)
Diagonal of a matrix
lst a -> diagonal(a)
`
codepage_descriptions[67] += `
ÞC (Matrix Column Reduce)
Reduce columns of a matrix by a function.
lst a, fun b -> reduce columns of a with b
`
codepage_descriptions[5] += `
Þ∨ (Multiset Difference)
Similar to set difference, but with duplicates allowed.
lst a, lst b -> multiset difference of a and b
`
codepage_descriptions[231] += `
Þ∩ (Multiset Intersection)
Similar to set intersection, but with duplicates allowed.
lst a, lst b -> multiset intersection of a and b
`
codepage_descriptions[230] += `
Þ∪ (Multiset Union)
Similar to set union, but with duplicates allowed.
lst a, lst b -> multiset union of a and b
`
codepage_descriptions[232] += `
Þ⊍ (Multiset Symmetric Difference)
Similar to set symmetric difference, but with duplicates allowed.
lst a, lst b -> multiset symmetric difference of a and b
`
codepage_descriptions[13] += `
Þ• (Dot Product)
Dot product of two lists.
lst a, lst b -> dot product of a and b
`
codepage_descriptions[150] += `
Þṁ (Mold without repeat)
Mold a list without repeating elements.
lst a, lst b -> mold a list without repeating elements
`
codepage_descriptions[77] += `
ÞM (Maximal Indices)
Indices of the maximal elements of a list.
lst a -> indices of the maximal elements of a
`
codepage_descriptions[129] += `
Þ∴ (Elementwise Vectorised Dyadic Maximum)
Elementwise vectorised dyadic maximum.
lst a, lst b -> [max(a[0], b[0]), max(a[1], b[1]), ...]
`
codepage_descriptions[130] += `
Þ∵ (Elementwise Vectorised Dyadic Minimum)
Elementwise vectorised dyadic minimum.
lst a, lst b -> [min(a[0], b[0]), min(a[1], b[1]), ...]
`
codepage_descriptions[115] += `
Þs (All Slices of a List)
Get all slices of a list, skipping a certain number of items
lst a, int b -> [a[::b], a[1::b], a[2::b], ...]
int a, lst b -> [b[::a], b[1::a], b[2::a], ...]
`
codepage_descriptions[252] += `
Þ¾ (Empty the Global Array)
Empty the global array.
`
codepage_descriptions[114] += `
Þr (Remove Last Item and Prepend 0)
Remove the last item of a list and prepend 0. A shortcut for Ṫ0p
lst a -> [0] + a[:-1]
`
codepage_descriptions[30] += `
Þ∞ (Infinite List)
An infinite list of positive integers
`
codepage_descriptions[82] += `
ÞR (Remove Last Item From Cumulative Sums and Prepend 0)
Remove the last item of the cumulative sums of a list and prepend 0. A shortcut for ¦Ṫ0p
lst a -> [0, a[0], a[0]+a[1], ..., a[0]+a[1]+...+a[-2]]
`
codepage_descriptions[157] += `
Þẇ (Unwrap)
Take a and push a[0]+a[-1] and a[1:-1]
lst a -> a[0]+a[-1], a[1:-1]
`
codepage_descriptions[103] += `
Þg (Shortest By Length)
Return the shortest item in a list.
lst a -> the shortest item of a
`
codepage_descriptions[71] += `
ÞG (Longest By Length)
Return the longest item in a list.
lst a -> the longest item of a
`
codepage_descriptions[155] += `
Þṡ (Sort By Length)
Sort a list by length.
lst a -> sort a from shortest to longest
`
codepage_descriptions[198] += `
ÞṠ (Is Sorted?)
Returns true if an item is sorted in ascending order using default sorting rules.
lst a -> is a sorted in increasing order?
`
codepage_descriptions[197] += `
ÞṘ (Is Sorted in Reverse?)
Returns true if an item is sorted in descending order using default sorting rules.
lst a -> is a sorted in decreasing order?
`
codepage_descriptions[195] += `
ÞȮ (Is Ordered?)
Returns true if the item is sorted in either descending or ascending order.
lst a -> is a sorted in increasing or decreasing order?
`
codepage_descriptions[185] += `
ÞĊ (Is Unordered?)
Returns true if the item is not sorted in either descending or ascending order.
lst a -> is a not sorted, in either increasing or decreasing order?
`
codepage_descriptions[235] += `
Þ⇧ (Is Strictly Ascending?)
Returns true if the list is in strictly ascending order.
lst a -> is a in strictly ascending order?
`
codepage_descriptions[236] += `
Þ⇩ (Is Strictly Descending?)
Returns true if the list is in strictly descending order.
lst a -> is a in strictly descending order?
`
codepage_descriptions[142] += `
Þċ (Cycle)
Form an infinite list from a vector.
lst a -> [a[0], a[1], ..., a[-1], a[0], a[1], ..., a[-1], a[0], ...]
`
codepage_descriptions[75] += `
ÞK (Suffixes)
Suffixes of a list.
lst a -> [a, a[:-1], a[:-2], ..., a[:1]]
`
codepage_descriptions[84] += `
ÞT (Multi-dimensional truthy indices)
Multi-dimensional indices of truthy elements
lst a -> Multi-dimensional indices of truthy elements in a
`
codepage_descriptions[191] += `
Þİ (First n Items and Rest)
Push the first n items of a, then the rest of a
lst a, int b -> a[:b], a[b:]
`
codepage_descriptions[78] += `
ÞN (Alternating Negation)
An infinite list of an item, then that item negated, then that item, and so on. Uses the negation element for negation.
any a -> [a, -a, a, -a, ...]
`
codepage_descriptions[216] += `
Þ□ (Identity Matrix of Size n)
A matrix with 1s on the main diagonal and zeroes elsewhere
num a -> the a x a identity matrix
`
codepage_descriptions[101] += `
Þe (Matrix Exponentiation)
A matrix multiplied by itself n times
lst a, num b -> a ** b (matrix exponentiation)
num a, lst b -> b ** a (matrix exponentiation)
`
codepage_descriptions[100] += `
Þd (Distance matrix (Directed))
Distance matrix of directed graph
lst a -> distance matrix of a directed graph (where a = [[i, j] for each edge i to j])
`
codepage_descriptions[119] += `
Þw (Distance matrix (Undirected))
Distance matrix of undirected graph
lst a -> distance matrix of an undirected graph (where a = [[i, j] for each edge i to j])
`
codepage_descriptions[216] += `
¨□ (Parse direction arrow to integer)
Map characters in \`>^<v\` to integers (0, 1, 2, 3 respectively)
str a -> map on a, replacing \`>^<v\` with integers, and others with -1 ([\`>^<v\`.find(a[0]), \`>^<v\`.find(a[1]), ...])
`
codepage_descriptions[95] += `
¨^ (Parse direction arrow to vector)
Map characters in \`>^<v\` to direction vectors
str a -> map on a, replacing \`>^<v\` with [1, 0], [0, 1], etc., and others with [0, 0]
`
codepage_descriptions[85] += `
¨U (Get Request)
Send a GET request to a URL
str a -> send a GET request to a
`
codepage_descriptions[61] += `
¨= (Invariant After Application)
Push whether the result of applying an element to an item is the same as the original item
`
codepage_descriptions[77] += `
¨M (Map At Indices)
Map a function at elements of a list whose indices are in another list
lst a, lst b, fun c -> change the items in a with indices in by applying function c
lst a, num b, fun c -> change the bth item in a by applying function c
`
codepage_descriptions[44] += `
¨, (Print With Space)
Print a value with a space after it
any a -> print a followed by a space
`
codepage_descriptions[215] += `
¨… (Print With Space Without Popping)
Print a value with a space after it, without popping it
any a -> print a followed by a space, then push a
`
codepage_descriptions[62] += `
¨> (Strict Greater Than)
Non-vectorising greater than - useful for lists. Note that all corresponding elements should be of the same type.
any a, any b -> Non-vectorising greater than - useful for lists
`
codepage_descriptions[60] += `
¨< (Strict Less Than)
Non-vectorising greater than - useful for lists. Note that all corresponding elements should be of the same type.
any a, any b -> a > b (non-vectorising)
`
codepage_descriptions[42] += `
¨* (All Multiples)
Return all multiples of a
num a -> [a*1, a*2, a*3, a*4, ...]
str a -> [a*1, a*2, a*3, a*4, ...]
`
codepage_descriptions[233] += `
¨£ (Star Map)
Reduce each pair of two lists zipped together by a function. Equivalent to Zvƒ
`
codepage_descriptions[157] += `
¨ẇ (Wrap Last n Items)
Wrap the last n items on the stack into a list
num a -> last a items of the stack, as a list; does not pop anything other than a
`
codepage_descriptions[50] += `
¨2 (Dyadic Map Lambda)
Open a dyadic mapping lambda - ¨2...; Receives item and index.
`
codepage_descriptions[51] += `
¨3 (Triadic Map Lambda)
Open a triadic mapping lambda - ¨3...; Receives item, index, and vector.
`
codepage_descriptions[167] += `
¨₂ (Dyadic Filter Lambda)
Open a dyadic filter lambda - ¨₂...; Receives item and index.
`
codepage_descriptions[168] += `
¨₃ (Triadic Filter Lambda)
Open a triadic filter lambda - ¨₃...; Receives item, index, and vector.
`
codepage_descriptions[90] += `
¨Z (Zip lambda)
Open a zip lambda - ¨Z...; Pops top two items off stack, zips them, and loops over them, pushing each item to the stack. Equivalent to \`Zƛ÷...;\`.
`
codepage_descriptions[112] += `
¨p (For Each Overlapping Pair)
Run element for each overlapping pair. Equivalent to \`2lvƒ\`
`
codepage_descriptions[63] += `
¨? (Explicit STDIN)
Read from STDIN, even if there are arguments
`
codepage_descriptions[105] += `
¨i (If/Else)
If the top of the stack is truthy, run the first element, otherwise the second.
`
