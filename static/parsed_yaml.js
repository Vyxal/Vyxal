// Very important: DON'T EDIT THIS FILE!
// It's autogenerated
// See yaml_to_js.py

var codepage = 'λƛ¬∧⟑∨⟇÷×«␤»°•ß†€½∆ø↔¢⌐æʀʁɾɽÞƈ∞¨␠!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]`^_abcdefghijklmnopqrstuvwxyz{|}~↑↓∴∵›‹∷¤ð→←βτȧḃċḋėḟġḣḭŀṁṅȯṗṙṡṫẇẋẏż√⟨⟩‛₀₁₂₃₄₅₆₇₈¶⁋§ε¡∑¦≈µȦḂĊḊĖḞĠḢİĿṀṄȮṖṘṠṪẆẊẎŻ₌₍⁰¹²∇⌈⌊¯±₴…□↳↲⋏⋎꘍ꜝ℅≤≥≠⁼ƒɖ∪∩⊍£¥⇧⇩ǍǎǏǐǑǒǓǔ⁽‡≬⁺↵⅛¼¾Π„‟'
var codepage_descriptions =
{
  "0": [
    {
      "name": "Lambda",
      "description": "Open a lambda - \u03bb...;",
      "token": "\u03bb"
    }
  ],
  "1": [
    {
      "name": "Lambda Map",
      "description": "Open a mapping lambda - \u019b",
      "token": "\u019b"
    }
  ],
  "2": [
    {
      "name": "Logical Not",
      "description": "Return the inverse (negation) of the truthiness of an item.",
      "overloads": "num -> not a\nstr -> a != \"\" | len(a) > 0\nlst -> a != [] | len(a) > 0",
      "token": "\u00ac"
    }
  ],
  "3": [
    {
      "name": "Logical And",
      "description": "Returns the first truthy argument if both are truthy, otherwise returns the first falsy argument.",
      "overloads": "any, any -> a and b",
      "token": "\u2227"
    },
    {
      "name": "Global Canvas Draw",
      "description": "Draw on the global canvas (see knowledge/spec/canvas.md for more details), which is implicitly printed.",
      "overloads": "num, lst, str -> draw with a = length, b = dirs, c = text\nnum, str, str -> draw with a = length, b/c dependent on dir validity\nany, num, any -> draw with b = length ^\nany, any, num -> draw with c = length ^\nstr, any, any -> draw with a = text, b/c dependent on dir validity\nlst, str, any -> draw with b = text, ^\nlst, lst, str -> draw with c = text, ^",
      "token": "\u00f8\u2227"
    }
  ],
  "4": [
    {
      "name": "Apply Lambda",
      "description": "Like a mapping lambda, but the results are evaluated immediately, instead of being lazily evaluated",
      "token": "\u27d1"
    }
  ],
  "5": [
    {
      "name": "Logical Or",
      "description": "Returns the first truthy argument, otherwise the first falsy argument.",
      "overloads": "any, any -> a or b",
      "token": "\u2228"
    },
    {
      "name": "Lowercase and uppercase vowels",
      "description": "\"aeiouAEIOU\" (vowelsVOWELS)",
      "token": "k\u2228"
    },
    {
      "name": "Multiset Difference",
      "description": "Similar to set difference, but with duplicates allowed.",
      "overloads": "lst, lst -> multiset difference of a and b",
      "token": "\u00de\u2228"
    }
  ],
  "6": [
    {
      "name": "Remove at Index",
      "description": "Returns every item in a list except the item at the given index.",
      "overloads": "any, num -> Remove item b of a\nnum, any -> Remove item a of b",
      "token": "\u27c7"
    },
    {
      "name": "Vyxal codepage",
      "description": "Yields the Vyxal codepage",
      "token": "k\u27c7"
    },
    {
      "name": "Get Codepage Character / Get Codepage Index",
      "description": "Get the character at a certain index in the vyxal codepage / Get the index of a character in the vyxal codepage",
      "overloads": "num -> vyxal_codepage[a]\nstr -> vyxal_codepage.index(a)",
      "token": "\u00f8\u27c7"
    }
  ],
  "7": [
    {
      "name": "Item Split",
      "description": "Pushes each item of the top of the stack onto the stack.",
      "overloads": "num -> Push each digit of a\nstr -> Push each character of a\nlst -> Push each item of a",
      "token": "\u00f7"
    },
    {
      "name": "Divide List Into N Equal Length Parts",
      "description": "Divide a list into n equal length parts, possibly with an extra part",
      "overloads": "any, num -> divide a into b equal length parts, possibly with an extra part\nnum, any -> divide b into a equal length parts, possibly with an extra part",
      "token": "\u00de\u00f7"
    }
  ],
  "8": [
    {
      "name": "Asterisk Literal",
      "description": "the string \"*\" (asterisk)",
      "token": "\u00d7"
    },
    {
      "name": "2147483648",
      "description": "2147483648",
      "token": "k\u00d7"
    },
    {
      "name": "All Combinations",
      "description": "All combinations of a list / string, of all lengths, with replacement",
      "overloads": "any -> all (non-empty) combinations of a, of all lengths and all orders, with replacement",
      "token": "\u00de\u00d7"
    }
  ],
  "9": [
    {
      "name": "Base Compressed String",
      "description": "Open/close a bijective base-255 compressed string - \u00ab...\u00ab",
      "token": "\u00ab"
    }
  ],
  "10": [
    {
      "name": "Newline",
      "description": "NOP",
      "token": "\u2424"
    }
  ],
  "11": [
    {
      "name": "Base Compressed Number",
      "description": "Open/close a bijective base-255 compressed number - \u00bb...\u00bb",
      "token": "\u00bb"
    }
  ],
  "12": [
    {
      "name": "Complex Number Separator",
      "description": "Separates the real and imaginary parts of a complex number",
      "token": "\u00b0"
    }
  ],
  "13": [
    {
      "name": "MultiCommand",
      "description": "Logarithm / Repeat Character / Capitalisation transfer",
      "overloads": "num, num -> log_a(b)\nnum, str -> [char * a for char in b]\nstr, num -> [char * b for char in a]\nstr, str -> a.with_capitalisation_of(b)\nlst, lst -> a molded  to  the shape of b",
      "token": "\u2022"
    },
    {
      "name": "Qwerty Keyboard",
      "description": "The list [\"qwertyuiop\",\"asdfghjkl\",\"zxcvbnm\"]",
      "token": "k\u2022"
    },
    {
      "name": "Dot Product",
      "description": "Dot product of two lists.",
      "overloads": "lst, lst -> dot product of a and b",
      "token": "\u00de\u2022"
    }
  ],
  "14": [
    {
      "name": "Conditional Execute",
      "usage": "\u00df<element>",
      "description": "Executes element A if the top of the stack is truthy",
      "token": "\u00df"
    },
    {
      "name": "Parentheses and square brackets",
      "description": "()[]",
      "token": "k\u00df"
    }
  ],
  "15": [
    {
      "name": "Function Call",
      "description": "Calls a function / executes as python / number of distinct prime factors / vectorised not",
      "overloads": "fun -> a()\nnum -> len(prime_factors(a))\nstr -> exec as python\nlst -> vectorised not",
      "token": "\u2020"
    }
  ],
  "16": [
    {
      "name": "Split On / Fill By Coordinates",
      "description": "Split a on b (works on lists and numbers as well) / Fill a matrix by calling a function with the lists of coordinates in the matrix.",
      "overloads": "any, any -> a split on b\nany, fun -> for each value of a (all the way down) call b with the coordinates of that value and put that at the appropriate position in a",
      "token": "\u20ac"
    }
  ],
  "17": [
    {
      "name": "Halve",
      "description": "Halves an item",
      "overloads": "num -> a / 2\nstr -> a split into two strings of equal lengths (as close as possible)",
      "token": "\u00bd"
    },
    {
      "name": "[1, 2]",
      "description": "[1, 2]",
      "token": "k\u00bd"
    }
  ],
  "18": [
    {
      "name": "Mathematical Digraph",
      "description": "Used for mathematical digraphs",
      "token": "\u2206"
    }
  ],
  "19": [
    {
      "name": "String Digraph",
      "description": "Used for string-based digraphs",
      "token": "\u00f8"
    }
  ],
  "20": [
    {
      "name": "Combinations/Remove/Fixed Point Collection",
      "description": "Does either combinations_with_replacement, removes items from a not in b, or applies a on b until the result stops changing.",
      "overloads": "any, num -> combinations_with_replacement(a, length=b)\nfun, any -> apply a on b until the result does not change, yielding intermediate values\nany, str -> remove elements from a that are not in b\nany, lst -> remove elements from a that are not in b",
      "token": "\u2194"
    }
  ],
  "21": [
    {
      "name": "Infinite Replacement / Apply at Indices",
      "description": "Replace b in a with c until a does not change / Call a function on all elements at specified indices together and put that back in the list",
      "overloads": "any, any, any -> replace b in a with c until a does not change\nlst, fun, lst -> apply function b to items in c at indices in a\nlst, lst, fun -> apply function c to items in a at indices in b\nfun, lst, lst -> apply function a to items in b at indices in c",
      "token": "\u00a2"
    },
    {
      "name": "Carmichael Function",
      "description": "Get the Carmichael function of a number / Local Maxima",
      "overloads": "num -> carmichael(a)\nstr -> local_maxima(a)",
      "token": "\u2206\u00a2"
    }
  ],
  "22": [
    {
      "name": "Complement / Comma Split",
      "description": "1 - a if number, split by commas if string.",
      "overloads": "num -> 1 - a\nstr -> a.split(\",\")",
      "token": "\u2310"
    }
  ],
  "23": [
    {
      "name": "Is Prime / Case Check",
      "description": "(a is prime) if a is a number, else check which case a is",
      "overloads": "num -> is a prime?\nstr -> caseof(a) (1 if all letters in a are uppercase, 0 if all letters in a are lowercase, -1 if mixed case)",
      "token": "\u00e6"
    }
  ],
  "24": [
    {
      "name": "Inclusive Zero Range",
      "description": "Inclusive range or whether each character is alphabetical",
      "overloads": "num -> range(0,a + 1) (inclusive range from 0)\nstr -> [is v alphabetical? for v in a]",
      "token": "\u0280"
    }
  ],
  "25": [
    {
      "name": "Exclusive Zero Range",
      "description": "Exclusive range or palindromise",
      "overloads": "num -> range(0,a) (exclusive range from 0)\nstr -> palindromise(a) (a + a[:-1:-1])",
      "token": "\u0281"
    }
  ],
  "26": [
    {
      "name": "Inclusive One Range",
      "description": "Inclusive range or uppercase",
      "overloads": "num -> range(1,a+1) (inclusive range from 1)\nstr -> a.uppercase()",
      "token": "\u027e"
    }
  ],
  "27": [
    {
      "name": "Exclusive One Range / Lowercase",
      "description": "Exclusive range or lowercase",
      "overloads": "num -> range(1,a) (exclusive range from 0)\nstr -> a.lowercase()",
      "token": "\u027d"
    },
    {
      "name": "Right Align",
      "description": "Right align a string/string list",
      "overloads": "str -> justify to right\nlst -> justify each to right",
      "token": "\u00f8\u027d"
    }
  ],
  "28": [
    {
      "name": "List Digraph",
      "description": "Used for list-related digraphs",
      "token": "\u00de"
    }
  ],
  "29": [
    {
      "name": "Choose / random choice / set same / drop while",
      "description": "Binomial coefficient / choose a random items from b / same except duplicates / drop while",
      "overloads": "num, num -> a choose b (binomial coefficient)\nnum, str -> choose a random items from b\nstr, num -> choose b random items from a\nstr, str -> are the set of characters in the strings the same?\nany, fun -> remove each item x from the beginning of a until b(x) returns false\nfun, any -> remove each item x from the beginning of b until a(x) returns false",
      "token": "\u0188"
    },
    {
      "name": "n Pick r (npr)",
      "description": "Get the number of combinations of r items from a set of n items",
      "overloads": "num, num -> n_pick_r(a, b)\nnum, str -> n_pick_r(a, len(b))\nstr, num -> n_pick_r(len(a), b)\nstr, str -> n_pick_r(len(a), len(b))",
      "token": "\u2206\u0188"
    }
  ],
  "30": [
    {
      "name": "Palindromise",
      "description": "Palindromise a",
      "overloads": "any -> palindromise a (a + a[:-1:-1])",
      "token": "\u221e"
    },
    {
      "name": "Infinite List",
      "description": "An infinite list of positive integers",
      "token": "\u00de\u221e"
    }
  ],
  "31": [
    {
      "name": "Other Digraphs",
      "description": "Used for various random digraphs",
      "token": "\u00a8"
    }
  ],
  "32": [
    {
      "name": "Space",
      "description": "NOP",
      "token": "\u2420"
    }
  ],
  "33": [
    {
      "name": "Stack Length",
      "description": "Push the length of the stack",
      "token": "!"
    },
    {
      "name": "All Factorials",
      "description": "All factorials as a LazyList.",
      "token": "\u00de!"
    }
  ],
  "34": [
    {
      "name": "Pair",
      "description": "Place the top two items into a single list",
      "overloads": "any, any -> [a, b]",
      "token": "\""
    }
  ],
  "35": [
    {
      "name": "Comment",
      "description": "The characters until the next newline are commented out",
      "token": "#"
    },
    {
      "name": "Multiline Comment",
      "description": "The characters until the next `}#` are commented out. Nestable.",
      "token": "#{"
    }
  ],
  "36": [
    {
      "name": "Swap",
      "description": "Swap the top two items",
      "overloads": "any, any -> b, a",
      "token": "$"
    }
  ],
  "37": [
    {
      "name": "Modulo / Format",
      "description": "Modulo two numbers / format two strings",
      "overloads": "num, num -> a % b\nnum, str -> b.format(a) (replace % in b with a)\nstr, num -> a.format(b) (replace % in a with b)\nstr, str -> a.format(b) (replace % in a with b)\nstr, lst -> a.format(b) (replace % in a with each item of b)",
      "token": "%"
    },
    {
      "name": "Modular Exponentiation",
      "description": "Get the modular exponentiation a**b mod c",
      "overloads": "any, any, any -> pow(a, b, c)",
      "token": "\u2206%"
    }
  ],
  "38": [
    {
      "name": "Apply To Register",
      "description": "Apply the next element to the register",
      "usage": "&<element>",
      "token": "&"
    }
  ],
  "39": [
    {
      "name": "Lambda Filter",
      "description": "Open a filter lambda - '...;",
      "token": "'"
    }
  ],
  "40": [
    {
      "name": "Open For Loop",
      "description": "Start a for loop, iterating over the popped top of stack.",
      "token": "("
    }
  ],
  "41": [
    {
      "name": "Close For loop",
      "description": "Close a for loop",
      "token": ")"
    }
  ],
  "42": [
    {
      "name": "Multiplication / Arity Change",
      "description": "Multiply two numbers or strings / Change the arity of a function",
      "overloads": "num, num -> a * b\nnum, str -> b repeated a times\nstr, num -> a repeated b times\nstr, str -> ring translate a according to b (in a, replace b[0] with b[1], b[1] with b[2], ..., and b[-1] with b[0])\nfun, num -> change the arity of function a to b\nnum, fun -> change the arity of function b to a",
      "token": "*"
    },
    {
      "name": "Cartesian product over list",
      "description": "Cartesian product over a list of lists",
      "overloads": "lst -> itertools.product(*a)",
      "token": "\u00de*"
    },
    {
      "name": "All Multiples",
      "description": "Return all multiples of a",
      "overloads": "num -> [a*1, a*2, a*3, a*4, ...]\nstr -> [a*1, a*2, a*3, a*4, ...]",
      "token": "\u00a8*"
    }
  ],
  "43": [
    {
      "name": "Addition",
      "description": "Adds the top two items on the stack",
      "overloads": "num, num -> a + b\nnum, str -> str(a) + b\nstr, num -> a + str(b)\nstr, str -> a + b",
      "token": "+"
    },
    {
      "name": "[1, -1]",
      "description": "[1, -1]",
      "token": "k+"
    }
  ],
  "44": [
    {
      "name": "Print",
      "description": "Print a with trailing newline",
      "overloads": "any -> print(a)",
      "token": ","
    },
    {
      "name": "Print With Space",
      "description": "Print a value with a space after it",
      "overloads": "any -> print a followed by a space",
      "token": "\u00a8,"
    }
  ],
  "45": [
    {
      "name": "Subtract",
      "description": "Subtracts the top two items on the stack",
      "overloads": "num, num -> a - b\nnum, str -> (\"-\" * a) + b\nstr, num -> a + (\"-\" * b)\nstr, str -> a.replace(b, '')",
      "token": "-"
    },
    {
      "name": "[-1, 1]",
      "description": "[-1, 1]",
      "token": "k-"
    }
  ],
  "46": [
    {
      "name": "Decimal Separator",
      "description": "Decimal separator",
      "token": "."
    },
    {
      "name": "Surround",
      "description": "Surround a value with another",
      "overloads": "str, str -> a.surround(b)\nlst, any -> a.surround(b)\nany, lst -> b.surround(a)",
      "token": "\u00f8."
    }
  ],
  "47": [
    {
      "name": "Divide / Split",
      "description": "Divide two numbers or split strings",
      "overloads": "num, num -> a / b\nnum, str -> b split into a pieces\nstr, num -> a split into b pieces\nstr, str -> a.split(b)",
      "token": "/"
    },
    {
      "name": "Slashes",
      "description": "\"/\\\\\" (Forwardslash, backslash)",
      "token": "k/"
    },
    {
      "name": "Main Diagonal",
      "description": "Diagonal of a matrix",
      "overloads": "lst -> diagonal(a)",
      "token": "\u00de/"
    }
  ],
  "48": [
    {
      "name": "Literal digit 0",
      "description": "Literal digit 0",
      "token": "0"
    }
  ],
  "49": [
    {
      "name": "Literal digit 1",
      "description": "Literal digit 1",
      "token": "1"
    },
    {
      "name": 1000,
      "description": "10^3 / 1000",
      "token": "k1"
    }
  ],
  "50": [
    {
      "name": "Literal digit 2",
      "description": "Literal digit 2",
      "token": "2"
    },
    {
      "name": 10000,
      "description": "10^4 / 10000",
      "token": "k2"
    },
    {
      "name": "Dyadic Map Lambda",
      "description": "Open a dyadic mapping lambda - \u00a82...; Receives item and index.",
      "token": "\u00a82"
    }
  ],
  "51": [
    {
      "name": "Literal digit 3",
      "description": "Literal digit 3",
      "token": "3"
    },
    {
      "name": 100000,
      "description": "10^5 / 100000",
      "token": "k3"
    },
    {
      "name": "Triadic Map Lambda",
      "description": "Open a triadic mapping lambda - \u00a83...; Receives item, index, and vector.",
      "token": "\u00a83"
    }
  ],
  "52": [
    {
      "name": "Literal digit 4",
      "description": "Literal digit 4",
      "token": "4"
    },
    {
      "name": 1000000,
      "description": "10^6 / 1000000",
      "token": "k4"
    }
  ],
  "53": [
    {
      "name": "Literal digit 5",
      "description": "Literal digit 5",
      "token": "5"
    }
  ],
  "54": [
    {
      "name": "Literal digit 6",
      "description": "Literal digit 6",
      "token": "6"
    },
    {
      "name": "Hex digits (lowercase)",
      "description": "\"0123456789abcdef\" (Hex digits)",
      "token": "k6"
    }
  ],
  "55": [
    {
      "name": "Literal digit 7",
      "description": "Literal digit 7",
      "token": "7"
    }
  ],
  "56": [
    {
      "name": "Literal digit 8",
      "description": "Literal digit 8",
      "token": "8"
    }
  ],
  "57": [
    {
      "name": "Literal digit 9",
      "description": "Literal digit 9",
      "token": "9"
    }
  ],
  "58": [
    {
      "name": "Duplicate",
      "description": "Push a twice",
      "overloads": "any -> a,a",
      "token": ":"
    }
  ],
  "59": [
    {
      "name": "Close Structure",
      "description": "Close a lambda / map lambda / sort lambda / function",
      "token": ";"
    }
  ],
  "60": [
    {
      "name": "Less Than",
      "description": "Basic comparison - less than",
      "overloads": "num, num -> a < b\nnum, str -> str(a) < b\nstr, num -> a < str(b)\nstr, str -> a < b\nany, fun -> decrement a until b returns false\nfun, any -> decrement b until a returns false",
      "token": "<"
    },
    {
      "name": "All Less Than Increasing",
      "description": "Find all numbers less than a certain value in a (potentially infinite) list assumed to be (non-strictly) increasing",
      "overloads": "any, num -> all values of a up to (not including) the first greater than or equal to b",
      "token": "\u00de<"
    },
    {
      "name": "Strict Less Than",
      "description": "Non-vectorising greater than - useful for lists. Note that all corresponding elements should be of the same type.",
      "overloads": "any, any -> a > b (non-vectorising)",
      "token": "\u00a8<"
    }
  ],
  "61": [
    {
      "name": "Equals",
      "description": "Basic comparison - equals",
      "overloads": "num, num -> a == b\nnum, str -> str(a) == b\nstr, num -> a == str(b)\nstr, str -> a == b",
      "token": "="
    },
    {
      "name": "Invariant After Application",
      "usage": "\u00a8=<element>",
      "description": "Push whether the result of applying an element to an item is the same as the original item",
      "token": "\u00a8="
    }
  ],
  "62": [
    {
      "name": "Greater Than",
      "description": "Basic comparison - greater than",
      "overloads": "num, num -> a > b\nnum, str -> str(a) > b\nstr, num -> a > str(b)\nstr, str -> a > b\nany, fun -> increment a until b returns false\nfun, any -> increment b until a returns false",
      "token": ">"
    },
    {
      "name": "Strict Greater Than",
      "description": "Non-vectorising greater than - useful for lists. Note that all corresponding elements should be of the same type.",
      "overloads": "any, any -> Non-vectorising greater than - useful for lists",
      "token": "\u00a8>"
    }
  ],
  "63": [
    {
      "name": "Input",
      "description": "Get the next input from the input source",
      "token": "?"
    },
    {
      "name": "Explicit STDIN",
      "description": "Read from STDIN, even if there are arguments",
      "token": "\u00a8?"
    }
  ],
  "64": [
    {
      "name": "Function Call / Declaration",
      "description": "Call / declare function (@name; / @name|code;)",
      "token": "@"
    }
  ],
  "65": [
    {
      "name": "All",
      "description": "Check if all items in a list are truthy / check if a character is a vowel",
      "overloads": "str -> is_vowel(a) if a.length == 1 else [is_vowel(z) for z in a]\nany -> all(a)",
      "token": "A"
    },
    {
      "name": "Uppercase alphabet",
      "description": "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (uppercase alphabet)",
      "token": "kA"
    },
    {
      "name": "Adjacency matrix (Undirected)",
      "description": "Adjacency matrix of undirected graph",
      "overloads": "lst -> adjacency matrix of undirected graph (where a = [[i, j] for each edge i to j])",
      "token": "\u00deA"
    }
  ],
  "66": [
    {
      "name": "Binary To Decimal",
      "description": "Convert a binary string or list to base 10",
      "overloads": "any -> int(a,2) (convert from base 2 to base 10)",
      "token": "B"
    },
    {
      "name": "Uppercase and lowercase alphabet",
      "description": "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" (A-Za-z)",
      "token": "kB"
    },
    {
      "name": "Bracketify",
      "description": "Enclose a string in brackets",
      "overloads": "any -> \"[\"\" + a + \"]\"",
      "token": "\u00f8B"
    },
    {
      "name": "Random Bits",
      "description": "Fill a list with random bits",
      "overloads": "num -> list of length a filled with random bits\nany -> list of length n(a) filled with random bits",
      "token": "\u00deB"
    }
  ],
  "67": [
    {
      "name": "Chr / Ord",
      "description": "Convert between characters and ordinals",
      "overloads": "num -> chr(a)\nstr -> ord(a) if length 1 else list of ordinals",
      "token": "C"
    },
    {
      "name": "Arc Cosine",
      "description": "Get the arccosine of an angle in radians",
      "overloads": "num -> math.arrcos(a)",
      "token": "\u2206C"
    },
    {
      "name": "Number Compress",
      "description": "Compress a positive integer in base 255",
      "overloads": "num -> base_255_number_compress(a)",
      "token": "\u00f8C"
    },
    {
      "name": "Matrix Column Reduce",
      "description": "Reduce columns of a matrix by a function.",
      "overloads": "lst, fun -> reduce columns of a with b",
      "token": "\u00deC"
    }
  ],
  "68": [
    {
      "name": "Triplicate",
      "description": "Push three copies of a to stack",
      "token": "D"
    },
    {
      "name": "Current day in the format YYYY-MM-DD",
      "description": "Current day in the format YYYY-MM-DD",
      "token": "kD"
    },
    {
      "name": "To Degrees",
      "description": "Convert an angle from radians to degrees",
      "overloads": "num -> math.degrees(a)",
      "token": "\u2206D"
    },
    {
      "name": "Dictionary Compression",
      "description": "Optimally compress a string of English using words from the Vyxal dictionary",
      "overloads": "str -> dictionary_compressed(a)",
      "token": "\u00f8D"
    },
    {
      "name": "Diagonals",
      "description": "Diagonals of a matrix, starting with the main diagonal.",
      "overloads": "lst -> diagonals of a, starting with the main diagonal",
      "token": "\u00deD"
    }
  ],
  "69": [
    {
      "name": "Two Power / Python Eval",
      "description": "2 ** a, or eval(a)",
      "overloads": "num -> 2 ** a\nstr -> eval(a) (safe-eval as python)",
      "token": "E"
    },
    {
      "name": "(Euler's Number (e) Raised to Power a) - 1",
      "description": "Get the value of Euler's number (e) raised to the power of a minus 1",
      "overloads": "num -> (e ** a) - 1\nstr -> expand expression a",
      "token": "\u2206E"
    },
    {
      "name": "Ends With",
      "description": "Check if one value ends with another",
      "overloads": "any, any -> a.endswith(b) (ends with b?)",
      "token": "\u00f8E"
    }
  ],
  "70": [
    {
      "name": "Filter",
      "description": "Filter a list by another list or function.",
      "overloads": "any, fun -> filter(b,a) (filter a by the ones that b returns a truthy result for)\nany, any -> remove elements of a that are in b",
      "token": "F"
    },
    {
      "name": "FizzBuzz",
      "description": "FizzBuzz",
      "token": "kF"
    },
    {
      "name": "nth Fibonacci Number, 0-indexed",
      "description": "Get the nth fibonacci number, 0-indexed",
      "overloads": "num -> nth_fibonacci(a) (0 -> 0, 1 -> 1, 2 -> 1, ...)",
      "token": "\u2206F"
    },
    {
      "name": "All Fibonacci",
      "description": "All Fibonacci numbers as a LazyList.",
      "token": "\u00deF"
    }
  ],
  "71": [
    {
      "name": "Max",
      "description": "Maximum value or a",
      "overloads": "any -> max(a)",
      "token": "G"
    },
    {
      "name": "Longest By Length",
      "description": "Return the longest item in a list.",
      "overloads": "lst -> the longest item of a",
      "token": "\u00deG"
    }
  ],
  "72": [
    {
      "name": "Hex To Decimal",
      "description": "Convert hexadecimal to decimal",
      "overloads": "any -> int(a,16) (from hexadecimal)",
      "token": "H"
    },
    {
      "name": "Hello, World!",
      "description": "Hello, World!",
      "token": "kH"
    }
  ],
  "73": [
    {
      "name": "Into Two Pieces",
      "description": "Push n spaces / quine cheese / into two pieces",
      "overloads": "num -> push a spaces\nstr -> equivalent to `qp`\nlst -> split a list into two halves",
      "token": "I"
    },
    {
      "name": "First N Digits of Pi",
      "description": "Generate the first n digits of pi",
      "overloads": "num -> the first (a + 1)th digits of pi",
      "token": "\u2206I"
    },
    {
      "name": "All Indices (Multidimensional)",
      "description": "All multidimensional indices of element in list",
      "overloads": "lst, any -> all indices of b in a\nany, lst -> all indices of a in b\nany, any -> all indices of b in a",
      "token": "\u00deI"
    }
  ],
  "74": [
    {
      "name": "Merge",
      "description": "Join two lists or items",
      "overloads": "lst, str -> a.append(b) (append)\nlst, num -> a.append(b) (append)\nstr, lst -> b.prepend(a) (prepend)\nnum, lst -> b.prepend(a) (prepend)\nlst, lst -> merged(a,b) (merge)\nany, any -> a + b (concatenate)",
      "token": "J"
    },
    {
      "name": "Parse JSON",
      "description": "Parse a JSON string into a Vyxal object",
      "overloads": "str -> json.loads(a)",
      "token": "\u00f8J"
    }
  ],
  "75": [
    {
      "name": "Factors / Substrings / Prefixes",
      "description": "Get either the factors of a, substrings that occur more than once, or prefixes",
      "overloads": "num -> divisors(a) (positive integer factors)\nstr -> all non-empty substrings of a that occur more than once in a\nlst -> prefixes(a) (prefixes)",
      "token": "K"
    },
    {
      "name": "Sum of Proper Divisors / Stationary Points",
      "description": "Get the sum of all proper divisors of a number /  get the stationary points of a function",
      "overloads": "num -> sum_of_proper_divisors(a)\nstr -> stationary_points(a)",
      "token": "\u2206K"
    },
    {
      "name": "Suffixes",
      "description": "Suffixes of a list.",
      "overloads": "lst -> [a, a[:-1], a[:-2], ..., a[:1]]",
      "token": "\u00deK"
    }
  ],
  "76": [
    {
      "name": "Length",
      "description": "Get length of a",
      "overloads": "any -> len(a)",
      "token": "L"
    },
    {
      "name": "Lowercase and uppercase alphabet",
      "description": "\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" (uppercase+lowercase alphabet)",
      "token": "kL"
    },
    {
      "name": "Natural Logarithm",
      "description": "Get the natural logarithm of a number",
      "overloads": "num -> math.log(a)",
      "token": "\u2206L"
    },
    {
      "name": "Strip whitespace from the left side",
      "description": "Strip whitespace from the left side of a string",
      "overloads": "str -> a.lstrip()",
      "token": "\u00f8L"
    }
  ],
  "77": [
    {
      "name": "Map",
      "description": "Map b over a",
      "overloads": "any, fun -> map(b,a) (apply b to each of a)\nany, any -> pair each item of b with a ([[a, i] for i in b])",
      "token": "M"
    },
    {
      "name": "Mode",
      "description": "Get the mode of a list",
      "overloads": "lst -> mode(a)",
      "token": "\u2206M"
    },
    {
      "name": "Flip Brackets Vertical Palindromise",
      "description": "Vertically palindromise and reverse brackets and slashes, without duplicating center",
      "overloads": "any -> palindromise, without duplicating center, and flip brackets and slashes in the second half",
      "token": "\u00f8M"
    },
    {
      "name": "Maximal Indices",
      "description": "Indices of the maximal elements of a list.",
      "overloads": "lst -> indices of the maximal elements of a",
      "token": "\u00deM"
    },
    {
      "name": "Map At Indices",
      "description": "Map a function at elements of a list whose indices are in another list",
      "overloads": "lst, lst, fun -> change the items in a with indices in by applying function c\nlst, num, fun -> change the bth item in a by applying function c",
      "token": "\u00a8M"
    }
  ],
  "78": [
    {
      "name": "Negate / Swap Case / First Integer Where Truthy",
      "description": "Negate a number / swap case of a string / first integer where a function truthy",
      "overloads": "num -> -a  (negate)\nstr -> swap_case(a) (toggle case)\nfun -> first integer where a(n) is true",
      "token": "N"
    },
    {
      "name": "Current time as a list of \u27e8hh|mm|ss\u27e9",
      "description": "Current time as a list of \u27e8hh|mm|ss\u27e9",
      "token": "kN"
    },
    {
      "name": "Alternating Negation",
      "description": "An infinite list of an item, then that item negated, then that item, and so on. Uses the negation element for negation.",
      "overloads": "any -> [a, -a, a, -a, ...]",
      "token": "\u00deN"
    }
  ],
  "79": [
    {
      "name": "Count",
      "description": "Count number of times b occurs in a",
      "overloads": "any, any -> a.count(b)",
      "token": "O"
    }
  ],
  "80": [
    {
      "name": "Strip",
      "description": "Remove the set of elements in b from both ends of a",
      "overloads": "any, any -> a.strip(b)",
      "token": "P"
    },
    {
      "name": "Printable ASCII Without Space",
      "description": "printable ascii exluding space",
      "token": "kP"
    },
    {
      "name": "Polynomial Solver",
      "description": "Solve a polynomial of the form a[0]x^len(a) + a[1]x^len(a)-1 ... = 0",
      "overloads": "lst -> roots(a)",
      "token": "\u2206P"
    },
    {
      "name": "Pluralise Count",
      "description": "Create a sentence of the form 'a bs'",
      "overloads": "num, str -> a + \" \" + b + (s if a != 1 else \"\") (concatenate with space, append a s if not 1)",
      "token": "\u00f8P"
    }
  ],
  "81": [
    {
      "name": "Quit",
      "description": "Quit the program",
      "token": "Q"
    },
    {
      "name": "Printable ASCII With Space",
      "description": "printable ascii with space",
      "token": "kQ"
    },
    {
      "name": "General Quadratic Solver",
      "description": "Solve a quadratic equation of the form x^2 + ax + b = 0",
      "overloads": "num, num -> roots(a, b) / x^2 + ax + b = 0\nnum, str -> evaluate single variable expression b with x=a\nstr, num -> evaluate single variable expression a with x=b\nstr, str -> solve equations a and b simultaneously for x and y",
      "token": "\u2206Q"
    }
  ],
  "82": [
    {
      "name": "Reduce",
      "description": "Reduce a by b, or reverse each item of b",
      "overloads": "any, fun -> reduce(b,a) (Reduce a by b)\nany, any -> a, vectorised_reverse(b)",
      "token": "R"
    },
    {
      "name": "360",
      "description": "360",
      "token": "kR"
    },
    {
      "name": "To Radians",
      "description": "Convert an angle from degrees to radians",
      "overloads": "num -> math.radians(a)",
      "token": "\u2206R"
    },
    {
      "name": "Strip whitespace from the right side",
      "description": "Strip whitespace from the right side of a string",
      "overloads": "str -> a.rstrip()",
      "token": "\u00f8R"
    },
    {
      "name": "Remove Last Item From Cumulative Sums and Prepend 0",
      "description": "Remove the last item of the cumulative sums of a list and prepend 0. A shortcut for \u00a6\u1e6a0p",
      "overloads": "lst -> [0, a[0], a[0]+a[1], ..., a[0]+a[1]+...+a[-2]]",
      "token": "\u00deR"
    }
  ],
  "83": [
    {
      "name": "Stringify",
      "description": "Stringify a list or number",
      "overloads": "any -> str(a) (Stringify)",
      "token": "S"
    },
    {
      "name": "Amogus",
      "description": "Amogus (\"\u0d9e\")",
      "token": "kS"
    },
    {
      "name": "Arc Sine",
      "description": "Get the arcsine of an angle in radians",
      "overloads": "num -> math.arcsin(a)",
      "token": "\u2206S"
    },
    {
      "name": "Strip whitespace from both sides",
      "description": "Strip whitespace from both sides of a string / Remove trailing zeros from a number",
      "overloads": "str -> a.strip()\nnum -> remove trailing zeros",
      "token": "\u00f8S"
    },
    {
      "name": "Sublists",
      "description": "Sublists of a list.",
      "overloads": "lst -> non-empty sublists of a",
      "token": "\u00deS"
    }
  ],
  "84": [
    {
      "name": "Truthy Indices / Triple / Triadify",
      "description": "Get indices of truthy elements, triple, or make the arity of a function 3",
      "overloads": "num -> a * 3\nany -> truthy_indices(a)\nfun -> set the arity of function a to 3",
      "token": "T"
    },
    {
      "name": "BF command set",
      "description": "BF command set (\"[]<>-+.,\")",
      "token": "kT"
    },
    {
      "name": "Arc Tangent",
      "description": "Get the arctangent of an angle in radians",
      "overloads": "num -> math.arctan(a)",
      "token": "\u2206T"
    },
    {
      "name": "Multi-dimensional truthy indices",
      "description": "Multi-dimensional indices of truthy elements",
      "overloads": "lst -> Multi-dimensional indices of truthy elements in a",
      "token": "\u00deT"
    }
  ],
  "85": [
    {
      "name": "Uniquify",
      "description": "Remove duplicates",
      "overloads": "any -> uniquify(a) (remove duplicates)",
      "token": "U"
    },
    {
      "name": "Uniquify Mask",
      "description": "A list of booleans describing which elements of a will remain after uniquifying.",
      "overloads": "any -> a list of booleans describing which elements of a will remain after uniquifying",
      "token": "\u00deU"
    },
    {
      "name": "Get Request",
      "description": "Send a GET request to a URL",
      "overloads": "str -> send a GET request to a",
      "token": "\u00a8U"
    }
  ],
  "86": [
    {
      "name": "Replace / Map to Indices",
      "description": "Replace b with c in a / Map a function at elements of a list whose indices are in another list",
      "overloads": "any, any, any -> a.replace(b,c) (replace)\nlst, lst, fun -> for each i in b, change the ith element in a by applying the function, then return the new list\nlst, num, fun -> replace the bth element in a by applying the function, then return the new list",
      "token": "V"
    },
    {
      "name": "Upercase vowels",
      "description": "\"AEIOU\" (Vowels uppercase)",
      "token": "kV"
    },
    {
      "name": "Replace Until No Change",
      "description": "Replace b with c in a until a does not change",
      "overloads": "str, str, str -> a.replace_until_no_change(b,c)",
      "token": "\u00f8V"
    }
  ],
  "87": [
    {
      "name": "Wrap",
      "description": "Stack wrapped into a list",
      "token": "W"
    },
    {
      "name": "https://",
      "description": "https://",
      "token": "kW"
    },
    {
      "name": "Round to n Decimal Places",
      "description": "Round a number to n decimal places",
      "overloads": "num, num -> round(a, no_dec_places=b) (b significant digits)",
      "token": "\u2206W"
    },
    {
      "name": "Group on words",
      "description": "Group a string on words",
      "overloads": "str -> Group a on words, leaving chunks of [a-zA-Z] together and having everything else as a single character",
      "token": "\u00f8W"
    }
  ],
  "88": [
    {
      "name": "Break",
      "description": "Break out of the current loop or return early from a function.",
      "token": "X"
    }
  ],
  "89": [
    {
      "name": "Interleave",
      "description": "Interleave two lists",
      "overloads": "any, any -> interleave(a,b) (a[0], b[0], a[1], b[1], ...)",
      "token": "Y"
    }
  ],
  "90": [
    {
      "name": "Zip",
      "description": "Zip two lists or Zip a with b mapped over a. Fills with 0s if needed.",
      "overloads": "any, any -> zip(a,b)\nany, fun -> zip(a,map(b,a)) (zipmap, map and zip)",
      "token": "Z"
    },
    {
      "name": "Uppercase alphabet reversed",
      "description": "\"ZYXWVUTSRQPONMLKJIHGFEDCBA\" (uppercase alphabet reversed)",
      "token": "kZ"
    },
    {
      "name": "ZFill",
      "description": "Pad a string with zeros to a given length",
      "overloads": "str, num -> zfill(a, b)",
      "token": "\u2206Z"
    },
    {
      "name": "Fill By Coordinates",
      "description": "Fill a matrix by calling a function with the lists of coordinates in the matrix.",
      "overloads": "any, fun -> for each value of a (all the way down) call b with the coordinates of that value and put that at the appropriate position in a",
      "token": "\u00deZ"
    },
    {
      "name": "Zip lambda",
      "description": "Open a zip lambda - \u00a8Z...; Pops top two items off stack, zips them, and loops over them, pushing each item to the stack. Equivalent to `Z\u019b\u00f7...;`.",
      "token": "\u00a8Z"
    }
  ],
  "91": [
    {
      "name": "Open If Statement",
      "description": "Open an if Statement",
      "token": "["
    }
  ],
  "92": [
    {
      "name": "Single char Literal",
      "description": "Pushes a single character",
      "token": "\\"
    },
    {
      "name": "Antidiagonal",
      "description": "Antidiagonal of a matrix",
      "overloads": "lst -> antidiagonal(a)",
      "token": "\u00de\\"
    }
  ],
  "93": [
    {
      "name": "Close If Statement",
      "description": "Close an if Statement",
      "token": "]"
    }
  ],
  "94": [
    {
      "name": "String Literal",
      "description": "A string literal - `...`",
      "token": "`"
    }
  ],
  "95": [
    {
      "name": "Reverse Stack",
      "description": "Reverse the stack.",
      "token": "^"
    },
    {
      "name": "Hex digits (uppercase)",
      "description": "\"0123456789ABCDEF\" (Hex digits uppercase)",
      "token": "k^"
    },
    {
      "name": "Canvas Draw",
      "description": "Draw on a canvas (see knowledge/spec/canvas.md for more details) and return it as a string",
      "overloads": "num, lst, str -> draw with a = length, b = dirs, c = text\nnum, str, str -> draw with a = length, b/c dependent on dir validity\nany, num, any -> draw with b = length ^\nany, any, num -> draw with c = length ^\nstr, any, any -> draw with a = text, b/c dependent on dir validity\nlst, str, any -> draw with b = text, ^\nlst, lst, str -> draw with c = text, ^",
      "token": "\u00f8^"
    },
    {
      "name": "Parse direction arrow to vector",
      "description": "Map characters in `>^<v` to direction vectors",
      "overloads": "str -> map on a, replacing `>^<v` with [1, 0], [0, 1], etc., and others with [0, 0]",
      "token": "\u00a8^"
    }
  ],
  "96": [
    {
      "name": "Pop",
      "description": "Pop the top item of the stack",
      "token": "_"
    }
  ],
  "97": [
    {
      "name": "Any",
      "description": "Check if any items of a list are truthy / Check if a character is an uppercase letter",
      "overloads": "str -> is_uppercase(a) if a.length == 1 else [is_uppercase(z) for z in a]\nlst -> any(a) (are any items truthy?)",
      "token": "a"
    },
    {
      "name": "Lowercase alphabet",
      "description": "\"abcdefghijklmnopqrstuvwxyz\" (lowercase alphabet)",
      "token": "ka"
    },
    {
      "name": "Adjacency matrix (Directed)",
      "description": "Adjacency matrix of directed graph (nonzero A_ij denotes edge from i to j)",
      "overloads": "lst -> adjacency matrix of directed graph (where a = [[i, j] for each edge i to j])",
      "token": "\u00dea"
    }
  ],
  "98": [
    {
      "name": "Binary",
      "description": "Convert a number or string to binary",
      "overloads": "num -> bin(a) (list of binary digits of a)\nstr -> [bin(ord(char)) for char in a] (list of binary digits for each codepoint in a)",
      "token": "b"
    },
    {
      "name": "Buzz",
      "description": "Buzz",
      "token": "kb"
    },
    {
      "name": "Binary String",
      "description": "Get a binary string of a number",
      "overloads": "num -> bin(a).replace(\"0b\", \"\")",
      "token": "\u2206b"
    },
    {
      "name": "Parenthesise",
      "description": "Parenthesise a string",
      "overloads": "any -> \"(\"\" + a + \")\"",
      "token": "\u00f8b"
    }
  ],
  "99": [
    {
      "name": "Contains / First Truthy Item Under Function Application",
      "description": "Check if one thing contains another / returns the first truthy item in a list after applying a function",
      "overloads": "any, fun -> first item of a where b(x) is truthy (shortcut for Fh)\nany, any -> b in a (does a contain b, membership, contains)",
      "token": "c"
    },
    {
      "name": "Cosine",
      "description": "Get the cosine of an angle in radians",
      "overloads": "num -> math.cos(a)",
      "token": "\u2206c"
    },
    {
      "name": "String Compress",
      "description": "Compress a string of lowercase letters and spaces in base 255",
      "overloads": "str -> base_255_string_compress(a)",
      "token": "\u00f8c"
    },
    {
      "name": "Cardinals",
      "description": "An infinite list of one, two, three, four etc",
      "token": "\u00dec"
    }
  ],
  "100": [
    {
      "name": "Double / Dyadify",
      "description": "Double a number or repeat a string twice / make a function dyadic",
      "overloads": "num -> a * 2 (double)\nstr -> a * 2 (repeated twice)\nfun -> change the arity of the function to 2",
      "token": "d"
    },
    {
      "name": "Digits",
      "description": "\"0123456789\" (Digits 0-9)",
      "token": "kd"
    },
    {
      "name": "Straight Line Distance",
      "description": "Get the straight line distance between two points (x1, x2, ..., xn) and (y1, y2, ..., yn)",
      "overloads": "lst, lst -> euclidean_distance(a, b)",
      "token": "\u2206d"
    },
    {
      "name": "Run Length Decoding",
      "description": "Run length decoding, convert from list of characters and lengths to a string/list",
      "overloads": "lst -> run_length_decoded(a)",
      "token": "\u00f8d"
    },
    {
      "name": "Distance matrix (Directed)",
      "description": "Distance matrix of directed graph",
      "overloads": "lst -> distance matrix of a directed graph (where a = [[i, j] for each edge i to j])",
      "token": "\u00ded"
    }
  ],
  "101": [
    {
      "name": "Exponentiation",
      "description": "Exponentiate two numbers / extend string / get length of a regex match",
      "overloads": "num, num -> a ** b (exponentiation)\nstr, num -> append a[0] until a is length b (spaces are used if a is empty)\nnum, str -> append b[0] until b is length a (spaces are used if b is empty)\nstr, str -> regex.search(pattern=a, string=b).span() (length of regex match)",
      "token": "e"
    },
    {
      "name": "e, Euler's number",
      "description": "2.718281828459045 (math.e, Euler's number)",
      "token": "ke"
    },
    {
      "name": "Euler's Number (e) raised to power a",
      "description": "Get the value of Euler's number (e) raised to the power of a",
      "overloads": "num -> e ** a\nstr -> simplify expression a",
      "token": "\u2206e"
    },
    {
      "name": "Run Length Encoding",
      "description": "Run length encoding, convert from string/list to list of items and amount repeated.",
      "overloads": "str -> run_length_encoded(a)",
      "token": "\u00f8e"
    },
    {
      "name": "Matrix Exponentiation",
      "description": "A matrix multiplied by itself n times",
      "overloads": "lst, num -> a ** b (matrix exponentiation)\nnum, lst -> b ** a (matrix exponentiation)",
      "token": "\u00dee"
    }
  ],
  "102": [
    {
      "name": "Flatten",
      "description": "Turn a number into a list of digits, split a string into a list of characters, or flatten a list.",
      "overloads": "num -> digits of a\nstr -> list of characters of a\nlst -> flatten(a) (deep flatten)",
      "token": "f"
    },
    {
      "name": "Fizz",
      "description": "Fizz",
      "token": "kf"
    },
    {
      "name": "nth Fibonacci Number",
      "description": "Get the nth fibonacci number, 1-indexed",
      "overloads": "num -> nth_fibonacci(a) (0 -> 1, 1 -> 1, 2 -> 2, ...)",
      "token": "\u2206f"
    },
    {
      "name": "Ends With Set",
      "description": "Check if a value ends with others",
      "overloads": "any, any -> does a end with all of b?",
      "token": "\u00f8f"
    },
    {
      "name": "Flatten By depth",
      "description": "Flatten a list by a certain depth (default 1)",
      "overloads": "lst, num -> flatten a by depth b\nany, lst -> a, flatten b by depth 1",
      "token": "\u00def"
    }
  ],
  "103": [
    {
      "name": "Minimum",
      "description": "Take the minimum of a list",
      "overloads": "any -> min(a)",
      "token": "g"
    },
    {
      "name": "Golden ratio/phi",
      "description": "1.618033988749895 (golden ratio/phi)",
      "token": "kg"
    },
    {
      "name": "Shortest By Length",
      "description": "Return the shortest item in a list.",
      "overloads": "lst -> the shortest item of a",
      "token": "\u00deg"
    }
  ],
  "104": [
    {
      "name": "Head",
      "description": "First item of something",
      "overloads": "any -> a[0] (first item)",
      "token": "h"
    },
    {
      "name": "Hello World (No Punctuation)",
      "description": "Hello World",
      "token": "kh"
    }
  ],
  "105": [
    {
      "name": "Index",
      "description": "Index into a list",
      "overloads": "any, num -> a[b] (index)\nnum, any -> b[a] (index)\nstr, str -> enclose b in a (b[0:len(b)//2] + a + b[len(b)//2:])\nany, [x] -> a[:b] (0 to bth item of a)\nany, [x,y] -> a[x:y] (x to yth item of a)\nany, [x,y,m] -> a[x:y:m] (x to yth item of a, taking every mth)",
      "token": "i"
    },
    {
      "name": "Pi",
      "description": "3.141592653589793 (Pi)",
      "token": "ki"
    },
    {
      "name": "nth Digit of Pi / Integrate",
      "description": "Get the nth digit of pi",
      "overloads": "num -> nth_digit_of_pi(a)\nstr -> antiderivative of a",
      "token": "\u2206i"
    },
    {
      "name": "Multidimensional Indexing",
      "description": "Index a list of coordinates into a value.",
      "overloads": "lst, lst -> reduce by indexing with a as initial value (a[b[0]][b[1]][b[2]]...)",
      "token": "\u00dei"
    },
    {
      "name": "If/Else",
      "description": "If the top of the stack is truthy, run the first element, otherwise the second.",
      "usage": "\u00a8i<element><element>",
      "token": "\u00a8i"
    }
  ],
  "106": [
    {
      "name": "Join",
      "description": "Join a list by a string",
      "overloads": "any, any -> a.join(b)",
      "token": "j"
    },
    {
      "name": "Depth",
      "description": "Depth of ragged list",
      "overloads": "lst -> Depth",
      "token": "\u00dej"
    }
  ],
  "107": [
    {
      "name": "Constant Digraph",
      "description": "Used for constant digraphs.",
      "token": "k"
    }
  ],
  "108": [
    {
      "name": "Cumulative Groups",
      "description": "Cumulative groups (overlapping groups, aperture) / Equal length",
      "overloads": "any, num -> [a[0:b], a[1:b+1], a[2:b+2], ..., a[-b:]]\nnum, any -> [b[0:a], b[1:a+1], b[2:a+2], ..., b[-a:]]\nany, any -> length(a) == length(b)",
      "token": "l"
    },
    {
      "name": "Uppercase and lowercase alphabet, reversed",
      "description": "\"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\" (Z-Az-a)",
      "token": "kl"
    },
    {
      "name": "Logarithm (log_2)",
      "description": "Get the logarithm of a number to base 2",
      "overloads": "num -> math.log2(a)",
      "token": "\u2206l"
    },
    {
      "name": "Strip from the left side",
      "description": "Strip from the left side of a string",
      "overloads": "str, num -> a.lstrip(b)",
      "token": "\u00f8l"
    }
  ],
  "109": [
    {
      "name": "Mirror",
      "description": "Append input reversed to itself.",
      "overloads": "num -> a + reversed(a) (as number)\nstr -> a + reversed(a)\nlst -> append reversed(a) to a",
      "token": "m"
    },
    {
      "name": "Flip Brackets Vertical Mirror, Center, Join on Newlines",
      "description": "Vertically mirror each and reverse brackets and slashes, then center and join by newlines. Equivalent to `\u00f8\u1e40\u00f8\u010a\u204b`",
      "overloads": "any -> mirror each, flip brackets and slashes in the second half, center by padding with spaces, and join by newlines",
      "token": "\u00f8m"
    },
    {
      "name": "Zero Matrix",
      "description": "Given a list of dimensions, create a matrix with those dimensions, filled with zeroes",
      "overloads": "lst -> matrix with dimensions each item of a, where the first is the innermost and the last is the outermost",
      "token": "\u00dem"
    }
  ],
  "110": [
    {
      "name": "Context",
      "description": "Context variable, value of the current loop or function.",
      "token": "n"
    },
    {
      "name": "NaN",
      "description": "math.nan",
      "token": "kn"
    },
    {
      "name": "Infinite list of all integers",
      "description": "All integers in an infinite list (0, 1, -1, 2, -2, ...)",
      "token": "\u00den"
    }
  ],
  "111": [
    {
      "name": "Remove",
      "description": "Remove instances of b in a",
      "overloads": "num, fun -> first a positive integers where b is truthy\nfun, num -> first b positive integers where a is truthy\nany, any -> a.replace(b,\"\")",
      "token": "o"
    },
    {
      "name": "Octal digits",
      "description": "\"01234567\" (Octal digits)",
      "token": "ko"
    },
    {
      "name": "Nth Ordinal",
      "description": "Get the nth ordinal / convert number to wordth ordinal",
      "overloads": "num -> num_to_ordinal(a)",
      "token": "\u2206o"
    },
    {
      "name": "Remove Until No change",
      "description": "Remove b from a until a does not change",
      "overloads": "str, str -> remove b from a until a does not change\nstr, lst -> remove everything in b (in order) from a until a does not change",
      "token": "\u00f8o"
    },
    {
      "name": "Ordinals",
      "description": "An infinite list of first, second, third, fourth etc",
      "token": "\u00deo"
    }
  ],
  "112": [
    {
      "name": "Prepend",
      "description": "Prepend b to a",
      "overloads": "any, any -> a.prepend(b) (prepend b to a)",
      "token": "p"
    },
    {
      "name": "Punctuation",
      "description": "string.punctuation (Punctuations)",
      "token": "kp"
    },
    {
      "name": "Nearest Prime to a Number / Python equivalent of an expression",
      "description": "Get the prime number closest to a given number, get the greater to break ties / return the python equivalent of a mathematical expression - sympy's .pycode() function",
      "overloads": "num -> nearest_prime(a)\nstr -> sympy.nsimplify(a).pycode()",
      "token": "\u2206p"
    },
    {
      "name": "Starts With",
      "description": "Check if one value starts with another",
      "overloads": "any, any -> a.startswith(b) (Starts with b?)",
      "token": "\u00f8p"
    },
    {
      "name": "Primes",
      "description": "An infinite list of primes",
      "token": "\u00dep"
    },
    {
      "name": "For Each Overlapping Pair",
      "description": "Run element for each overlapping pair. Equivalent to `2lv\u0192`",
      "usage": "\u00a8p<element>",
      "token": "\u00a8p"
    }
  ],
  "113": [
    {
      "name": "Uneval",
      "description": "Enclose in backticks, escape backslashes and backticks.",
      "overloads": "any -> uneval(a) (enclose in backticks + escape)",
      "token": "q"
    },
    {
      "name": "Quadratic Solver",
      "description": "Solve a quadratic equation of the form ax^2 + bx = 0",
      "overloads": "num, num -> x such that ax^2 + bx = 0\nnum, str -> solve for x such that a = b(x)\nstr, num -> solve for x such that a(x) = b\nstr, str -> solve for x such that a(x) = b(x)",
      "token": "\u2206q"
    }
  ],
  "114": [
    {
      "name": "Range",
      "description": "Range between two numbers, or cumulative reduce, or regex match",
      "overloads": "num, num -> range(a,b) (range from a to b)\nnum, str -> append spaces to b to make it length a\nstr, num -> prepend spaces to a to make it length b\nany, fun -> cumulative_reduce(a,function=b) (prefixes of a reduced by b)\nstr, str -> regex.has_match(pattern=a,string= b) (does b match a)",
      "token": "r"
    },
    {
      "name": "Digits, lowercase alphabet, and uppercase alphabet",
      "description": "\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" (0-9A-Za-z)",
      "token": "kr"
    },
    {
      "name": "Strip from the right side",
      "description": "Strip from the right side of a string",
      "overloads": "str, num -> a.rstrip(b)",
      "token": "\u00f8r"
    },
    {
      "name": "Remove Last Item and Prepend 0",
      "description": "Remove the last item of a list and prepend 0. A shortcut for \u1e6a0p",
      "overloads": "lst -> [0] + a[:-1]",
      "token": "\u00der"
    }
  ],
  "115": [
    {
      "name": "sort",
      "description": "Sort a list or string",
      "overloads": "any -> sorted(a) (sort)",
      "token": "s"
    },
    {
      "name": "Sine",
      "description": "Get the sine of an angle in radians",
      "overloads": "num -> math.sin(a)",
      "token": "\u2206s"
    },
    {
      "name": "Starts With Set",
      "description": "Check if a value starts with others",
      "overloads": "any, any -> does a start with all of b?",
      "token": "\u00f8s"
    },
    {
      "name": "All Slices of a List",
      "description": "Get all slices of a list, skipping a certain number of items",
      "overloads": "lst, int -> [a[::b], a[1::b], a[2::b], ...]\nint, lst -> [b[::a], b[1::a], b[2::a], ...]",
      "token": "\u00des"
    }
  ],
  "116": [
    {
      "name": "Tail",
      "description": "Last item",
      "overloads": "any -> a[-1] (last item)",
      "token": "t"
    },
    {
      "name": "Tangent",
      "description": "Get the tangent of an angle in radians",
      "overloads": "num -> math.tan(a)",
      "token": "\u2206t"
    }
  ],
  "117": [
    {
      "name": "Minus One",
      "description": "Push -1",
      "token": "u"
    },
    {
      "name": "All Unique",
      "description": "Are all elements of a list/string unique?",
      "overloads": "any -> all_unique(a)",
      "token": "\u00deu"
    }
  ],
  "118": [
    {
      "name": "Vectorise",
      "description": "Vectorise an element",
      "usage": "v<element>",
      "token": "v"
    },
    {
      "name": "Simple vectorise",
      "description": "Simple vectorise an element. Well, you'll have to look at the code to know what that means.",
      "usage": "\u00a8v<element>",
      "token": "\u00a8v"
    },
    {
      "name": "Lowercase vowels",
      "description": "\"aeiou\" (Vowels lowercase)",
      "token": "kv"
    }
  ],
  "119": [
    {
      "name": "Listify",
      "description": "a wrapped in a singleton list",
      "overloads": "any -> [a] (wrap in singleton list)",
      "token": "w"
    },
    {
      "name": "ASCII Whitespace",
      "description": "All ASCII whitespace",
      "token": "kw"
    },
    {
      "name": "Distance matrix (Undirected)",
      "description": "Distance matrix of undirected graph",
      "overloads": "lst -> distance matrix of an undirected graph (where a = [[i, j] for each edge i to j])",
      "token": "\u00dew"
    }
  ],
  "120": [
    {
      "name": "Recurse / Continue / Print Stack",
      "description": "Call current function (Functions/Lambdas) / Continue (For Loops) / Print the entire stack (otherwise)",
      "token": "x"
    },
    {
      "name": "All Combinations Without Replacement",
      "description": "All combinations of a list / string, of all lengths, without replacement",
      "overloads": "any -> all (non-empty) combinations of a, of all lengths and all orders, without replacement",
      "token": "\u00dex"
    }
  ],
  "121": [
    {
      "name": "Uninterleave",
      "description": "Push every other item of a, and the rest.",
      "overloads": "any -> a[::2], a[1::2] (every second item, the rest)",
      "token": "y"
    }
  ],
  "122": [
    {
      "name": "Zip-self",
      "description": "Zip a with itself",
      "overloads": "any -> zip(a,a)",
      "token": "z"
    },
    {
      "name": "Lowercase alphabet reversed",
      "description": "\"zyxwvutsrqponmlkjihgfedcba\" (lowercase alphabet reversed)",
      "token": "kz"
    }
  ],
  "123": [
    {
      "name": "Open While Loop",
      "description": "Open a while loop - `{...}`",
      "token": "{"
    }
  ],
  "124": [
    {
      "name": "Branch In Structure",
      "description": "Branch the structure - means various things depending on context",
      "token": "|"
    }
  ],
  "125": [
    {
      "name": "Close While Loop",
      "description": "Close a while loop",
      "token": "}"
    }
  ],
  "126": [
    {
      "name": "Filter / Execute Without Pop",
      "description": "For monads, filter a list by that. For dyads, execute without popping from the stack.",
      "usage": "~<element>",
      "token": "~"
    }
  ],
  "127": [
    {
      "name": "Max by Tail",
      "description": "Maximum by last item",
      "overloads": "any -> max(a, key=lambda x: x[-1]) (maximum by last item)",
      "token": "\u2191"
    },
    {
      "name": "Maximum By Function",
      "description": "Find the maximum value of a list by applying a function to each element",
      "overloads": "lst, fun -> maximum value of a by applying b to each element",
      "token": "\u00de\u2191"
    }
  ],
  "128": [
    {
      "name": "Min by Tail",
      "description": "Minimum by last item",
      "overloads": "any -> min(a, key=lambda x: x[-1]) (minimum by last item)",
      "token": "\u2193"
    },
    {
      "name": "Minimum By Function",
      "description": "Find the minimum value of a list by applying a function to each element",
      "overloads": "lst, fun -> minimum value of a by applying b to each element",
      "token": "\u00de\u2193"
    }
  ],
  "129": [
    {
      "name": "Dyadic Maximum",
      "description": "Maximum of two values / Maximum of a list by a function",
      "overloads": "any, any -> max(a,b)\nany, fun -> max(a,key=b)",
      "token": "\u2234"
    },
    {
      "name": "Elementwise Vectorised Dyadic Maximum",
      "description": "Elementwise vectorised dyadic maximum.",
      "overloads": "lst, lst -> [max(a[0], b[0]), max(a[1], b[1]), ...]",
      "token": "\u00de\u2234"
    }
  ],
  "130": [
    {
      "name": "Dyadic Minimum",
      "description": "Minimum of two values / Minimum of a list by a function",
      "overloads": "any, any -> min(a,b)\nany, fun -> min(a,key=b)",
      "token": "\u2235"
    },
    {
      "name": "Elementwise Vectorised Dyadic Minimum",
      "description": "Elementwise vectorised dyadic minimum.",
      "overloads": "lst, lst -> [min(a[0], b[0]), min(a[1], b[1]), ...]",
      "token": "\u00de\u2235"
    }
  ],
  "131": [
    {
      "name": "Increment / Space Replace With 0",
      "description": "Add 1 to a number / replace all spaces in a string with \"0\"",
      "overloads": "num -> a + 1\nstring -> a.replace(\" \",\"0\")",
      "token": "\u203a"
    },
    {
      "name": "Increment until false",
      "description": "Increment a until b(a) is false (deprecated, use `>` instead)",
      "overloads": "any, fun -> while b(a): a += 1\nfun, any -> while a(b): b += 1",
      "token": "\u2206\u203a"
    }
  ],
  "132": [
    {
      "name": "Decrement",
      "description": "Subtract 1 from a number",
      "overloads": "num -> a - 1\nstr -> a + \"-\"",
      "token": "\u2039"
    },
    {
      "name": "Decrement until false",
      "description": "Decrement a until b(a) is false (deprecated, use `<` instead)",
      "overloads": "any, fun -> while b(a): a -= 1\nfun, any -> while a(b): b -= 1",
      "token": "\u2206\u2039"
    }
  ],
  "133": [
    {
      "name": "Parity",
      "description": "A number modulo 2",
      "overloads": "num -> a % 2 (odd?)\nstr -> second half of A",
      "token": "\u2237"
    }
  ],
  "134": [
    {
      "name": "Empty String",
      "description": "The empty string",
      "token": "\u00a4"
    }
  ],
  "135": [
    {
      "name": "Space",
      "description": "A Space",
      "token": "\u00f0"
    },
    {
      "name": "Current day in the format \u27e8DD|MM|YYYY\u27e9",
      "description": "Current day in the format \u27e8DD|MM|YYYY\u27e9",
      "token": "k\u00f0"
    }
  ],
  "136": [
    {
      "name": "Variable Set",
      "description": "Set variable (\u2192name)",
      "token": "\u2192"
    }
  ],
  "137": [
    {
      "name": "Variable Get",
      "description": "Get the value of a variable (\u2190name)",
      "token": "\u2190"
    }
  ],
  "138": [
    {
      "name": "To Base Ten / From Custom Base",
      "description": "Convert a number from a custom base to base 10",
      "overloads": "any, num -> a to base 10 from number base b, treating list items / string items as digits\nstr, str -> a to base 10 from custom string base b, replacing values in a with their index in b and converting to base 10",
      "token": "\u03b2"
    },
    {
      "name": "Braces, square brackets, angle brackets, and parentheses",
      "description": "{}[]<>()",
      "token": "k\u03b2"
    },
    {
      "name": "Balanced Brackets",
      "description": "Check if brackets in a string (\"{}()[]<>\") are balanced",
      "overloads": "any -> balanced_brackets(a)",
      "token": "\u00f8\u03b2"
    }
  ],
  "139": [
    {
      "name": "From Base Ten / To Custom Base",
      "description": "Convert a number to a different base from base 10.",
      "overloads": "num, num -> list of digits of a in base b\nnum, str -> a converted into a string of characters of b\nnum, lst -> a converted into a list of arbitrary values from b",
      "token": "\u03c4"
    },
    {
      "name": "Common Logarithm",
      "description": "Get the common logarithm of a number",
      "overloads": "num -> math.log10(a)",
      "token": "\u2206\u03c4"
    }
  ],
  "140": [
    {
      "name": "Absolute value",
      "description": "Take the absolute value of a number, or remove whitespace from a string",
      "overloads": "num -> abs(a) (absolute value)\nstr -> remove whitespace from a",
      "token": "\u0227"
    }
  ],
  "141": [
    {
      "name": "Boolify",
      "description": "Convert an arbitrary value into a truthy or falsy value, vectorises with flag t",
      "overloads": "any -> bool(a) (booliify)",
      "token": "\u1e03"
    },
    {
      "name": "Opening brackets",
      "description": "\"([{\" (Open brackets)",
      "token": "k\u1e03"
    },
    {
      "name": "Curly Bracketify",
      "description": "Enclose a string in curly brackets",
      "overloads": "any -> \"{\"\" + a + \"}\"",
      "token": "\u00f8\u1e03"
    }
  ],
  "142": [
    {
      "name": "Not One",
      "description": "Check if something is not equal to 1",
      "overloads": "any -> a != 1",
      "token": "\u010b"
    },
    {
      "name": "Nth Cardinal",
      "description": "Get the nth cardinal / convert number to words",
      "overloads": "num -> num_to_words(a)",
      "token": "\u2206\u010b"
    },
    {
      "name": "Semi Optimal number compress",
      "description": "Semi-optimally compress a number",
      "overloads": "num -> optimal_number_compress(a)",
      "token": "\u00f8\u010b"
    },
    {
      "name": "Cycle",
      "description": "Form an infinite list from a vector.",
      "overloads": "lst -> [a[0], a[1], ..., a[-1], a[0], a[1], ..., a[-1], a[0], ...]",
      "token": "\u00de\u010b"
    }
  ],
  "143": [
    {
      "name": "Divmod",
      "description": "Divmod / combinations / trim",
      "overloads": "num, num -> [a // b, a % b] (divmod - division and modulo)\nstr, num -> combinations of a with length b\nlst, num -> combinations of a with length b\nstr, str -> overwrite the start of a with b (b + a[len(b):])",
      "token": "\u1e0b"
    },
    {
      "name": "Current day in the format DD/MM/YYYY",
      "description": "Current day in the format DD/MM/YYYY",
      "token": "k\u1e0b"
    },
    {
      "name": "To Decimal",
      "description": "Convert a rational to its decimal representation.",
      "overloads": "num -> to_decimal(a)",
      "token": "\u00f8\u1e0b"
    },
    {
      "name": "Anti-diagonals",
      "description": "Anti-diagonals of a matrix, starting with the main anti-diagonal.",
      "overloads": "lst -> anti-diagonals of a, starting with the main anti-diagonal",
      "token": "\u00de\u1e0b"
    }
  ],
  "144": [
    {
      "name": "Enumerate",
      "description": "Zip with a range of the same length",
      "overloads": "any -> enumerate(a) (zip with 1...len(a))",
      "token": "\u0117"
    },
    {
      "name": "Nth Digit of Euler's Number (e) / Differentiate",
      "description": "Get the nth digit of Euler's number (e)",
      "overloads": "num -> nth_digit_of_e(a)\nstr -> derivative(a)",
      "token": "\u2206\u0117"
    }
  ],
  "145": [
    {
      "name": "Find",
      "description": "Find a value in another",
      "overloads": "any, any -> a.find(b) (indexing, -1 if not found)\nany, fun -> truthy indices of mapping b over a",
      "token": "\u1e1f"
    },
    {
      "name": "Multidimensional Search",
      "description": "Find the first multidimensional index of a value in another",
      "overloads": "lst, any -> find the first occurrence of a in b and return as a multidimensional index",
      "token": "\u00de\u1e1f"
    }
  ],
  "146": [
    {
      "name": "Gcd / Group by Function",
      "description": "Greatest Common Denominator of a list or some numbers",
      "overloads": "lst -> GCD(a) (gcd of whole list)\nnum, num -> gcd(a,b) (dyadic gcd)\nstr, str -> longest common suffix of a and b\nfun, any -> group b by the results of function a\nany, fun -> group a by the results of function b",
      "token": "\u0121"
    }
  ],
  "147": [
    {
      "name": "Head Extract",
      "description": "Separate the first item of something and push both to stack",
      "overloads": "any -> a[0], a[1:] (head extract)",
      "token": "\u1e23"
    }
  ],
  "148": [
    {
      "name": "Floor Division",
      "description": "Floor divide a by b",
      "overloads": "num, num -> a // b (floor division, floor(a / b))\nstr, num -> (a divided into b pieces)[0]\nnum, str -> (b divided into a pieces)[0]\nany, fun -> right reduce a by b (foldr)\nfun, any -> right reduce b by a (foldr)",
      "token": "\u1e2d"
    },
    {
      "name": "4294967296",
      "description": "2 ** 32, 2^32, 4294967296",
      "token": "k\u1e2d"
    }
  ],
  "149": [
    {
      "name": "Left Justify / Gridify / Infinite Replace / Collect until false",
      "description": "Find one value inside another, starting from a certain index.",
      "overloads": "num, num, num -> a <= c <= b\nnum, num, str -> a by b grid of c\nnum, str, num -> a by c grid of b\nnum, str, str -> b.ljust(a,filler=c)\nstr, num, num -> b by c grid of a\nstr, num, str -> a.ljust(c,filler=b)\nstr, str, num -> a.ljust(b,filler=c)\nstr, str, str -> a.infinite_replace(b, c)\nfun, fun, any -> [c, a(c), a(a(c)), ...], stopping at the first element x such that b(x) is falsy",
      "token": "\u0140"
    },
    {
      "name": "Left Align",
      "description": "Left align a string/string list",
      "overloads": "str -> justify to left\nlst -> justify each to left",
      "token": "\u00f8\u0140"
    }
  ],
  "150": [
    {
      "name": "Mean",
      "description": "Average of a list - sum / length",
      "overloads": "str -> palindromise(a) (a + a[:-1:-1])\nlst -> mean(a)",
      "token": "\u1e41"
    },
    {
      "name": "Median",
      "description": "Get the median of a list - returns a list of the two middle items if even length list (use \u1e41 to average them)",
      "overloads": "lst -> median(a)",
      "token": "\u2206\u1e41"
    },
    {
      "name": "Vertical Mirror",
      "description": "Vertical Mirror - Split by newlines, mirror each line, join by newlines",
      "overloads": "str -> vertical_mirror(a)",
      "token": "\u00f8\u1e41"
    },
    {
      "name": "Mold without repeat",
      "description": "Mold a list without repeating elements.",
      "overloads": "lst, lst -> mold a list without repeating elements",
      "token": "\u00de\u1e41"
    }
  ],
  "151": [
    {
      "name": "Join By Nothing",
      "description": "Join a list by the empty string. Vectorises if the list contains lists.",
      "overloads": "num -> abs(a) <= 1\nstr -> pad with 0s to nearest positive multiple of 8\nlst -> \"\".join(a)\nfun -> first integer x where a(x) is truthy",
      "token": "\u1e45"
    },
    {
      "name": "8192",
      "description": "8192",
      "token": "k\u1e45"
    }
  ],
  "152": [
    {
      "name": "Slice",
      "description": "Slice from an index to the end",
      "overloads": "fun, num -> first b integers for which a(x) is truthy\nany, num -> a[b:] (slice from b to the end)\nstr, str -> vertically merge a and b",
      "token": "\u022f"
    }
  ],
  "153": [
    {
      "name": "Powerset",
      "description": "All possible combinations of a",
      "overloads": "any -> all subsets of a (including the empty subset)",
      "token": "\u1e57"
    },
    {
      "name": "Bracket pair list",
      "description": "List of bracket pairs (\"[(),[],{},<>]\")",
      "token": "k\u1e57"
    },
    {
      "name": "First Prime Before a Number / Factor Expression",
      "description": "Get the first prime number before a given number / factor a mathematical expression",
      "overloads": "num -> prev_prime(a)\nstr -> factorise(a)",
      "token": "\u2206\u1e57"
    },
    {
      "name": "Flip Brackets Vertical Palindromise, Center, Join on Newlines",
      "description": "Vertically palindromise each and reverse brackets and slashes, without duplicating center, then center and join by newlines. Equivalent to `\u00f8M\u00f8\u010a\u204b`",
      "overloads": "any -> palindromise each, without duplicating center, flip brackets and slashes in the second half, center by padding with spaces, and join by newlines",
      "token": "\u00f8\u1e57"
    }
  ],
  "154": [
    {
      "name": "Round",
      "description": "Round a number to the nearest integer / real and imaginary part of complex number",
      "overloads": "num -> round(a)\ncomplex -> [real(a), imag(a)]\nstr -> quad palindromise with overlap",
      "token": "\u1e59"
    },
    {
      "name": "Polynomial from Roots",
      "description": "Get the polynomial with coefficients from the roots of a polynomial",
      "overloads": "list -> polynomial(a)",
      "token": "\u2206\u1e59"
    },
    {
      "name": "Regex replace",
      "description": "Replace matches of a with c in b",
      "overloads": "any, any, fun -> apply c to matches of a in b\nany, any, any -> replace matches of a with c in b",
      "token": "\u00f8\u1e59"
    }
  ],
  "155": [
    {
      "name": "Sort by Function",
      "description": "Sort a list by a function / create a range / split on a regex",
      "overloads": "any, fun -> sorted(a, key=b) (sort by b)\nnum, num -> range(a, b + 1) (inclusive range from a to b)\nstr, str -> regex.split(pattern=b, string=a)",
      "token": "\u1e61"
    },
    {
      "name": "Sort By Length",
      "description": "Sort a list by length.",
      "overloads": "lst -> sort a from shortest to longest",
      "token": "\u00de\u1e61"
    }
  ],
  "156": [
    {
      "name": "Tail Extract",
      "description": "Remove the last item and push both onto the stack",
      "overloads": "any -> a[:-1],a[-1]",
      "token": "\u1e6b"
    },
    {
      "name": "Totient Function / Local Minima",
      "description": "Get the totient function of a number / local minima of a function",
      "overloads": "num -> totient(a)\nstr -> local_minima(a)",
      "token": "\u2206\u1e6b"
    }
  ],
  "157": [
    {
      "name": "Chunk Wrap",
      "description": "Wrap a list in chunks of a certain length / apply a function to every second item of a list",
      "overloads": "any, num -> a wrapped in chunks of length b\nnum, any -> b wrapped in chunks of length a\nany, lst -> wrap a into chunks with lengths given in b, repeating if necessary\nlst, any -> wrap b into chunks with lengths given in a, repeating if necessary\nany, fun -> apply b to every second item of a ([a[0], b(a[1]), a[2], ...])\nfun, any -> apply a to every second item of b ([b[0], a(b[1]), b[2], ...])\nstr, str -> split a on first occurrence of b",
      "token": "\u1e87"
    },
    {
      "name": "Unwrap",
      "description": "Take a and push a[0]+a[-1] and a[1:-1]",
      "overloads": "lst -> a[0]+a[-1], a[1:-1]",
      "token": "\u00de\u1e87"
    },
    {
      "name": "Wrap Last n Items",
      "description": "Wrap the last n items on the stack into a list",
      "overloads": "num -> last a items of the stack, as a list; does not pop anything other than a",
      "token": "\u00a8\u1e87"
    }
  ],
  "158": [
    {
      "name": "Repeat",
      "description": "Repeat a value several times",
      "overloads": "str, num -> a * b\nnum, str -> b * a\nany, num -> repeat a b times ([a, a, ...])\nstr, str -> a + \" \" + b\nfun, any -> repeat function a on b while results are not unique ([a(b), a(a(b)), a(a(a(b))), ...] stopping at the first element i such that i == a(i))\nany, fun -> repeat function a on b while results are not unique ([b(a), b(b(a)), b(b(b(a))), ...] stopping at the first element i such that i == b(i))",
      "token": "\u1e8b"
    }
  ],
  "159": [
    {
      "name": "Exclusive Range Length",
      "description": "Range from 0 to length of a",
      "overloads": "any -> range(0, len(a)) (exclusive range from 0 to length of a)",
      "token": "\u1e8f"
    }
  ],
  "160": [
    {
      "name": "Inclusive Range Length",
      "description": "Range from 1 to length of a inclusive",
      "overloads": "any -> range(1, len(a)+1) (inclusive range from 1 to length of a)",
      "token": "\u017c"
    },
    {
      "name": "Lift",
      "description": "Multiply a numeric list by a range from 1 to its length",
      "overloads": "lst -> lift",
      "token": "\u00de\u017c"
    }
  ],
  "161": [
    {
      "name": "Square Root",
      "description": "Square root a number / every second character of a",
      "overloads": "num -> sqrt(a) (square root)\nstr -> every second character of a (a[0] + a[2] + ...)",
      "token": "\u221a"
    }
  ],
  "162": [
    {
      "name": "Open List",
      "description": "Open a list - \u27e8...\u27e9",
      "token": "\u27e8"
    }
  ],
  "163": [
    {
      "name": "Close list",
      "description": "Close a list - \u27e8...\u27e9",
      "token": "\u27e9"
    }
  ],
  "164": [
    {
      "name": "Two Character String",
      "description": "Collect the next two characters as a string - \u201b..",
      "token": "\u201b"
    }
  ],
  "165": [
    {
      "name": "Ten",
      "description": "Push 10 to the stack",
      "token": "\u2080"
    }
  ],
  "166": [
    {
      "name": "Hundred",
      "description": "Push 100 to the stack",
      "token": "\u2081"
    },
    {
      "name": "[1, 1]",
      "description": "The list [1, 1]",
      "token": "k\u2081"
    }
  ],
  "167": [
    {
      "name": "Is Even",
      "description": "Check if a value is even",
      "overloads": "num -> a % 2 == 0 (even?)\nany -> len(a) % 2 == 0 (length even?)",
      "token": "\u2082"
    },
    {
      "name": "2 ** 20",
      "description": "2 to the power of 20, 1048576",
      "token": "k\u2082"
    },
    {
      "name": "Dyadic Filter Lambda",
      "description": "Open a dyadic filter lambda - \u00a8\u2082...; Receives item and index.",
      "token": "\u00a8\u2082"
    }
  ],
  "168": [
    {
      "name": "Divisible By Three",
      "description": "Check if a is divisible by 3",
      "overloads": "num -> a % 3 == 0 (divisible by 3?)\nany -> len(a) == 1 (length is 1?)",
      "token": "\u2083"
    },
    {
      "name": "2 ** 30",
      "description": "2 to the power of 30, 1073741824",
      "token": "k\u2083"
    },
    {
      "name": "Triadic Filter Lambda",
      "description": "Open a triadic filter lambda - \u00a8\u2083...; Receives item, index, and vector.",
      "token": "\u00a8\u2083"
    }
  ],
  "169": [
    {
      "name": "Twenty Six",
      "description": "Push 26 to the stack",
      "token": "\u2084"
    }
  ],
  "170": [
    {
      "name": "Divisible By Five",
      "description": "Check if a is divisible by 5",
      "overloads": "num -> a % 5 == 0\nany -> a, len(a)",
      "token": "\u2085"
    }
  ],
  "171": [
    {
      "name": "Sixty Four",
      "description": "Push 64 to the stack",
      "token": "\u2086"
    }
  ],
  "172": [
    {
      "name": "One Twenty Eight",
      "description": "Push 128 to the stack",
      "token": "\u2087"
    }
  ],
  "173": [
    {
      "name": "Two Fifty Six",
      "description": "Push 256 to the stack",
      "token": "\u2088"
    }
  ],
  "174": [
    {
      "name": "Newline",
      "description": "Push a newline to the stack",
      "token": "\u00b6"
    },
    {
      "name": "512",
      "description": "512",
      "token": "k\u00b6"
    }
  ],
  "175": [
    {
      "name": "Join On Newlines",
      "description": "Join the top of the stack on newlines (insert \"\\n\" between items)",
      "overloads": "any -> \"\\\\n\".join(a)",
      "token": "\u204b"
    },
    {
      "name": "1024",
      "description": "1024",
      "token": "k\u204b"
    }
  ],
  "176": [
    {
      "name": "Vertical Join",
      "description": "Transpose (filling with spaces) and then join on newlines",
      "overloads": "any -> transpose a, join on newlines",
      "token": "\u00a7"
    }
  ],
  "177": [
    {
      "name": "Absolute Difference / Repeat / Regex match",
      "description": "Returns the absolute difference / Fills an array of a certain length / Does a regex match",
      "overloads": "num, num -> abs(a - b)\nnum, str -> [b] * a\nstr, num -> [a] * b\nstr, str -> regex.match(b, a) (first match of regex b on a)",
      "token": "\u03b5"
    },
    {
      "name": "32768",
      "description": "32768",
      "token": "k\u03b5"
    }
  ],
  "178": [
    {
      "name": "Factorial",
      "description": "Returns the factorial of the top of the stack",
      "overloads": "num -> factorial(a) (math.gamma(a + 1))\nstr -> a.sentence_case()",
      "token": "\u00a1"
    },
    {
      "name": "16384",
      "description": "16384",
      "token": "k\u00a1"
    }
  ],
  "179": [
    {
      "name": "Summate",
      "description": "Returns the sum of the top of the stack (reduce by addition)",
      "overloads": "num -> sum(digits of a)\nstr -> a\nlst -> sum(a)",
      "token": "\u2211"
    }
  ],
  "180": [
    {
      "name": "Cumulative Sum",
      "description": "Returns the sums of the prefixes of the top of the stack (cumulatively reduce by addition)",
      "overloads": "any -> cumulative_sum(a) ([a[0], a[0]+a[1], a[0]+a[1]+a[2], ...])",
      "token": "\u00a6"
    },
    {
      "name": "2048",
      "description": "2048",
      "token": "k\u00a6"
    }
  ],
  "181": [
    {
      "name": "All Equal",
      "description": "Returns whether all items are equal",
      "overloads": "any -> are all items in a equal?",
      "token": "\u2248"
    },
    {
      "name": "[0, 1]",
      "description": "[0, 1]",
      "token": "k\u2248"
    }
  ],
  "182": [
    {
      "name": "Sorting Lambda",
      "description": "Sort the top of the stack by the function \u00b5...;",
      "token": "\u00b5"
    }
  ],
  "183": [
    {
      "name": "Assign",
      "description": "The equivalent of a[b] = c",
      "overloads": "any, num, any -> a but item b (0-indexed) is set to c",
      "token": "\u0226"
    }
  ],
  "184": [
    {
      "name": "Bifurcate",
      "description": "Pushes the top of the stack then its reverse. Literally duplicate and reverse",
      "overloads": "any -> a, reversed(a)",
      "token": "\u1e02"
    },
    {
      "name": "Parentheses, square brackets, and braces",
      "description": "\"()[]{}\" (Brackets)",
      "token": "k\u1e02"
    },
    {
      "name": "Angle Bracketify",
      "description": "Enclose a string in angle brackets",
      "overloads": "any -> \"<\"\" + a + \">\"",
      "token": "\u00f8\u1e02"
    }
  ],
  "185": [
    {
      "name": "Counts",
      "description": "Returns a list of [item, count of item in the top of stack]",
      "overloads": "any -> [[x, a.count(x)] for x in a]",
      "token": "\u010a"
    },
    {
      "name": "Polynomial Expression From Coefficients",
      "description": "Get the polynomial expression from a list of coefficients",
      "overloads": "num -> polynomial of degree n\nstr -> a\nlst -> polynomial_expression(a)",
      "token": "\u2206\u010a"
    },
    {
      "name": "Center",
      "description": "Center a list of strings",
      "overloads": "lst -> center(a) (pad each item with spaces so all are the same length and centered)",
      "token": "\u00f8\u010a"
    },
    {
      "name": "Is Unordered?",
      "description": "Returns true if the item is not sorted in either descending or ascending order.",
      "overloads": "lst -> is a not sorted, in either increasing or decreasing order?",
      "token": "\u00de\u010a"
    }
  ],
  "186": [
    {
      "name": "Is Divisible / Arbitrary Duplicate / Ordered Group By",
      "description": "Returns whether two items are divisible / numerous copies of the top of the stack / groups by results of function preserving order",
      "overloads": "num, num -> a % b == 0\nnum, str -> a copies of b\nstr, num -> b copies of a\nstr, str -> b + \" \" + a\nany, fun -> group a by the results of b, order is preserved\nfun, any -> group b by the results of a, order is preserved",
      "token": "\u1e0a"
    },
    {
      "name": "Current day in the format MM/DD/YYYY",
      "description": "Current day in the format MM/DD/YYYY",
      "token": "k\u1e0a"
    },
    {
      "name": "Dyadic Run Length Decode",
      "description": "Run length decoding, convert list of characters and list of lengths to a string/list",
      "overloads": "lst, lst -> run length decode with items a and lengths b",
      "token": "\u00f8\u1e0a"
    },
    {
      "name": "Matrix Determinant",
      "description": "Calculate the determinant of a matrix.",
      "overloads": "lst -> determinant(a)",
      "token": "\u00de\u1e0a"
    }
  ],
  "187": [
    {
      "name": "Vyxal Exec / Reciprocal",
      "description": "Executes as Vyxal / Reciprocal of number",
      "overloads": "str -> vy_exec(a)\nnum -> 1 / a",
      "token": "\u0116"
    },
    {
      "name": "N Digits of Euler's Number (e) / Sympy Evaluate",
      "description": "Get the first n digits of Euler's number (e) / evaluate an expression as sympy",
      "overloads": "num -> first n digits of e\nstr -> evaluate(a)",
      "token": "\u2206\u0116"
    },
    {
      "name": "Separated Run Length Encoding",
      "description": "Run length encoding, convert from string/list to list of items and list of amounts. Equivalent to `\u00f8e\u2229\u00f7`",
      "overloads": "str -> run length encode a and push items and lengths",
      "token": "\u00f8\u0116"
    }
  ],
  "188": [
    {
      "name": "Generator / Modulo Index / Format",
      "description": "Make a generator from function a with initial vector b, or get every nth item or format numbers as decimals.",
      "overloads": "num, num -> sympy.N(a, b) (evaluate a to b decimal places)\nstr, num -> every bth letter of a (a[::b])\nnum, str -> every ath letter of b (b[::a])\nstr, str -> replace spaces in a with b\nlst, num -> every bth item of a (a[::b])\nnum, lst -> every ath item of b (b[::a])\nfun, lst -> generator from function a with initial vector b",
      "token": "\u1e1e"
    },
    {
      "name": "Replace First Occurrence",
      "description": "Replace the first instance of an item with another item",
      "overloads": "any, any, any -> a.replace_first(b, c)",
      "token": "\u00f8\u1e1e"
    },
    {
      "name": "Fill to make rectangular",
      "description": "Fill a 2-D list to make it rectangular",
      "overloads": "lst, any -> fill a with b to make it rectangular\nany, lst -> fill b with a to make it rectangular",
      "token": "\u00de\u1e1e"
    }
  ],
  "189": [
    {
      "name": "Group consecutive",
      "description": "Group consecutive identical items",
      "overloads": "lst -> group consecutive identical items\nstr -> group consecutive identical characters\nnum -> group consecutive identical digits",
      "token": "\u0120"
    }
  ],
  "190": [
    {
      "name": "Head Remove / Behead",
      "description": "All but the first item of a list / Drop 1",
      "overloads": "lst -> a[1:] or [] if empty\nstr -> a[1:] or '' if empty\nnum -> remove first digit or do nothing if <1",
      "token": "\u1e22"
    }
  ],
  "191": [
    {
      "name": "Index into or collect while unique",
      "description": "Index into list at indices / Collect values while values are unique",
      "overloads": "any, lst -> [a[item] for item in b]\nany, fun -> apply b on a and collect unique values",
      "token": "\u0130"
    },
    {
      "name": "First n Items and Rest",
      "description": "Push the first n items of a, then the rest of a",
      "overloads": "lst, int -> a[:b], a[b:]\nint, lst -> b[:a], b[a:]",
      "token": "\u00de\u0130"
    }
  ],
  "192": [
    {
      "name": "Transliterate",
      "description": "Replace each item of one value in another value with the corresponding element from a third value",
      "overloads": "any, any, any -> transliterate(a,b,c) (in a, replace b[0] with c[0], b[1] with c[1], b[2] with c[2], ...)\nfun, fun, any -> call b on c until a(c) is falsy",
      "token": "\u013f"
    },
    {
      "name": "Least Common Multiple",
      "description": "Get the least common multiple of two numbers",
      "overloads": "lst -> lcm(a)\nnum, num -> lcm(a, b)",
      "token": "\u2206\u013f"
    }
  ],
  "193": [
    {
      "name": "Insert",
      "description": "Insert a value at a specified index / Map a function over every nth item of a list",
      "overloads": "any, num, any -> a.insert(b,c) (insert c at position b in a)\nany, num, fun -> c mapped over every bth item of a ([c(v) if i%b==0 else v for i,v in enumerate(a)])",
      "token": "\u1e40"
    },
    {
      "name": "Flip Brackets Vertical Mirror",
      "description": "Vertical mirror, and swap brackets and slashes in the second half.",
      "overloads": "any -> vertical_mirror(a, mapping = flip brackets and slashes)",
      "token": "\u00f8\u1e40"
    },
    {
      "name": "Matrix Multiplication",
      "description": "Multiply two matrices together.",
      "overloads": "lst, lst -> matrix multiply a and b",
      "token": "\u00de\u1e40"
    }
  ],
  "194": [
    {
      "name": "Integer partitions",
      "description": "Integer partitions / join by space",
      "overloads": "num -> integer_partitions(a) (integer partitions)\nany -> \" \".join(a) (join by space)",
      "token": "\u1e44"
    },
    {
      "name": "4096",
      "description": "4096",
      "token": "k\u1e44"
    },
    {
      "name": "Replace Nth Occurrence",
      "description": "Replace the nth instance of an item with another item. If n is negative, then replaces the last nth instance.",
      "overloads": "any, any, any, any -> a.replace_nth_occurrence(b, c, d)",
      "token": "\u00f8\u1e44"
    },
    {
      "name": "Infinite Integer Partitions",
      "description": "Infinite list of sets of positive integers (equivalent to \u00de\u221ev\u1e44\u00def)",
      "token": "\u00de\u1e44"
    }
  ],
  "195": [
    {
      "name": "Over",
      "description": "Push the second-last item of stack to the top",
      "token": "\u022e"
    },
    {
      "name": "Is Ordered?",
      "description": "Returns true if the item is sorted in either descending or ascending order.",
      "overloads": "lst -> is a sorted in increasing or decreasing order?",
      "token": "\u00de\u022e"
    }
  ],
  "196": [
    {
      "name": "Permutations",
      "description": "Get all permutations of a value",
      "overloads": "any -> permutations(a) (get all permutations)",
      "token": "\u1e56"
    },
    {
      "name": "Nested brackets",
      "description": "String of all brackets nested (\"([{<>}])\")",
      "token": "k\u1e56"
    },
    {
      "name": "Next Prime After a Number / Discriminant of Polynomial",
      "description": "Get the next prime number after a given number / the discriminant of a polynomial",
      "overloads": "num -> next_prime(a)\nstr -> discriminant(a)",
      "token": "\u2206\u1e56"
    },
    {
      "name": "String Partitions",
      "description": "All partitions of a string/list",
      "overloads": "any -> all_partitions(a)",
      "token": "\u00f8\u1e56"
    }
  ],
  "197": [
    {
      "name": "Reverse",
      "description": "Reverse a value",
      "overloads": "any -> reversed(a)",
      "token": "\u1e58"
    },
    {
      "name": "Roman Numerals",
      "description": "IVXLCDM",
      "token": "k\u1e58"
    },
    {
      "name": "Random Float",
      "description": "Get a random float in the range [0, 1), pseudo random number",
      "overloads": "num -> random.random()",
      "token": "\u2206\u1e58"
    },
    {
      "name": "Roman Numeral",
      "description": "Convert a decimal to its roman numeral representation / Convert a roman numeral to its decimal representation.",
      "overloads": "num -> to_roman_numeral(a)\nstr -> from_roman_numeral(a)",
      "token": "\u00f8\u1e58"
    },
    {
      "name": "Is Sorted in Reverse?",
      "description": "Returns true if an item is sorted in descending order using default sorting rules.",
      "overloads": "lst -> is a sorted in decreasing order?",
      "token": "\u00de\u1e58"
    }
  ],
  "198": [
    {
      "name": "Vectorised sums",
      "description": "Sum of each item in a list",
      "token": "\u1e60"
    },
    {
      "name": "Is Sorted?",
      "description": "Returns true if an item is sorted in ascending order using default sorting rules.",
      "overloads": "lst -> is a sorted in increasing order?",
      "token": "\u00de\u1e60"
    }
  ],
  "199": [
    {
      "name": "Tail Remove",
      "description": "Cut off the last item of a list",
      "overloads": "any -> a[:-1] (all but the last item)",
      "token": "\u1e6a"
    },
    {
      "name": "Transpose With Filler",
      "description": "Transpose a matrix, with a filler value for empty cells.",
      "overloads": "lst, any -> transpose a, with filler value b",
      "token": "\u00de\u1e6a"
    }
  ],
  "200": [
    {
      "name": "Split And Keep Delimiter",
      "description": "Split a value and keep the delimiter",
      "overloads": "any, any -> a.split_and_keep_delimiter(b) (split and keep the delimiter)\nfun, any -> apply a to every second item of b starting on the first item",
      "token": "\u1e86"
    }
  ],
  "201": [
    {
      "name": "Cartesian Product / Fixpoint",
      "description": "Take the Cartesian Product of two values, or apply a function until there is no change. If arguments are numbers, turns them into ranges.\n",
      "overloads": "any, any -> cartesian-product(a,b)\nfun, any -> apply a on b until b does not change",
      "token": "\u1e8a"
    },
    {
      "name": "Cartesian Power",
      "description": "Cartesian power, cartesian product with self n times. If both arguments are numbers, turns the left into a range.\n",
      "overloads": "any, num -> cartesian_power(a, b)\nnum, any -> cartesian_power(b, a)",
      "token": "\u00de\u1e8a"
    }
  ],
  "202": [
    {
      "name": "Slice Until",
      "description": "Slice a list until a certain index / find all results for a regex match",
      "overloads": "any, num -> a[0:b] (slice until b)\nnum, any -> b[0:a] (slice until a)\nstr, str -> regex.findall(pattern=a,string=b) (find all matches for a regex)\nany, fun -> take results from a while b(x) is truthy\nfun, any -> take results from b while a(x) is truthy",
      "token": "\u1e8e"
    }
  ],
  "203": [
    {
      "name": "Slice From One Until",
      "description": "Slice from index 1 until a number / get groups of a regex match",
      "overloads": "any, num -> a[1:b] (slice from 1 until b)\nnum, any -> b[1:a] (slice from 1 until a)\nstr, str -> regex.match(pattern=a,string=b).groups() (Get groups for a regex match)",
      "token": "\u017b"
    },
    {
      "name": "Sort Every Level",
      "description": "Sort every level of a multidimensional list",
      "overloads": "lst -> sort every level",
      "token": "\u00de\u017b"
    }
  ],
  "204": [
    {
      "name": "Parallel Apply",
      "description": "Parallel apply two elements to the top of the stack",
      "usage": "\u208c<element><element>",
      "token": "\u208c"
    }
  ],
  "205": [
    {
      "name": "Parallel Apply Wrap",
      "description": "Parallel apply two elements and wrap the results in a list",
      "usage": "\u208d<element><element>",
      "token": "\u208d"
    }
  ],
  "206": [
    {
      "name": "First Input",
      "description": "Push the first input",
      "token": "\u2070"
    },
    {
      "name": "Lowercase consonants with y",
      "description": "bcdfghjklmnpqrstvwxyz",
      "token": "k\u2070"
    }
  ],
  "207": [
    {
      "name": "Second Input",
      "description": "Push the second input",
      "token": "\u00b9"
    },
    {
      "name": "Lowercase consonants without y",
      "description": "bcdfghjklmnpqrstvwxz",
      "token": "k\u00b9"
    }
  ],
  "208": [
    {
      "name": "Square",
      "description": "Square a number / Format a string into a square",
      "overloads": "num -> a ** 2 (squared)\nstr -> a formatted as a square (list of sqrt(len(a)) strings, each sqrt(len(a)) long, such that joining the strings and removing spaces in the end gives a)",
      "token": "\u00b2"
    },
    {
      "name": "http://www.",
      "description": "http://www.",
      "token": "k\u00b2"
    },
    {
      "name": "Perfect Square?",
      "description": "Is the number a perfect square? (1, 4, 9, 16, 25, 36)",
      "overloads": "num -> is_perfect_square(a)",
      "token": "\u2206\u00b2"
    }
  ],
  "209": [
    {
      "name": "Shift",
      "description": "Shift the top of stack two values down",
      "overloads": "any, any, any -> c,a,b (shift)",
      "token": "\u2207"
    }
  ],
  "210": [
    {
      "name": "Ceiling",
      "description": "Take the ceiling of a number / Imaginary part of complex number / split a string on spaces",
      "overloads": "num -> ceil(a) (ceiling)\ncomplex -> imaginary part of a\nstr -> split on spaces",
      "token": "\u2308"
    }
  ],
  "211": [
    {
      "name": "Floor",
      "description": "Floor a number / real part of complex number / extract the integer part of a string",
      "overloads": "num -> floor(a) (floor)\ncomplex -> real part of a\nstr -> integer part of a",
      "token": "\u230a"
    }
  ],
  "212": [
    {
      "name": "Deltas",
      "description": "Deltas (consecutive differences)",
      "overloads": "any -> deltas(a) ([a[1] - a[0], a[2] - a[1], ...])",
      "token": "\u00af"
    }
  ],
  "213": [
    {
      "name": "Sign",
      "description": "Get the sign of a number",
      "overloads": "num -> sign_of(a) (positive = 1, 0 = 0; negative = -1)\nstr -> is a numeric",
      "token": "\u00b1"
    },
    {
      "name": "Copy Sign",
      "description": "Copy the sign of one number to the other",
      "overloads": "num, num -> math.copysign(a, b)",
      "token": "\u2206\u00b1"
    }
  ],
  "214": [
    {
      "name": "Print Without Newline",
      "description": "Print a value without a trailing newline",
      "token": "\u20b4"
    },
    {
      "name": "65536",
      "description": "65536",
      "token": "k\u20b4"
    }
  ],
  "215": [
    {
      "name": "Print Without Popping",
      "description": "Print a value without popping the stack",
      "token": "\u2026"
    },
    {
      "name": "Evenly Distribute",
      "description": "Evenly distribute a number over elements of a list",
      "overloads": "list, num -> [i + b // len(a) for i in a], with any excess added to the last element, such that the sum of the list increases by b",
      "token": "\u00de\u2026"
    },
    {
      "name": "Print With Space Without Popping",
      "description": "Print a value with a space after it, without popping it",
      "overloads": "any -> print a followed by a space, then push a",
      "token": "\u00a8\u2026"
    }
  ],
  "216": [
    {
      "name": "Input List",
      "description": "All inputs wrapped in a list",
      "token": "\u25a1"
    },
    {
      "name": "Directions",
      "description": "Cardinal directions, [[0,1],[1,0],[0,-1],[-1,0]]",
      "token": "k\u25a1"
    },
    {
      "name": "Identity Matrix of Size n",
      "description": "A matrix with 1s on the main diagonal and zeroes elsewhere",
      "overloads": "num -> the a x a identity matrix",
      "token": "\u00de\u25a1"
    },
    {
      "name": "Parse direction arrow to integer",
      "description": "Map characters in `>^<v` to integers (0, 1, 2, 3 respectively)",
      "overloads": "str -> map on a, replacing `>^<v` with integers, and others with -1 ([`>^<v`.find(a[0]), `>^<v`.find(a[1]), ...])",
      "token": "\u00a8\u25a1"
    }
  ],
  "217": [
    {
      "name": "Right Bit Shift",
      "description": "Right-bitshift a value / right-justify a string",
      "overloads": "num, num -> a << b\nnum, str -> a.rjust(b)\nstr, num -> b.rjust(a)\nstr, str -> a.rjust(len(b)-len(a))",
      "token": "\u21b3"
    },
    {
      "name": "https://www.",
      "description": "https://www.",
      "token": "k\u21b3"
    },
    {
      "name": "Custom Pad Left",
      "description": "Pad a string to the left with a certain character",
      "overloads": "any, str, num -> pad a to the left with c so a has length b\nany, num, str -> pad a to the left with b so a has length c",
      "token": "\u00f8\u21b3"
    }
  ],
  "218": [
    {
      "name": "Left Bit Shift",
      "description": "Left-bitshift a value / left-justify a string",
      "overloads": "num, num -> a >> b\nnum, str -> a.ljust(b)\nstr, num -> b.ljust(a)\nstr, str -> a.ljust(len(b)-len(a))",
      "token": "\u21b2"
    },
    {
      "name": "Custom Pad Right",
      "description": "Pad a string to the right with a certain character",
      "overloads": "any, str, num -> pad a to the right with c so a has length b\nany, num, str -> pad a to the right with b so a has length c",
      "token": "\u00f8\u21b2"
    }
  ],
  "219": [
    {
      "name": "Bitwise And",
      "description": "Performs bitwise and between two numbers / centre a string",
      "overloads": "num, num -> a & b\nnum, str -> b.center(a)\nstr, num -> a.center(b)\nstr, str -> a.center(len(b) - len(a))",
      "token": "\u22cf"
    }
  ],
  "220": [
    {
      "name": "Bitwise Or",
      "description": "Performs bitwise or between two numbers / Removes a character at nth index / Merges strings on longest common prefix and suffix",
      "overloads": "num, num -> a | b\nnum, str -> b[:a]+b[a+1:]\nstr, num -> a[:b]+a[b+1:]\nstr, str -> merge_join(a,b)",
      "token": "\u22ce"
    }
  ],
  "221": [
    {
      "name": "Bitwise Xor",
      "description": "Performs bitwise xor between two numbers / appends n spaces to a string / prepends n characters to a string / Levenshtein Distance",
      "overloads": "num, num -> a ^ b\nnum, str -> \\\" \\\" * a + b\nstr, num -> a + \\\" \\\" * b\nstr, str -> levenshtein_distance(a,b)",
      "token": "\ua60d"
    }
  ],
  "222": [
    {
      "name": "Bitwise Not",
      "description": "Performs bitwise not on a number / check if any letters are uppercase / keep only truthy elements of a list",
      "overloads": "num -> ~a\nstr -> any_upper(a)\nlst -> keep truthy",
      "token": "\ua71d"
    }
  ],
  "223": [
    {
      "name": "Random Choice",
      "description": "Random choice of single item from array",
      "overloads": "lst -> random.choice(a)\nnum -> Random integer from 0 to a",
      "token": "\u2105"
    },
    {
      "name": "http://",
      "description": "http://",
      "token": "k\u2105"
    },
    {
      "name": "Random Permutation",
      "description": "Random permutation of a list / string",
      "overloads": "any -> random permutation of a",
      "token": "\u00de\u2105"
    }
  ],
  "224": [
    {
      "name": "Lesser Than or Equal To",
      "description": "a is lesser than or equal to b?",
      "overloads": "any, any -> a <= b",
      "token": "\u2264"
    },
    {
      "name": "Opening brackets (with <)",
      "description": "\"([{<\" (Fish bones :P)",
      "token": "k\u2264"
    }
  ],
  "225": [
    {
      "name": "Greater Than or Equal To",
      "description": "a is greater than or equal to b?",
      "overloads": "any, any -> a >= b",
      "token": "\u2265"
    },
    {
      "name": "Closing brackets",
      "description": "\")]}\" (Close brackets)",
      "token": "k\u2265"
    }
  ],
  "226": [
    {
      "name": "Not Equal To",
      "description": "a is not equal to b?",
      "overloads": "any, any -> a != b",
      "token": "\u2260"
    }
  ],
  "227": [
    {
      "name": "Exactly Equal To",
      "description": "a equal to b? (non-vectorizing)",
      "overloads": "any, any -> a == b",
      "token": "\u207c"
    }
  ],
  "228": [
    {
      "name": "Reduce by",
      "description": "Reduce by an element",
      "usage": "\u0192<element>",
      "token": "\u0192"
    }
  ],
  "229": [
    {
      "name": "Scan by",
      "description": "Cumulatively reduce by an element",
      "usage": "\u0256<element>",
      "token": "\u0256"
    }
  ],
  "230": [
    {
      "name": "Set Union",
      "description": "Merge two arrays without duplicates",
      "overloads": "any, any -> list(set(a).union(set(b)))",
      "token": "\u222a"
    },
    {
      "name": "Lowercase Vowels With Y",
      "description": "Lowercase vowels with y, \"aeiouy\"",
      "token": "k\u222a"
    },
    {
      "name": "Multiset Union",
      "description": "Similar to set union, but with duplicates allowed.",
      "overloads": "lst, lst -> multiset union of a and b",
      "token": "\u00de\u222a"
    }
  ],
  "231": [
    {
      "name": "Transpose",
      "description": "Transpose an array",
      "overloads": "any -> transposed array",
      "token": "\u2229"
    },
    {
      "name": "Vowels With Y",
      "description": "Vowels with y, \"aeiouyAEIOUY\"",
      "token": "k\u2229"
    },
    {
      "name": "Multiset Intersection",
      "description": "Similar to set intersection, but with duplicates allowed.",
      "overloads": "lst, lst -> multiset intersection of a and b",
      "token": "\u00de\u2229"
    }
  ],
  "232": [
    {
      "name": "Symmetric Set difference",
      "description": "Uncommon elements of two arrays",
      "overloads": "any, any -> list(set(a) ^ set(b))",
      "token": "\u228d"
    },
    {
      "name": "Uppercase Vowels With Y",
      "description": "Uppercase vowels with y, \"AEIOUY\"",
      "token": "k\u228d"
    },
    {
      "name": "Multiset Symmetric Difference",
      "description": "Similar to set symmetric difference, but with duplicates allowed.",
      "overloads": "lst, lst -> multiset symmetric difference of a and b",
      "token": "\u00de\u228d"
    }
  ],
  "233": [
    {
      "name": "Set Register",
      "description": "Set the register to argument value",
      "overloads": "any -> set_register(a)",
      "token": "\u00a3"
    },
    {
      "name": "Star Map",
      "description": "Reduce each pair of two lists zipped together by a function. Equivalent to Zv\u0192",
      "usage": "\u00a8\u00a3<element>",
      "token": "\u00a8\u00a3"
    }
  ],
  "234": [
    {
      "name": "Push Register",
      "description": "Push the current register value",
      "token": "\u00a5"
    }
  ],
  "235": [
    {
      "name": "Grade Up",
      "description": "Indices of elements to sort in ascending order / uppercase / increment number twice",
      "overloads": "lst -> graded_up(a)\nstr -> a.upper()\nnum -> a + 2",
      "token": "\u21e7"
    },
    {
      "name": "Is Strictly Ascending?",
      "description": "Returns true if the list is in strictly ascending order.",
      "overloads": "lst -> is a in strictly ascending order?",
      "token": "\u00de\u21e7"
    }
  ],
  "236": [
    {
      "name": "Grade Down",
      "description": "Indices of elements to sort in descending order / lowercase / decrement number twice",
      "overloads": "lst -> graded_down(a)\nstr -> a.lower()\nnum -> a - 2",
      "token": "\u21e9"
    },
    {
      "name": "Is Strictly Descending?",
      "description": "Returns true if the list is in strictly descending order.",
      "overloads": "lst -> is a in strictly descending order?",
      "token": "\u00de\u21e9"
    }
  ],
  "237": [
    {
      "name": "Remove non-alphabets",
      "description": "Remove non-alphabetical characters / power with base 2",
      "overloads": "str -> filter(isalpha, a)\nnum -> 2 ** a",
      "token": "\u01cd"
    }
  ],
  "238": [
    {
      "name": "Nth prime",
      "description": "nth prime / all substrings",
      "overloads": "str -> substrings(a)\nnum -> nth_prime(a)",
      "token": "\u01ce"
    }
  ],
  "239": [
    {
      "name": "Prime factorization",
      "description": "prime factorization / append first element",
      "overloads": "num -> prime_factorization(a) (distinct prime factors)\nstr -> a + a[0]\nlst -> a + [a[0]]",
      "token": "\u01cf"
    }
  ],
  "240": [
    {
      "name": "Prime factors",
      "description": "all prime factors / Title Case string",
      "overloads": "num -> prime_factors(a) (prime factors possibly with repetition)\nstr -> title_case(a)",
      "token": "\u01d0"
    },
    {
      "name": "Prime Exponents",
      "description": "Get the exponents of prime factors of a number",
      "overloads": "num -> prime_exponents(a) (in the order of prime_factors(a))",
      "token": "\u2206\u01d0"
    }
  ],
  "241": [
    {
      "name": "Multiplicity / Remove Fixpoint / First Truthy Index Under Function",
      "description": "Order, Multiplicity, Valuation / remove till fixpoint / First truthy index under function application",
      "overloads": "num, num -> multiplicity(a,b)\nstr, str -> remove_till_fixpoint(a,b)\nfun, any -> first index in a where b(x) is truthy (shortcut for \u1e1fh)",
      "token": "\u01d1"
    }
  ],
  "242": [
    {
      "name": "Modulo 3",
      "description": "Modulo 3 / Split into Length 2",
      "overloads": "num -> a % 3\nstr -> a split into chunks of length 2",
      "token": "\u01d2"
    }
  ],
  "243": [
    {
      "name": "Rotate Left",
      "description": "Rotate Left / Rotate Left Once",
      "overloads": "any, num -> rotate_left(a,b)\nany, any -> a,(b[1:]+b[:1])",
      "token": "\u01d3"
    },
    {
      "name": "Connected Uniquify",
      "description": "Remove occurences of adjacent duplicates in a list",
      "overloads": "any -> connected uniquify a (`\u0120vh`)",
      "token": "\u00de\u01d3"
    }
  ],
  "244": [
    {
      "name": "Rotate Right",
      "description": "Rotate Right / Rotate Right Once",
      "overloads": "any, num -> rotate_right(a,b)\nany, any -> a,(b[-1:]+b[:-1])",
      "token": "\u01d4"
    },
    {
      "name": "Untruth",
      "description": "Return a list with 1s at the (0-indexed) indices in a, and 0s elsewhere",
      "overloads": "any -> [int(x in a) for x in range(max(a))]",
      "token": "\u00de\u01d4"
    }
  ],
  "245": [
    {
      "name": "One Element Lambda",
      "description": "One Element lambda function (prefix)",
      "token": "\u207d"
    }
  ],
  "246": [
    {
      "name": "Two Element Lambda",
      "description": "Two Element lambda function (prefix)",
      "token": "\u2021"
    }
  ],
  "247": [
    {
      "name": "Three Element Lambda",
      "description": "Three Element lambda function (prefix)",
      "token": "\u226c"
    }
  ],
  "248": [
    {
      "name": "Index of next character in codepage",
      "description": "Compressed number in 1-128 (prefix)",
      "token": "\u207a"
    }
  ],
  "249": [
    {
      "name": "Split On newlines",
      "description": "Split on newlines / Power with base 10",
      "overloads": "str -> a.split(\"\\n\")\nnum -> 10 ** a",
      "token": "\u21b5"
    }
  ],
  "250": [
    {
      "name": "Push To Global Array",
      "description": "Push to global array (no popping)",
      "token": "\u215b"
    }
  ],
  "251": [
    {
      "name": "Pop From Global Array",
      "description": "Pop from global array, push to stack",
      "token": "\u00bc"
    }
  ],
  "252": [
    {
      "name": "Push Global Array",
      "description": "Push global array, no modification of global array",
      "token": "\u00be"
    },
    {
      "name": "Empty the Global Array",
      "description": "Empty the global array.",
      "token": "\u00de\u00be"
    }
  ],
  "253": [
    {
      "name": "Product of Array / Cartesian product over list",
      "description": "Product of Array / Cartesian product over a list of lists",
      "overloads": "lst[num] -> reduce list by multiplication\nlst[str|lst] -> reduce list by Cartesian product",
      "token": "\u03a0"
    },
    {
      "name": "Closing brackets (with >)",
      "description": "\")]}>\" (Closing brackets)",
      "token": "k\u03a0"
    }
  ],
  "254": [
    {
      "name": "Rotate Stack Left",
      "description": "Rotate Stack Left",
      "token": "\u201e"
    }
  ],
  "255": [
    {
      "name": "Rotate Stack Right",
      "description": "Rotate Stack Right",
      "token": "\u201f"
    }
  ]
}
