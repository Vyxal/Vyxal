codepage ::= (* any character in the codepage *)
pos_digit ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
digit ::= 0 | pos_digit
number_part ::= 0 | pos_digit {digit}
number_decimal ::= [number_part] "." [number_part]
number_real ::= 0 | number_part | number_decimal
number ::= [number_real] "ı" [number_real]
string ::= '"' {codepage} ('"' | "„" | "”" | "“")
single_char_string ::= "'" codepage
two_char_string ::= "ᶴ" codepage codepage
two_char_number ::= "~" codepage codepage
structure_open ::= "[" | "{" | "(" | "#{" | "Ḍ" | "Ṇ" | "λ" | "ƛ" | "Ω" | "₳" | "µ"
structure_single_close ::= "}"
structure_double_close ::= ")"
structure_all_close ::= "]"
list_open ::= "#[" | "⟨"
list_close ::= "#]" | "⟩"
digraph ::= (("∆" | "ø" | "Þ" | "k") codepage) | "#" codepage - "[]$!=#>@{"
sugar_trigraph ::= "#" ("." | "," | "^") codepage
syntax_trigraph ::= "#:" codepage

elementChar ::= (* any character/symbol corresponding to an element *) | (* any niladic literal *)
1modChar ::= (* any charcter/symbol corresponding to a monadic modifier *)
2modChar ::= (* any charcter/symbol corresponding to a dyadic modifier *)
3modChar ::= (* any charcter/symbol corresponding to a triadic modifier *)
4modChar ::= (* any charcter/symbol corresponding to a tetradic modifier *)
specialModChar ::= (* any charcter/symbol corresponding to a special modifier *)

structure ::= (structure_open [{element} {"|" {element}}] [structure_single_close]) | 
              (structure_open structure_open [{element} {"|" {element}}]structure_double_close structure_double_close) | 
              ({structure_open} [{element} {"|" {element}}] structure_all_close)

lambda ::= "λ" [lambda_args "|"] {element} [structure_single_close]
lambda_args ::= "!" | {number_part | variable_name | "*"}

variable_name ::= "a-Z" {"a-Z" | "0-9" | "_"}
variable_get ::= "#$" variable_name
variable_assign ::= "#=" variable_name
variable_set_const ::= "#!" variable_name
variable_aug_assign ::= element "#>" variable_name
variable_unpack ::= "#[" {variable_unpack_expr} "]"
variable_unpack_expr ::= variable_name | "[" variable_unpack_expr "]"

context_index ::= "¤" number_part

list ::= list_open [element {"|" element}] list_close

custom_definition ::= "#::" ("E" | "M") (variable_name | elementChar) "|" lambda_args {element} [structure_single_close]
record_definition ::= "#::R" variable_name "|" {[element] (variable_get | variable_assign | variable_set_const)} [structure_single_close]
extension_method ::= "#::+" (variable_name | elementChar) "|" variable_name "|" variable_name {"|" variable_name "|" variable_name}  "|" {element} [structure_single_close]

custom_element = "#:@" variable_name
custom_modifier = "#:`" variable_name

element ::= elementChar | 1modChar element | 2modChar element element | 
            3modChar element element element | 4modChar element element element element |
            structure | variable_assign | variable_get | variable_aug_assign | lambda | variable_unpack |
            context_index | list | custom_element | custom_modifier

program ::= {element | custom_definition | record_definition | extension_method}

(* the special modifiers don't have actual behaviour yet *)
(* this also does not account for arity grouping *)
