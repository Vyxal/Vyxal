{"elements":[{"name":"2 Power | Evaluate","symbol":"E","keywords":["two^","two**","eval"],"overloads":["a: num -> 2^a","a: str -> evaluate (not execute) a"],"vectorises":true},{"name":"Permutations","symbol":"Ṗ","keywords":["permutations","perms"],"overloads":["a: lst -> Permutations of a"],"vectorises":false},{"name":"Is Even / Split on Newlines","symbol":"e","keywords":["even?","even","is-even?","split-on-newlines","newline-split","split-newlines"],"overloads":["a: num -> a % 2 == 0","a: str -> a split on newlines"],"vectorises":true},{"name":"Digits, Uppercase, Lowercase","symbol":"kR","keywords":["digits-uppercase-lowercase","digs-upper-lower","o9AZaz","o-9A-Za-z"],"overloads":["-> \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\""],"vectorises":false},{"name":"Bitwise Not","symbol":"⌐","keywords":["bitwise-not"],"overloads":["a: num -> ~a"],"vectorises":true},{"name":"Printable Ascii","symbol":"kP","keywords":["printable-ascii","all-ascii"],"overloads":["-> All of printable ascci. That excludes newline"],"vectorises":false},{"name":"Ends","symbol":"Þh","keywords":["ends","sides","edges"],"overloads":["a: lst -> [a[0], a[-1]]","a: str -> [a[0], a[-1]]","a: cmx -> [real, imaginary]","a: num -> [digit[0], digit[-1]]"],"vectorises":false},{"name":"Return Statement","symbol":"X","keywords":["return","ret"],"overloads":["a -> return a"],"vectorises":false},{"name":"Radians to Degrees","symbol":"∆ḋ","keywords":["rad2deg","rad-to-deg"],"overloads":["a: num -> a from radians to degrees (a * 180 / pi)"],"vectorises":true},{"name":"Increment","symbol":"ꜝ","keywords":["incr","increment"],"overloads":["a: num -> a + 1"],"vectorises":true},{"name":"Dot Product | To Bijective Base | First Index Where Predicate Truthy","symbol":"ḋ","keywords":["dot-product","bijective-base","dot-prod","first-index-where","_*"],"overloads":["a: lst, b: lst -> Dot product of a and b","a: num, b: num -> Convert a to bijective base b","a: lst, b: fun -> First index of a where b is truthy"],"vectorises":false},{"name":"[Internal Use] Apply Without Popping (Element Form)","symbol":"#~","keywords":[],"overloads":["*a, f -> f applied to the stack without popping items. Use the modifier instead."],"vectorises":false},{"name":"Split","symbol":"s","keywords":["split"],"overloads":["a: any, b: any -> split a by b"],"vectorises":false},{"name":"Digits","symbol":"kd","keywords":["digits","digs","o-9"],"overloads":["-> \"0123456789\""],"vectorises":false},{"name":"Cube | Threes","symbol":"⁻","keywords":["cube","threes"],"overloads":["a: num -> a ** 3","a: str -> a split into chunks of length 3"],"vectorises":true},{"name":"Loop Continue","symbol":"#x","keywords":["continue"],"overloads":[" -> continue the current loop"],"vectorises":false},{"name":"Uppercase Alphabet","symbol":"kA","keywords":["uppercase-alphabet","uppercase-alpha","A->Z","A-Z","amazon"],"overloads":["-> \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""],"vectorises":false},{"name":"Loop Break","symbol":"#X","keywords":["break"],"overloads":[" -> break out of the current loop"],"vectorises":false},{"name":"Recursion | Recurse","symbol":"x","keywords":["recurse"],"overloads":[" -> call the current function recursively"],"vectorises":false},{"name":"Divide | Split","symbol":"÷","keywords":["divide","div","str-split","re-split","str-n-pieces","n-strings","str-pieces","string-pieces"],"overloads":["a: num, b: num -> a / b","a: str, b: num -> a split into b equal sized chunks, with the last chunk potentially smaller","a: num, b: str -> b split into a equal sized chunks, with the last chunk potentially smaller","a: str, b: str -> Split a on the regex b"],"vectorises":true},{"name":"Ten","symbol":"₀","keywords":["ten","l0"],"overloads":["-> 10"],"vectorises":false},{"name":"Lowercase Alphabet Reversed","symbol":"kz","keywords":["lowercase-alphabet-reversed","lowercase-alpha-reversed","z->a","nozama"],"overloads":["-> \"zyxwvutsrqponmlkjihgfedcba\""],"vectorises":false},{"name":"Punctuation","symbol":"kp","keywords":["punctuation","punct"],"overloads":["-> All punctuation characters"],"vectorises":false},{"name":"10000","symbol":"k2","keywords":["ten-thousand","l0000","l0k"],"overloads":["-> 10000"],"vectorises":false},{"name":"Absolute Value | Keep Alphabet Characters","symbol":"Ȧ","keywords":["abs","absolute-value","keep-alphabet"],"overloads":["a: num -> |a|","a: str -> keep alphabet characters of a"],"vectorises":true},{"name":"Hyperbolic Tangent","symbol":"∆T","keywords":["tanh","hyperbolic-tangent"],"overloads":["a: num -> tanh(a)"],"vectorises":true},{"name":"Lowercase Alphabet","symbol":"ka","keywords":["lowercase-alphabet","lowercase-alpha","a->z","a-z"],"overloads":["-> \"abcdefghijklmnopqrstuvwxyz\""],"vectorises":false},{"name":"Head Extract Under","symbol":"Ḥ","keywords":["head-extract-under","split-at-head-under","head-extract-swap","headless-swap","head-swap"],"overloads":["a: lst|str -> Push a[1:], then a[0] onto the stack"],"vectorises":false},{"name":"Is Prime? | Quine Cheese","symbol":"Ṅ","keywords":["prime?","quineify"],"overloads":["a: num -> is a prime?","a: str -> quote a and prepend to a"],"vectorises":true},{"name":"Second Input","symbol":"¹","keywords":["second-input","input-1"],"overloads":["The second input to the program"],"vectorises":false},{"name":"Sort by Length | Regex Escape","symbol":"Ḷ","keywords":["sort-by-length","sort-by-len","order-by-length","order-by-len","length-sort","len-sort","re-escape","regex-escape"],"overloads":["a: lst -> sort a by length","a: str -> escape a for regex"],"vectorises":false},{"name":"Group by Function Result | Greatest Common Divisor | Find all overlapping regex matches","symbol":"Ġ","keywords":["group-by","gcd","re-find-overlapping","regex-find-overlapping","re-find-overlap","regex-find-overlap"],"overloads":["a: any, b: fun -> group a by the results of b","a: fun, b: any -> group b by the results of a","a: num, b: num -> gcd(a, b)","a: lst[num], b: num -> gcd of b and all elements of a","a: lst[num] -> gcd of all items in a.","a: str, b: str -> all overlapping regex matches of b in a (similar to `y` but with overlaps) (JVM/JS Only)","a: str, b: lst[str] -> vectorised string overload of the above","a: lst, b: str -> vectorised pattern overload of the above"],"vectorises":false},{"name":"Transliterate | Call While","symbol":"ŀ","keywords":["transliterate","call-while"],"overloads":["any a, any b, any c -> transliterate(a,b,c) (in a, replace b[0] with c[0], b[1] with c[1], b[2] with c[2], ...)","a: fun, b: fun, c: any -> call b on c until a(c) is falsy"],"vectorises":false},{"name":"Modulo | String Formatting","symbol":"%","keywords":["mod","modulo","str-format","format","%","strfmt"],"overloads":["a: num, b: num -> a % b","a: str, b: any -> a.format(b) (replace %s with b if scalar value or each item in b if vector)"],"vectorises":false},{"name":"Length of Consecutive Groups","symbol":"†","keywords":["len-consecutive","gvl","gavel"],"overloads":["a: any -> lengths of consecutive groups of a"],"vectorises":false},{"name":"One hundred","symbol":"₅","keywords":["one-hundred","l00"],"overloads":["-> 100"],"vectorises":false},{"name":"Exponentation | Remove Nth Letter | Trim","symbol":"*","keywords":["exp","**","pow","exponent","remove-letter","str-trim"],"overloads":["a: num, b: num -> a ^ b","a: str, b: num -> a with the bth letter removed","a: num, b: str -> b with the ath letter removed","a: str, b: str -> trim b from both sides of a"],"vectorises":true},{"name":"Sine","symbol":"∆s","keywords":["sin","sine"],"overloads":["a: num -> sin(a)"],"vectorises":true},{"name":"Upper and Lowercase Alphabet Reversed","symbol":"kl","keywords":["upper-and-lowercase-alphabet-reversed","upper-and-lowercase-alpha-reversed","Z->Az->a","Z-Az-a"],"overloads":["-> \"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\""],"vectorises":false},{"name":"Multidimensional Assignment","symbol":"ÞẠ","keywords":["md-assign"],"overloads":["a: lst, b: lst[num], c: any -> a[b[0]][b[1]]...[b[n]] = c"],"vectorises":false},{"name":"Get Context Variable N","symbol":"n","keywords":["get-context-n","context-n","c-var-n","ctx-n","ctx-primary"],"overloads":["-> context variable n - defaults to lowercase alphabet if outside context"],"vectorises":false},{"name":"Slice from 1","symbol":"Φ","keywords":["one->b","one-slice"],"overloads":["a: lst, b: num -> a[1:b]","a: num, b: lst -> b[1:a]"],"vectorises":false},{"name":"Multidimensional Index","symbol":"Þi","keywords":["md-index"],"overloads":["a: lst, b: lst[num] -> a[b[0]][b[1]]...[b[n]]"],"vectorises":false},{"name":"Bit | Parity | Last Half of String","symbol":"ḃ","keywords":["bit","parity","str-last-half"],"overloads":["a: num -> parity of a (a % 2)","a: str -> last half of a"],"vectorises":true},{"name":"0-Lift","symbol":"Þι","keywords":["zero-lift","lift-0","O-lift"],"overloads":["a: lst -> each item of a multiplied by its 0-based index"],"vectorises":false},{"name":"Boolify","symbol":"ȯ","keywords":["boolify"],"overloads":["a: any -> bool(a)"],"vectorises":false},{"name":"Inclusive One Range | Uppercase","symbol":"ɾ","keywords":["one->n","one-range","to-upper","upper","uppercase"],"overloads":["a: num -> [1..a]","a: lst[num] -> apl-style iota from 1 to a","a: str -> a.upper()"],"vectorises":true},{"name":"Halve","symbol":"½","keywords":["halve"],"overloads":["a: num -> a / 2","a: str -> a split into two pieces"],"vectorises":true},{"name":"Join on Nothing | First Positive Integer | Is Alphanumeric | Insignificant?","symbol":"“","keywords":["nothing-join","concat-fold","join-on-nothing","empty-join","single-string","as-single-string","first-positive-integer","first-n>0","is-alphanumeric","is-alphanum","is-alnum","abs<=1","insignificant?","insignificant","insig?","insig"],"overloads":["a: lst -> a join on nothing","a: str -> is a alphanumeric?","a: fun -> First positive integer ([1, 2, 3, ...]) for which a returns true","a: num -> abs(a) <= 1"],"vectorises":false},{"name":"Group By Consecutive Items","symbol":"ġ","keywords":["group-by-consecutive"],"overloads":["a: any -> group consecutive identical items of lst(a)"],"vectorises":false},{"name":"Negation | Swap Case | First Non-Negative Integer Where Predicate is True","symbol":"N","keywords":["neg","negate","swap-case","caseswap","first-non-negative","first-nonneg","first>-1"],"overloads":["a: num -> -a","a: str -> a.swapCase()","a: fun -> first non-negative integer where predicate a is true"],"vectorises":true},{"name":"Lines","symbol":"kD","keywords":["lines","dashes","bars"],"overloads":["-> \"|/-\\_\""],"vectorises":false},{"name":"Prime Factors | Remove Alphabet","symbol":"ḟ","keywords":["prime-factors","remove-alphabet"],"overloads":["a: num -> prime factors of a","a: str -> a with all alphabet characters removed"],"vectorises":true},{"name":"Lowercase and Uppercase Alphabet","symbol":"kL","keywords":["lowercase-and-uppercase-alphabet","lowercase-and-uppercase-alpha","a->zA->Z","a-zA-Z"],"overloads":["-> \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\""],"vectorises":false},{"name":"Cartesian Product","symbol":"Ẋ","keywords":["cartesian-product","cartesian","cart-prod","cart"],"overloads":["a: list, b: list -> cartesian product of a and b"],"vectorises":false},{"name":"Grid Neighbours (Diagonals)","symbol":"Þȯ","keywords":["grid-neighbours-diagonals","grid-neighbors-diagonals","adjacent-cells-diagonals","adj-cells-diagonals","surrounding-cells-diagonals","eight-cells"],"overloads":["a: lst[lst] -> Grid neighbours of a - up, down, left, right, diagonals","a: lst[lst], b: num -> Grid neighbours of a - right, down, left, up of a and start from direction b => 0: right, 1: down, 2: left, 3: up, 4: down-right, 5: up-left, 6: down-left, 7: up-left. Negative b does not include middle, positive b does"],"vectorises":false},{"name":"Join On","symbol":"j","keywords":["join-on","join","join-with","join-by"],"overloads":["a: lst, b: str|num -> a join on b","a: lst, b: lst -> Intersperse elements of b within a"],"vectorises":false},{"name":"Sixteen","symbol":"₁","keywords":["sixteen","l6"],"overloads":["-> 16"],"vectorises":false},{"name":"Reshape","symbol":"ÞR","keywords":["reshape"],"overloads":["a: lst, b: lst[num] => a reshaped to shape b"],"vectorises":false},{"name":"To Base | Regex Find","symbol":"y","keywords":["to-base","re-find","regex-find"],"overloads":["a: num, b: num -> a in base b","a: num, b: str|lst -> a in base with alphabet b","a: lst, b: num -> each x in a in base b","a: lst, b: str|lst -> each x in a in base with alphabet b","a: str, b: str -> All matches of b in a"],"vectorises":false},{"name":"Triple | Contains Only Alphabet | Transpose","symbol":"T","keywords":["triple","alphabet?","alphabetical?","contains-only-alphabet?","contains-only-alphabetical?","transpose","flip","reverse-axes","flip-axes","permute-axes"],"overloads":["a: num -> 3 * a","a: str -> does a contain only alphabet characters?","a: any -> transpose a"],"vectorises":false},{"name":"Digits, Lowercase, Uppercase","symbol":"kr","keywords":["digits-lowercase-uppercase","digs-lower-upper","o9azAZ","o-9a-zA-Z"],"overloads":["-> \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\""],"vectorises":false},{"name":"Init","symbol":"Ṫ","keywords":["init","remove-last"],"overloads":["a: lst -> a[:-1]","a: str -> a[:-1]"],"vectorises":false},{"name":"Hello, World!","symbol":"kH","keywords":["hello-world!","HW!"],"overloads":["-> \"Hello, World!\""],"vectorises":false},{"name":"Grade Down","symbol":"↓","keywords":["grade-down"],"overloads":["a: any -> indices that will reverse-sort a"],"vectorises":false},{"name":"Equals","symbol":"=","keywords":["eq","==","equal","same?","equals?","equal?"],"overloads":["a: any, b: any -> a == b"],"vectorises":true},{"name":"Hello World","symbol":"kh","keywords":["hello-world","HW"],"overloads":["-> \"Hello World\""],"vectorises":false},{"name":"Tail | Last Item","symbol":"t","keywords":["tail","last","last-item"],"overloads":["a: lst -> a[-1]"],"vectorises":false},{"name":"Merge","symbol":"J","keywords":["merge"],"overloads":["a: lst, b: lst -> Merge a and b","a: any, b: lst -> Prepend a to b","a: lst, b: any -> Append b to a","a: num, b: num -> num(str(a) + str(b))","a: any, b: any -> str(a) + str(b)"],"vectorises":false},{"name":"Insert","symbol":"Ị","keywords":["insert","insert-at"],"overloads":["a: any, b: num, c: any -> insert c at position b in a","a: any, b: lst, c: any -> insert c at positions b in a","a: any, b: lst[num], c: lst -> insert c[i] at position b[i] in a"],"vectorises":false},{"name":"List Repeat","symbol":"Y","keywords":["wrap-repeat"],"overloads":["a: any, b: num -> a repeated b times, wrapped in a list","a: num, b: any -> b repeated a times, wrapped in a list","a: lst|str, b: lst[num] -> a[_] repeated b[_] times, wrapped in a list"],"vectorises":false},{"name":"Cycle | Is Positive?","symbol":"ÞĊ","keywords":["cycle","is-positive?","positive?",">0?"],"overloads":["a: lst -> a ++ a ++ a ++ ...","a: num -> a > 0"],"vectorises":false},{"name":"Zero Slice Until","symbol":"Θ","keywords":["0>b","zero-slice","zero-slice-until","take","slice-to","lst-truncate","first-n-items","first-n"],"overloads":["a: lst, b: num>=0 -> [a[0], a[1], ..., a[b-1]]","a: lst, b: num<0 -> [a[b + 1], a[b + 2], ..., a[-1]]","a: lst, b: lst[num] -> apl style take"],"vectorises":false},{"name":"Mirror","symbol":"ṁ","keywords":["mirror","ab->abba"],"overloads":["num a: a + reversed(a) (as number)","str a: a + reversed(a)","lst a: append reversed(a) to a"],"vectorises":false},{"name":"Arccosine / Inverse Cosine","symbol":"∆ċ","keywords":["acos","arccos","arccosine"],"overloads":["a: num -> acos(a)"],"vectorises":true},{"name":"Flatten","symbol":"f","keywords":["flatten","flat"],"overloads":["a: lst -> Flattened a"],"vectorises":false},{"name":"Less Than","symbol":"<","keywords":["lt","less","less-than","<","less?","smaller?"],"overloads":["a: num, b: num -> a < b","a: str, b: num -> a < str(b)","a: num, b: str -> str(a) < b","a: str, b: str -> a < b"],"vectorises":true},{"name":"Uniquify","symbol":"u","keywords":["uniquify"],"overloads":["a: lst|str|num -> a with duplicates removed"],"vectorises":false},{"name":"Wrap to Length | Predicate Slice From 0","symbol":"Ẇ","keywords":["wrap-length","pred-slice-0","size-chunk"],"overloads":["a: lst, b: num -> a wrapped in chunks of length b","a: fun, b: num -> first b truthy integers where a is truthy"],"vectorises":false},{"name":"Uninterleave","symbol":"U","keywords":["uninterleave"],"overloads":["a: any -> uninterleave a"],"vectorises":false},{"name":"Euler's Number","symbol":"ke","keywords":["euler's-number","euler","e-num"],"overloads":["-> 2.718281828459045"],"vectorises":false},{"name":"Into N Pieces | Split Into N Pieces","symbol":"Þ÷","keywords":["into-n-pieces","split-into-n-pieces"],"overloads":["a: lst, b: num -> a split into b equal sized chunks, with the last chunk potentially smaller","a: str, b: num -> a split into b equal sized chunks, with the last chunk potentially smaller"],"vectorises":false},{"name":"Empty string","symbol":"₉","keywords":["empty-string","<>"],"overloads":["-> \"\""],"vectorises":false},{"name":"Append","symbol":"&","keywords":["append"],"overloads":["a: any, b: any -> list(a) ++ [b]"],"vectorises":false},{"name":"Find","symbol":"Ḟ","keywords":["find"],"overloads":["a: any, b: any -> a.indexOf(b) (-1 if not found)","a: any, b: fun -> truthy indices of mapping b over a"],"vectorises":false},{"name":"Filter by Function | From Base","symbol":"F","keywords":["filter","keep-by","from-base","10->b"],"overloads":["a: fun, b: lst -> Filter b by truthy results of a","a: lst, b: fun -> Filter a by truthy results of b","a: num, b: num -> a from base b to base 10","a: num, b: str|lst -> a from base with alphabet b to base 10"],"vectorises":false},{"name":"Hex Digits (lowercase)","symbol":"k6","keywords":["hex-digits","hex-digs","hex-lowercase","hex-lower","hex-l","hex-lc"],"overloads":["-> \"0123456789abcdef\""],"vectorises":false},{"name":"Get Register","symbol":"¥","keywords":["get-register","get-reg","register","<-register","<-reg"],"overloads":[" -> push the value of the register"],"vectorises":false},{"name":"Factorial","symbol":"!","keywords":["fact","factorial"],"overloads":["a: num -> a!"],"vectorises":true},{"name":"Bitwise And","symbol":"∴","keywords":["bitwise-and"],"overloads":["a: num, b: num -> a & b"],"vectorises":true},{"name":"Arcsine / Inverse Sine","symbol":"∆ṡ","keywords":["asin","arcsin","arcsine"],"overloads":["a: num -> asin(a)"],"vectorises":true},{"name":"Dump","symbol":"\\","keywords":["dump"],"overloads":["a: any -> dump all values on the stack"],"vectorises":false},{"name":"All Truthy | All() | Is Vowel?","symbol":"A","keywords":["all","is-vowel?","vowel?"],"overloads":["a: str -> is (a) a vowel? vectorises for strings len > 1","a: list -> is (a) all truthy?"],"vectorises":false},{"name":"Any Truthy | Any() | Is Uppercase?","symbol":"a","keywords":["any","is-uppercase?","is-upper?","upper?"],"overloads":["a: str -> is (a) uppercase? vectorises for strings len > 1","a: list -> is (a) any truthy?"],"vectorises":false},{"name":"Absolute Difference | Apply to Neighbours","symbol":"ȧ","keywords":["abs-diff","apply-to-neighbours"],"overloads":["a: num, b: num -> |a - b|","a: lst, b: fun -> apply b to each pair of neighbours in a [applies to windows of length 2]"],"vectorises":true},{"name":"Asterisk","symbol":"•","keywords":["asterisk"],"overloads":["-> \"*\""],"vectorises":false},{"name":"Hyperbolic Cosine","symbol":"∆C","keywords":["cosh","hyperbolic-cosine"],"overloads":["a: num -> cosh(a)"],"vectorises":true},{"name":"List Partitions | Integer Partitions","symbol":"ṗ","keywords":["list-partitions","list-parts","integer-partitions","int-partitions","int-parts","partitions"],"overloads":["a: lst -> List partitions of a","a: num -> Integer partitions of a (all possible ways to sum to a)"],"vectorises":false},{"name":"Hyperbolic Sine","symbol":"∆S","keywords":["sinh","hyperbolic-sine"],"overloads":["a: num -> sinh(a)"],"vectorises":true},{"name":"Sort by Function Object | Partition by Numbers | Set Difference","symbol":"ṡ","keywords":["sort-by","sortby","sort-by-fun","sortbyfun","sort-fun","sortfun","partition-by","set-difference","set-diff"],"overloads":["a: fun, b: any -> sort iterable b by function a","a: any, b: fun -> sort iterable a by function b","a: lst, b: lst -> set difference of a and b","a: lst, b: num|str -> remove b from a","a: num|str, b: lst -> remove a from b"],"vectorises":false},{"name":"Powerset","symbol":"⁺","keywords":["powerset"],"overloads":["a: lst -> powerset of a"],"vectorises":false},{"name":"Maximum without popping","symbol":"Ɠ","keywords":["max-no-pop"],"overloads":["a: lst -> max(a) without popping a"],"vectorises":false},{"name":"Not Equal","symbol":"≠","keywords":["not-equal","=n't"],"overloads":["a: any, b: any -> a != b"],"vectorises":true},{"name":"Get Context Variable M","symbol":"m","keywords":["get-context-m","context-m","c-var-m","ctx-m","ctx-secondary"],"overloads":["-> context variable m - defaults to uppercase alphabet if outside context"],"vectorises":false},{"name":"Map Function | Mold Lists | Multiplicity","symbol":"M","keywords":["map","mold","multiplicity","times-divide","re-match","regex-match"],"overloads":["a: any, b: fun -> a.map(b)","a: fun, b: any -> b.map(a)","a: lst, b: lst -> a molded to the shape of b","a: num, b: num -> how many times b divides a","a: str, b: str -> regex match of b in a","a: list, b: str -> regex match of b of each element of a","a: str, b: list -> regex match of each element of b in a"],"vectorises":false},{"name":"Uppercase Alphabet Reversed","symbol":"kZ","keywords":["uppercase-alphabet-reversed","uppercase-alpha-reversed","Z->A"],"overloads":["-> \"ZYXWVUTSRQPONMLKJIHGFEDCBA\""],"vectorises":false},{"name":"Logical And","symbol":"∧","keywords":["and","logical-and"],"overloads":["a: any, b: any -> a && b"],"vectorises":true},{"name":"Arctangent / Inverse Tangent","symbol":"∆ṫ","keywords":["atan","arctan","arctangent"],"overloads":["a: num -> atan(a)"],"vectorises":true},{"name":"Rotate Stack Right","symbol":"→","keywords":["rotate-stack-right"],"overloads":[" -> rotate the entire stack right once"],"vectorises":false},{"name":"Octal Digits","symbol":"ko","keywords":["octal-digits","octal-digs","o-7"],"overloads":["-> \"01234567\""],"vectorises":false},{"name":"Ceiling","symbol":"⌈","keywords":["ceiling","ceil"],"overloads":["a: num -> ceil(a)"],"vectorises":true},{"name":"Increment Twice | Vectorised Head","symbol":"…","keywords":["incr-twice","vec-head"],"overloads":["a: num -> a + 2","a: lst -> [x[0] for x in a]"],"vectorises":false},{"name":"Length of Stack","symbol":"`","keywords":["length-of-stack","stack-length","stack-len"],"overloads":[" -> push the length of the stack"],"vectorises":false},{"name":"Execute lambda without popping | Evaluate as Vyxal without popping | Boolean Mask | Is 1?","symbol":"Ḃ","keywords":["peek-call","exec-peek","boolean-mask","bool-mask","strict-boolify","is-1?"],"overloads":["a: fun -> Execute a without popping","a: str -> Evaluate a as Vyxal without popping","a: lst -> Return a boolean array with 1s at the indices in a list.","a: num -> Is a == 1?"],"vectorises":false},{"name":"Number of Context Parameters","symbol":"#¤","keywords":["number-of-context","context-number","context-count"],"overloads":["-> number of context parameters"],"vectorises":false},{"name":"One hundred twenty-eight","symbol":"₆","keywords":["one-hundred-twenty-eight","l28"],"overloads":["-> 128"],"vectorises":false},{"name":"Degrees to Radians","symbol":"∆ṙ","keywords":["deg2rad","deg-to-rad"],"overloads":["a: num -> a from degrees to radians (a * pi / 180)"],"vectorises":true},{"name":"Multi-Set Intersection","symbol":"Þ⁾","keywords":["multi-set-intersection","multi-set-intersect"],"overloads":["a: lst, b: lst -> multi-set intersection of a and b"],"vectorises":false},{"name":"Set of Integers","symbol":"ÞṬ","keywords":["ZZ"],"overloads":["-> The set of all integers"],"vectorises":false},{"name":"Bitwise Xor","symbol":"⊻","keywords":["bitwise-xor","insert-space"],"overloads":["a: num, b: num -> a ^ b","a: str, b: str -> a + space + b"],"vectorises":true},{"name":"Cosine","symbol":"∆c","keywords":["cos","cosine"],"overloads":["a: num -> cos(a)"],"vectorises":true},{"name":"Tangent","symbol":"∆t","keywords":["tan","tangent"],"overloads":["a: num -> tan(a)"],"vectorises":true},{"name":"Palindromise","symbol":"ṅ","keywords":["palindromise","palindrome","ab->aba"],"overloads":["a: any -> palindromise a"],"vectorises":false},{"name":"Interleave / Reject By Function","symbol":"I","keywords":["interleave","reject"],"overloads":["a: lst, b: lst -> Interleave a and b","a: any, b: fun -> Reject elements of a by applying b"],"vectorises":false},{"name":"Index | Collect Unique Application Values | Enclose | Read Member","symbol":"i","keywords":["index","at","item-at","nth-item","collect-unique","enclose","@<="],"overloads":["a: lst, b: num -> a[b]","a: lst, b: lst -> a[_] for _ in b","a: str, b: lst[num] -> ''.join(a[i] for i in b)","a: str, b: lst[any] -> x[a] for x in b","a: lst, b: str -> x[b] for x in a","a: any, b: fun -> Apply b on a and collect unique values. Does include the initial value.","a: str, b: str -> enclose b in a (a[0:len(a)//2] + b + a[len(a)//2:])","a: rec, b: str -> get member b of a","a: str, b: rec -> get member a of b"],"vectorises":false},{"name":"Reverse","symbol":"Ṛ","keywords":["reverse","rev"],"overloads":["a: any -> reverse a"],"vectorises":false},{"name":"Set XOR","symbol":"Ċ","keywords":["set-xor"],"overloads":["a: lst, b: lst -> set xor of a and b"],"vectorises":false},{"name":"Least Common Multiple","symbol":"∆L","keywords":["lcm"],"overloads":["a: num, b: num -> lcm(a, b)","a: lst[num], b: num -> lcm of b and all elements of a","a: lst[num] -> lcm of all items in a."],"vectorises":false},{"name":"Argument / Phase / Angle","symbol":"∆<","keywords":["arg","phase","angle"],"overloads":["a: num -> Arg(a)"],"vectorises":true},{"name":"Over","symbol":"Ȯ","keywords":["over"],"overloads":["_ -> push a copy of the second item on the stack over the first","a b -> a b a"],"vectorises":false},{"name":"Pi","symbol":"ki","keywords":["pi","E-14","E-1415926535897"],"overloads":["-> Literally just pi"],"vectorises":false},{"name":"Length 0-Range","symbol":"ι","keywords":["zero->len"],"overloads":["a: any -> `[0, 1, 2, ..., len(a)-1]`"],"vectorises":false},{"name":"Twenty-six","symbol":"₂","keywords":["twenty-six","Z6","z6"],"overloads":["-> 26"],"vectorises":false},{"name":"Subtraction","symbol":"-","keywords":["sub","subtract","minus","str-remove","str-remove-all","remove-all"],"overloads":["a: num, b: num -> a - b","a: str, b: num -> a + b '-'s (or '-'s + a if b < 0)","a: num, b: str -> a '-'s + b (or b + '-'s if a < 0)","a: str, b: str -> a with b removed"],"vectorises":true},{"name":"Reciprocal | Remove Whitespace","symbol":"ė","keywords":["reciprocal","recip","remove-whitespace","remove-space","1/"],"overloads":["a: num -> 1/a","a: str -> a with all whitespace removed"],"vectorises":true},{"name":"Cumulative Sums","symbol":"@","keywords":["cumulative-sums","cumsums","cumsum","cum-sum","-_-"],"overloads":["a: lst -> cumulative sums of a"],"vectorises":false},{"name":"FizzBuzz","symbol":"kF","keywords":["fizzbuzz","FB"],"overloads":["-> \"FizzBuzz\""],"vectorises":false},{"name":"Head Remove | Behead","symbol":"Ḣ","keywords":["head-remove","behead"],"overloads":["a: str -> a[1:]","a: any -> toList(a)[1:]"],"vectorises":false},{"name":"Partition After Truthy Indices","symbol":"ƒ","keywords":["partition-after-truthy"],"overloads":["a: lst, b: lst -> partition a after truthy indices in b"],"vectorises":false},{"name":"Print","symbol":",","keywords":["print","puts","out","println"],"overloads":["a -> printed to stdout"],"vectorises":false},{"name":"Grid Neighbours (Diagonals, Wrap Around)","symbol":"ÞȮ","keywords":["grid-neighbours-diagonals-wrap","grid-neighbors-diagonals-wrap","adjacent-cells-diagonals-wrap","adj-cells-diagonals-wrap","surrounding-cells-diagonals-wrap","eight-cells-wrap"],"overloads":["a: lst[lst] -> Grid neighbours of a - up, down, left, right, diagonals - wrapping around","a: lst[lst], b: num -> Grid neighbours of a - right, down, left, up of a, wrapping around and start from direction b => 0: right, 1: down, 2: left, 3: up, 4: down-right, 5: up-left, 6: down-left, 7: up-left. Negative b does not include middle, positive b does"],"vectorises":false},{"name":"Join on Spaces | Is Negative? (Used when not closing a string)","symbol":"„","keywords":["space-join","join-on-spaces","is-negative?","negative?"],"overloads":["a: lst -> a join on spaces","a: num -> a < 0"],"vectorises":false},{"name":"Pair","symbol":";","keywords":["pair"],"overloads":["a, b -> [a, b]"],"vectorises":false},{"name":"Exactly Equals","symbol":"₌","keywords":["===","exactly-equal","strictly-equal?"],"overloads":["a: any, b: any -> a === b (non-vectorising)"],"vectorises":false},{"name":"Decrement","symbol":"v","keywords":["decr","decrement"],"overloads":["a: num -> a - 1"],"vectorises":true},{"name":"-1 Power Of | Split on Spaces","symbol":"Ṃ","keywords":["neg-one-power-of","neg1**","neg1^","neg1-power-of","neg1-power","split-on-spaces","split-spaces","space-split"],"overloads":["a: num -> -1 ** a","a: str -> a split on spaces"],"vectorises":true},{"name":"Vectorised Reverse | Complement | Title Case","symbol":"V","keywords":["vectorised-reverse","vec-reverse","complement","titlecase","title-case"],"overloads":["a: lst -> each element of a reversed","a: num -> 1 - a","a: str -> a converted to title case"],"vectorises":false},{"name":"Monadic Maximum | Dyadic Maximum | Generate From Function | Vectorised Maximum","symbol":"G","keywords":["max","maximum","generator"],"overloads":["a: lst -> Maximum of a","a: non-lst, b: non-lst -> Maximum of a and b","a: lst, b: fun -> Call b infinitely with items of a as starting values"],"vectorises":false},{"name":"Set Intersection | Flatten By Depth | Character Multiply","symbol":"⁾","keywords":["set-intersection","intersection","flatten-by-depth","intersect"],"overloads":["a: lst, b: lst -> set intersection of a and b","a: str, b: str -> set intersection of a and b","a: lst, b: num -> flatten a by depth b","a: num, b: str -> each character in b repeated a times","a: str, b: num -> each character in a repeated b times"],"vectorises":false},{"name":"Logical Not","symbol":"¬","keywords":["non-vec-not","non-vec-logical-not"],"overloads":["a: any -> !a"],"vectorises":false},{"name":"Quotify | Nth Prime","symbol":"q","keywords":["quotify","nth-prime","prime-n"],"overloads":["a: str -> enclose a in quotes, escape backslashes and quote marks","a: num -> nth prime"],"vectorises":true},{"name":"Floor","symbol":"⌊","keywords":["floor","str-num","str->num","str-to-num"],"overloads":["a: num -> floor(a)","a: str -> cast a to num by ignoring non-numeric digits. Returns 0 if there's no valid number"],"vectorises":true},{"name":"Remove At | Regex Groups","symbol":"Q","keywords":["remove-at","re-groups","regex-groups"],"overloads":["a: lst, b: num -> a with bth element removed","a: str, b: str -> regex groups of a with regex b"],"vectorises":false},{"name":"Fizz","symbol":"kf","keywords":["fizz","FIZZ"],"overloads":["-> \"Fizz\""],"vectorises":false},{"name":"Length | Length of List","symbol":"L","keywords":["length","len","length-of","len-of","size"],"overloads":["a: any -> Length of a"],"vectorises":false},{"name":"Join Sublists on Spaces then Newlines (Element Form of ')","symbol":"'","keywords":["join-sublists","join-sublists-on-spaces-then-newlines","grid"],"overloads":["a: lst -> sublists of a joined on spaces then that joined on newlines"],"vectorises":false},{"name":"Convert To Binary","symbol":"b","keywords":["to-binary","dec->bin","decimal->bin"],"overloads":["a: num -> convert a to binary","a: str -> bin(ord(x) for x in a)"],"vectorises":true},{"name":"Set of Natural Numbers","symbol":"ÞṆ","keywords":["NN"],"overloads":["-> The set of all natural numbers"],"vectorises":false},{"name":"Bitshift Right","symbol":"»","keywords":["bitwise-right-shift","right-shift","right-pad","pad-right"],"overloads":["a: num, b: num -> a >> b","a: num, b: str -> b padded to length a with spaces appended","a: str, b: num -> a padded to length b with spaces appended","a: str, b: str -> a padded to length of b with spaces appended"],"vectorises":true},{"name":"Dyadic Arctangent / Dyadic Inverse Tangent","symbol":"∆Ṫ","keywords":["atan2","arctan2","arctangent2"],"overloads":["y: num, x: num -> atan2(y, x)"],"vectorises":true},{"name":"Rotate Left","symbol":"Ṙ","keywords":["abc->bca","rot-left","rotate-left"],"overloads":["a: any -> rotate left once"],"vectorises":false},{"name":"Monadic Minimum | Dyadic Minimum | Generate From Function (Dyadic) | Vectorised Minimum","symbol":"g","keywords":["min","minimum","generator-dyadic"],"overloads":["a: lst -> Minimum of a","a: non-lst, b: non-lst -> Minimum of a and b","a: lst, b: fun -> Call b infinitely with items of a as starting values (dyadic)"],"vectorises":false},{"name":"Convert From Binary","symbol":"B","keywords":["from-binary","bin->dec","bin->decimal"],"overloads":["a: num -> str(a) from binary","a: str -> int(a, 2)","a: lst -> int(a, 2), using list of digits"],"vectorises":false},{"name":"Space","symbol":"ð","keywords":["space"],"overloads":["-> \" \""],"vectorises":false},{"name":"Sublists","symbol":"Ṣ","keywords":["sublists"],"overloads":["a: lst -> sublists of a"],"vectorises":false},{"name":"Imaginary Part","symbol":"∆I","keywords":["imag","imaginary","imaginary-part"],"overloads":["a: num -> Im(a)"],"vectorises":true},{"name":"Length of Each Item","symbol":"l","keywords":["length-vectorised","length-vect","len-vect","len-vectorised","vec-len","vec-length","vlen"],"overloads":["a: lst -> Length of each item in a"],"vectorises":false},{"name":"Prime Exponents","symbol":"∆q","keywords":["prime-exponents","prime-exps"],"overloads":["a: num -> push a list of the power of each prime in the prime factors of a"],"vectorises":true},{"name":"All Equal?","symbol":"≈","keywords":["all-equal","all-equal?"],"overloads":["a: lst -> are all elements of a equal?"],"vectorises":false},{"name":"Minimum without popping","symbol":"ɠ","keywords":["min-no-pop"],"overloads":["a: lst -> min(a) without popping a"],"vectorises":false},{"name":"N Choose K (Binomial Coefficient) | Character Set Equal? | Repeat Until No Change","symbol":"ċ","keywords":["n-choose-k","ncr","nck","choose","binomial","char-set-equal?","char-set-eq?","until-stable"],"overloads":["a: num, b: num -> a choose b","a: str, b: str -> are the character sets of a and b equal?","a: fun, b: any -> run a on b until the result no longer changes returning all intermediate results"],"vectorises":true},{"name":"Zero Pad","symbol":"Þ0","keywords":["zero-pad","pizza-tower"],"overloads":["a: lst|str, b: num -> a padded with 0s to length b. Positive b prepends 0s, negative b appends 0s","a: lst|str, b: lst|str -> a padded with 0s to length of b. Positive b prepends 0s, negative b appends 0s"],"vectorises":false},{"name":"Execute lambda | Evaluate as Vyxal | Power with base 10","symbol":"Ė","keywords":["execute-lambda","evaluate-as-vyxal","power-base-10","call","@"],"overloads":["a: fun -> Execute a","a: str -> Evaluate a as Vyxal","a: num -> 10 ** n"],"vectorises":false},{"name":"Prefixes","symbol":"P","keywords":["prefixes"],"overloads":["a: lst -> Prefixes of a"],"vectorises":false},{"name":"Principal Root Of Unity","symbol":"∆Ṛ","keywords":["root-of-unity"],"overloads":["a: num => principal a-th root of unity (e^(2i * pi / a))"],"vectorises":true},{"name":"Matrix Inverse","symbol":"ÞṂ","keywords":["matrix-inverse"],"overloads":["a: lst[lst] -> matrix inverse of a"],"vectorises":true},{"name":"Print without newline","symbol":"§","keywords":["print-no-newline"],"overloads":["a -> printed to stdout without newline"],"vectorises":false},{"name":"Print without popping","symbol":"Ọ","keywords":["print-no-pop"],"overloads":["a -> printed to stdout without popping"],"vectorises":false},{"name":"Trim / Cumulative Reduce","symbol":"Ṭ","keywords":["trim","scanl","cumulative-reduce"],"overloads":["a: any, b: any -> Trim all elements of b from both sides of a.","a: fun, b: any -> cumulative reduce b by function a"],"vectorises":false},{"name":"Exit | Quit","symbol":"#Q","keywords":["exit","quit"],"overloads":["a -> Stop program execution"],"vectorises":false},{"name":"[Internal Use] Vectorise (Element Form) ","symbol":"#v","keywords":[],"overloads":["*a, f -> f vectorised over however many arguments in a. It is recommended to use the modifier instead"],"vectorises":false},{"name":"Real Part","symbol":"∆R","keywords":["real","real-part"],"overloads":["a: num -> Re(a)"],"vectorises":true},{"name":"Less Than Or Equal To","symbol":"≤","keywords":["le","less-than-or-equal-to"],"overloads":["a: num, b: num -> a <= b","a: str, b: num -> a <= str(b)","a: num, b: str -> str(a) <= b","a: str, b: str -> a <= b"],"vectorises":true},{"name":"Set of All Primes","symbol":"ÞP","keywords":["PP","primes"],"overloads":["-> The set of all primes"],"vectorises":false},{"name":"Prepend","symbol":"p","keywords":["prepend"],"overloads":["a: lst, b: any -> b prepended to a"],"vectorises":false},{"name":"Thirty-two","symbol":"₃","keywords":["thirty-two","E2"],"overloads":["-> 32"],"vectorises":false},{"name":"Bifuricate","symbol":"ᶿ","keywords":["bifuricate","bifur","bif","furry","uwu","dup-rev","dup-reverse","owo"],"overloads":["a: lst -> Push a, then push a reversed"],"vectorises":false},{"name":"Grade Up","symbol":"↑","keywords":["grade-up"],"overloads":["a: any -> indices that will sort a"],"vectorises":false},{"name":"Rotate Stack Left","symbol":"←","keywords":["rotate-stack-left"],"overloads":[" -> rotate the entire stack left once"],"vectorises":false},{"name":"Get Input","symbol":"?","keywords":["get-input","input","stdin","readline"],"overloads":["->  -> input"],"vectorises":false},{"name":"Exclusive Zero Range | Lowercase","symbol":"ʀ","keywords":["0->n","zero-range","lowered-range","to-lower","lower","lowercase"],"overloads":["a: num -> [0..a)","a: lst[num] -> apl-style iota from 0 until a","a: str -> a.lower()"],"vectorises":true},{"name":"Pop and Discard","symbol":"_","keywords":["pop","discard"],"overloads":["a ->"],"vectorises":false},{"name":"Length 1-Range","symbol":"κ","keywords":["one->len"],"overloads":["a: any -> `[1, 2, 3, ..., len(a)]`"],"vectorises":false},{"name":"Suffixes","symbol":"€","keywords":["suffixes"],"overloads":["a: lst -> Suffixes of a"],"vectorises":false},{"name":"Logical Or","symbol":"∨","keywords":["or","logical-or"],"overloads":["a: any, b: any -> a || b"],"vectorises":true},{"name":"Count","symbol":"C","keywords":["count"],"overloads":["a: any, b: any -> count(b in a)"],"vectorises":false},{"name":"Multi-Set XOR","symbol":"Þċ","keywords":["multi-set-xor"],"overloads":["a: lst, b: lst -> multi-set xor of a and b"],"vectorises":false},{"name":"Transpose Safe","symbol":"ÞT","keywords":["transpose-safe"],"overloads":["a: any -> transpose a"],"vectorises":false},{"name":"Rotate Right","symbol":"ṙ","keywords":["abc->cab","rot-right","rotate-right"],"overloads":["a: any -> rotate right once"],"vectorises":false},{"name":"Two hundred fifty-six","symbol":"₇","keywords":["two-hundred-fifty-six","Z56","z56"],"overloads":["-> 256"],"vectorises":false},{"name":"Bitwise Or","symbol":"∵","keywords":["bitwise-or"],"overloads":["a: num, b: num -> a | b"],"vectorises":true},{"name":"Sign","symbol":"±","keywords":["sign"],"overloads":["a: num -> sign of a"],"vectorises":true},{"name":"Newline","symbol":"¶","keywords":["newline"],"overloads":["-> chr(10)"],"vectorises":false},{"name":"Buzz","symbol":"kb","keywords":["buzz","BUZZ"],"overloads":["-> \"Buzz\""],"vectorises":false},{"name":"Multi-Set Difference","symbol":"Þṅ","keywords":["multi-set-difference","multi-set-diff"],"overloads":["a: lst, b: lst -> multi-set difference of a and b"],"vectorises":false},{"name":"Hexadecimal | To Hexadecimal","symbol":"H","keywords":["hex","hexadecimal","to-hex","to-hexadecimal"],"overloads":["a: num -> a in hexadecimal","a: str -> a as a hexadecimal number to base 10"],"vectorises":true},{"name":"Deltas","symbol":"¯","keywords":["deltas","pairwise-differences","differences"],"overloads":["a: lst -> forward pairwise differences of a"],"vectorises":false},{"name":"1000","symbol":"k1","keywords":["one-thousand","l000","lk"],"overloads":["-> 1000"],"vectorises":false},{"name":"Addition","symbol":"+","keywords":["add","+","plus"],"overloads":["a: num, b: num -> a + b","a: num, b: str -> a + b","a: str, b: num -> a + b","a: str, b: str -> a + b"],"vectorises":true},{"name":"Divides? | Append Spaces | Remove Duplicates by Function","symbol":"Ḋ","keywords":["divides?","+-spaces","dedup-by","re-span","regex-span"],"overloads":["a: num, b: num -> a % b == 0","a: str, b: num -> a + ' ' * b","a: num, b: str -> b + ' ' * a","a: lst, b: fun -> Remove duplicates from a by applying b to each element","a: str, b: str -> span of first regex match of b in a"],"vectorises":false},{"name":"Contains","symbol":"c","keywords":["contains","in"],"overloads":["a: any, b: lst -> is element a in list b?","a: any, b: any -> is str(b) in str(a)?"],"vectorises":false},{"name":"Wrap","symbol":"W","keywords":["wrap"],"overloads":["a, b, c, ..., -> [a, b, c, ...]"],"vectorises":false},{"name":"Head | First Item","symbol":"h","keywords":["head","first","first-item"],"overloads":["a: lst -> a[0]"],"vectorises":false},{"name":"Number of Inputs","symbol":"#¿","keywords":["number-of-inputs","count-inputs","count-stdin"],"overloads":["-> The number of inputs to the program"],"vectorises":false},{"name":"Join On Newlines | Pad Binary to Mod 8 | Context if 1","symbol":"”","keywords":["join-newlines","newline-join","join-on-newlines","binary-pad-8","bin-pad-8","one?->context","one?->n"],"overloads":["a: lst -> a join on newlines","a: str -> a padded to a multiple of 8 with 0s","a: num -> a if a == 1 push context variable n"],"vectorises":false},{"name":"Logarithm | Scan Fixpoint | Same Length? | Length Equals?","symbol":"Ŀ","keywords":["log","logarithm","scan-fixpoint","scan-fix","same-length?","same-length","length-equals?","length-equals","len-eq?"],"overloads":["a: num, b: num -> log_b(a)","a: fun, b: any -> apply until a previous value is repeated, collecting intermediate results","a: str, b: str -> a same length as b","a: str, b: num -> len(a) == b"],"vectorises":true},{"name":"Drop/Zero Slice From | Collect While Unique | Complex Number","symbol":"İ","keywords":["drop","zero-slice-from","slice-from","collect-while-unique","complex"],"overloads":["a: num, b: num -> a.real + b.real * i","a: str|lst, b: num -> a[b:]","a: lst, b: lst[num] -> apl style drop","a: any, b: fun -> Apply b on a and collect unique values (until fixpoint). Does not include the initial value."],"vectorises":false},{"name":"Uppercase and lowercase","symbol":"kB","keywords":["uppercase-and-lowercase","uppercase-and-lowercase-alpha","A->Za->z","A-Za-z"],"overloads":["-> \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\""],"vectorises":false},{"name":"Assign","symbol":"Ạ","keywords":["assign","assign-at","assign<>","assign<x>","a<x>=","a<x>=y","a<x>?=y","set-item","apply-at","re-sub","regex-sub","@=>"],"overloads":["a: lst, b: num, c: non-fun -> assign c to a at the index b / a[b] = c","a: lst, b: num, c: fun -> a[b] c= <stack items> (augmented assignment to list)","a: lst, b: lst, c: lst -> assign c to a at the indices in b","a: str, b: str, c: str -> replace regex matches of pattern b in string a with c","a: str, b: str, c: fun -> replace regex matches of pattern b in string a with the result of applying c to each match","a: str, b: fun, c: str -> replace regex matches of pattern c in string a with the result of applying b to each match","a: fun, b: str, c: str -> replace regex matches of pattern c in string b with the result of applying a to each match","a: rec, b: str, c: str -> a.b = c"],"vectorises":false},{"name":"1000000","symbol":"k4","keywords":["one-million","l000000","l000k","lm"],"overloads":["-> 1000000"],"vectorises":false},{"name":"Replace","symbol":"r","keywords":["replace","zip-with"],"overloads":["a: str, b: str, c: str -> replace all instances of b in a with c","a: fun, b: any, c: any -> reduce items in zip(b, c) by a"],"vectorises":false},{"name":"Bitshift Left","symbol":"«","keywords":["bitwise-left-shift","left-shift","left-pad","pad-left"],"overloads":["a: num, b: num -> a << b","a: num, b: str -> b padded to length a with spaces prepended","a: str, b: num -> a padded to length b with spaces prepended","a: str, b: str -> a padded to length of b with spaces prepended"],"vectorises":true},{"name":"100000","symbol":"k3","keywords":["one-hundered-thousand","l00000","l00k"],"overloads":["-> 100000"],"vectorises":false},{"name":"Greater Than Or Equal To","symbol":"≥","keywords":["ge","greater-than-or-equal-to"],"overloads":["a: num, b: num -> a >= b","a: str, b: num -> a >= str(b)","a: num, b: str -> str(a) >= b","a: str, b: str -> a >= b"],"vectorises":true},{"name":"Factors | Is Numeric?","symbol":"K","keywords":["factors","divisors","is-numeric","is-num","is-number","is-num?","is-number?"],"overloads":["a: num -> Factors of a","a: str -> Is a numeric?"],"vectorises":true},{"name":"Head Extract","symbol":"ḣ","keywords":["head-extract","split-at-head"],"overloads":["a: lst|str -> Push a[0], then a[1:] onto the stack"],"vectorises":false},{"name":"First Input","symbol":"⁰","keywords":["first-input","input-0"],"overloads":["The first input to the program"],"vectorises":false},{"name":"All Prime Exponents","symbol":"∆ḟ","keywords":["all-prime-exponents","all-prime-exps"],"overloads":["a: num -> for all primes less than or equal to a, push the power of that prime in the factorisation of a"],"vectorises":true},{"name":"Reduce by Function Object | Dyadic Range | Regex Match | Set Union","symbol":"R","keywords":["fun-reduce","reduce","fold-by","range","a->b","regex-match?","re-match?","has-regex-match?","fold","union","to"],"overloads":["a: fun, b: any -> reduce iterable b by function a","a: any, b: fun -> reduce iterable a by function b","a: num, b: num -> the range [a, b)","a: str, b: num|str -> does regex pattern b match haystack a?","a: lst, b: lst -> union of a and b"],"vectorises":false},{"name":"Phi","symbol":"kg","keywords":["phi","golden-ratio","golden","l-618033988749895"],"overloads":["-> Literally just phi"],"vectorises":false},{"name":"Wrap Singleton","symbol":"w","keywords":["wrap-singleton","enlist"],"overloads":["a -> [a]"],"vectorises":false},{"name":"Duplicate","symbol":":","keywords":["dup"],"overloads":["a -> a, a"],"vectorises":false},{"name":"Sum","symbol":"∑","keywords":["sum","/+","+/"],"overloads":["a: lst -> sum of a"],"vectorises":false},{"name":"Cartesian Product Unsafe","symbol":"ÞẊ","keywords":["cartesian-product-unsafe","cartesian-unsafe","cart-prod-unsafe","cart-unsafe"],"overloads":["a: list, b: list -> cartesian product of a and b in the standard order, but without accounting for infinite lists"],"vectorises":false},{"name":"Sixty-four","symbol":"₄","keywords":["sixty-four","b4"],"overloads":["-> 64"],"vectorises":false},{"name":"Swap","symbol":"$","keywords":["swap"],"overloads":["a, b -> b, a"],"vectorises":false},{"name":"Modular | Matrix Multiply | Regex Full Match?","symbol":"Ṁ","keywords":["nth-items","modular","maxtrix-multiply","mat-multiply","mat-mul","regex-full-match?","full-match?"],"overloads":["a: str|lst, b: num -> return every b-th element of a. If b is zero, mirror: prepend a to its reverse.","a: num, b: str|lst -> return every a-th element of b. If a is zero, mirror: append b to its reverse.","a: lst, b: lst -> a * b (matrix multiply)","a: str, b: str -> does the entirety of a match b?"],"vectorises":false},{"name":"1-Lift","symbol":"Þκ","keywords":["one-lift","lift-1","l-lift"],"overloads":["a: lst -> each item of a multiplied by its 1-based index"],"vectorises":false},{"name":"Surround","symbol":"ø⁾","keywords":["surround"],"overloads":["a: any, b: any -> a prepended and appended to b"],"vectorises":false},{"name":"Last Extract | Tail Extract","symbol":"ṫ","keywords":["last-extract","split-at-last","tail-extract"],"overloads":["a: lst|str -> Push a[:-1], a[-1] onto the stack"],"vectorises":false},{"name":"All Inputs","symbol":"#?","keywords":["all-inputs","inputs","all-stdin","all-stdin?"],"overloads":["A list of all inputs to the program"],"vectorises":false},{"name":"Ord/Chr","symbol":"O","keywords":["ord","chr"],"overloads":["a: str -> ord(a)","a: num -> chr(a)"],"vectorises":false},{"name":"Reverse Stack","symbol":"^","keywords":["reverse-stack","rev-stack"],"overloads":[" -> reverse the stack"],"vectorises":false},{"name":"Unique Prime Factors | Case Of","symbol":"Ḅ","keywords":["unique-prime-factors","case-of"],"overloads":["a: num -> unique prime factors of a","a: str -> case of each character of a (uppercase = 1, lowercase = 0)"],"vectorises":true},{"name":"Cartesian Power | Regex Search for Match","symbol":"ẋ","keywords":["cartesian-power","re-search","regex-search"],"overloads":["a: lst, b: num -> cart_prod([a] * n)","a: num, b: lst -> cart_prod([b] * n)","a: str, b: str -> return first index of pattern match b in target string a, -1 if not found","a: lst, b: str -> regex search vectorised","a: str|lst, b: lst -> push a, push cartesian product of b and b"],"vectorises":false},{"name":"Product","symbol":"Π","keywords":["product","prod"],"overloads":["a: lst -> product of a"],"vectorises":false},{"name":"-1","symbol":"₈","keywords":["negative-one","neg-1","-1"],"overloads":["-> -1"],"vectorises":false},{"name":"Compress String Using Dictionary","symbol":"#C","keywords":["compress-dict","dict-comp","compress"],"overloads":["a: str -> compress a using the dictionary"],"vectorises":false},{"name":"Hex Digits (uppercase)","symbol":"k^","keywords":["hex-uppercase","hex-upper","hex-u","hex-uc"],"overloads":["-> \"0123456789ABCDEF\""],"vectorises":false},{"name":"Grid Neighbours","symbol":"Þo","keywords":["grid-neighbours","grid-neighbors","adjacent-cells","adj-cells","surrounding-cells"],"overloads":["a: lst[lst] -> Grid neighbours of a - right, down, left, up of a","a: lst[lst], b: num -> Grid neighbours of a - right, down, left, up of a and start from direction b => 0: right, 1: down, 2: left, 3: up. Negative b does not include middle, positive b does"],"vectorises":false},{"name":"Square Root","symbol":"√","keywords":["sqrt","square-root"],"overloads":["a: num -> sqrt(a)"],"vectorises":true},{"name":"Set Register","symbol":"£","keywords":["set-register","->register","set-reg","->reg"],"overloads":["a: any -> register = a"],"vectorises":false},{"name":"Triplicate","symbol":"D","keywords":["trip"],"overloads":["a -> [a, a, a]"],"vectorises":false},{"name":"Greater Than","symbol":">","keywords":["gt","greater","greater-than","greater?","bigger?"],"overloads":["a: num, b: num -> a > b","a: str, b: num -> a > str(b)","a: num, b: str -> str(a) > b","a: str, b: str -> a > b"],"vectorises":true},{"name":"Square | Pairs","symbol":"²","keywords":["square","pairs"],"overloads":["a: num -> a ** 2","a: str -> a split into pairs"],"vectorises":true},{"name":"Sort ascending","symbol":"S","keywords":["sort","sortasc","sort-asc"],"overloads":["a: any -> convert to list and sort ascending"],"vectorises":false},{"name":"Base-252 Compress String or Number","symbol":"#c","keywords":["compress-252","compress-b"],"overloads":["a: str -> compress a using base 252","a: num -> compress a using base 252"],"vectorises":true},{"name":"Double","symbol":"d","keywords":["double"],"overloads":["a: num -> a * 2","a: str -> a + a"],"vectorises":true},{"name":"Zip","symbol":"Z","keywords":["zip","zip-map"],"overloads":["a: lst, b: lst -> zip a and b","a: lst, b: fun -> [[x, b(x)] for x in a]","a: fun, b: lst -> [[a(x), x] for x in b]"],"vectorises":false},{"name":"Overlap | Overlapping Slices","symbol":"o","keywords":["overlap","overlaps","overlapping","overlapping-slices"],"overloads":["a: lst, b: num -> Overlapping slices of a of length b","a: lst|str -> Overlapping slices of a of length 2"],"vectorises":false},{"name":"Grid Neighbours (Wrap Around)","symbol":"ÞO","keywords":["grid-neighbours-wrap","grid-neighbors-wrap","adjacent-cells-wrap","adj-cells-wrap","surrounding-cells-wrap"],"overloads":["a: lst[lst] -> Grid neighbours of a - up, down, left, right - wrapping around","a: lst[lst], b: num -> Grid neighbours of a - right, down, left, up of a, wrapping around and start from direction b => 0: right, 1: down, 2: left, 3: up. Negative b does not include middle, positive b does"],"vectorises":false},{"name":"Vectorised Sums | Integer Division","symbol":"Ṡ","keywords":["vectorised-sums","vec-sums","integer-division","int-div","int-rizz","sums"],"overloads":["a: lst -> sum of each element of a","a: num, b: num -> a // b"],"vectorises":false},{"name":"Inclusive zero Range | Is Lowercase","symbol":"z","keywords":["inclusive-zero-range","zero->n","is-lowercase?","lowercase?","lower?"],"overloads":["a: num -> [0, 1, ..., a]","a: lst[num] -> apl-style iota from 0 to a","a: str -> is a lowercase?"],"vectorises":true},{"name":"Stringify","symbol":"ᶲ","keywords":["to-string","stringify","str"],"overloads":["a: any -> str(a)"],"vectorises":false},{"name":"Multiplication","symbol":"×","keywords":["mul","multiply","times","str-repeat","*","ring-trans"],"overloads":["a: num, b: num -> a * b","a: num, b: str -> b repeated a times","a: str, b: num -> a repeated b times","a: str, b: str -> ring translate a according to b"],"vectorises":true}],"modifiers":[{"name":"Lambda to Newline","symbol":"ᵜ","description":"Scan elements to the left until a newline is found. Push a\nlambda with all of the scanned elements","keywords":["<-}"],"overloads":["<elements>ᵜ: Push a lambda"]},{"name":"Quadruple Element Lambda","symbol":"Ч","description":"Turn the next four elements (whether that be a structure/modifier/element) into a lambda","keywords":["****:"],"overloads":["Чfghi: Push the equivalent of λfghi} to the stack"]},{"name":"Dyadic Single Element Lambda","symbol":"ᵈ","description":"Turn the next element (whether that be a structure/modifier/element) into a dyadic lambda","keywords":["*2:"],"overloads":["ᵈf: Push the equivalent of λ2|f} to the stack"]},{"name":"First Index Where","symbol":"ᶤ","description":"Find the first index where an element is truthy","keywords":["first-index-where:","first-index-of:","ind-of:","find-by:"],"overloads":["ᶤf: find the first index where f is truthy"]},{"name":"Parallel Apply and Wrap","symbol":"∦","description":"Parallel apply two elements to the top of the stack\nand wrap the result in a list","keywords":["parallel-apply-and-wrap:","para-apply-and-wrap:","<paraply>:","<!!>:"],"overloads":[]},{"name":"Invariant Under? / Vertical Scan","symbol":"ᵞ","description":"Check if a function is invariant under a transformation / vertical scan","keywords":["invariant-under:","vertical-scan:","vscan:","v-scan:","invariant?:","same?:"],"overloads":["ᵞf: check if top of stack is invariant under a transformation","ᵞf: scanl columns by f"]},{"name":"Key","symbol":"ᵏ","description":"Map an element over the groups formed by identical items.","keywords":["key:"],"overloads":["ᵏf: Map f over the groups formed by identical items"]},{"name":"Minimum By","symbol":"ⁿ","description":"Minimum By Element","keywords":["min-by:","minimum-by:"],"overloads":["ᵐf: Minimum of top of stack based on results of f"]},{"name":"Apply Without Popping | Remove Duplicates by","symbol":"ᵇ","description":"Apply a 2+ arity element to the stack without popping\nRemove duplicates from a list by an element","keywords":["without-popping:","peek:","dedup-by:","remove-duplicates-by:"],"overloads":["ᵇf<dyad|triad|tetrad>: apply f to the stack without popping","ᵇf<monad>: remove duplicates from a list by applying f to each pair of elements"]},{"name":"Apply To Head","symbol":"ᴴ","description":"Apply element only to the head of list","keywords":["apply-to-head:"],"overloads":["ᴴf: Apply f to the head of the top of the stack"]},{"name":"Loop While Unique","symbol":"ᶪ","description":"Loop While Unique - similar to ᶨ, but doesn't collect","keywords":["loop-while-unique:"],"overloads":["ᶪf: Loop while unique"]},{"name":"Maximum By","symbol":"ᵐ","description":"Maximum By Element","keywords":["max-by:","maximum-by:"],"overloads":["ᵐf: Maximum of top of stack based on results of f"]},{"name":"Sort By","symbol":"ᶳ","description":"Sort By Element / Scanl","keywords":["sort-by:","scanl:"],"overloads":["ᶳf: Sort top of stack based on results of f","ᶳf: Cumulatively reduce a list of items"]},{"name":"Dip","symbol":"ᵂ","description":"Stash the top of the stack temporarily, and then apply\nthe function. Finally, push the stashed value","keywords":["dip:"],"overloads":["ᵂf: pop M, apply f, push M"]},{"name":"Triple Element Lambda","symbol":"э","description":"Turn the next three elements (whether that be a structure/modifier/element) into a lambda","keywords":["***:"],"overloads":["эfgh: Push the equivalent of λfgh} to the stack"]},{"name":"Map Over Prefixes","symbol":"ᵖ","description":"Map an element over the prefixes of a list","keywords":["map-over-prefixes:","over-prefixes:"],"overloads":["ᵖf: Map f over prefixes"]},{"name":"Double Element Lambda","symbol":"ϩ","description":"Turn the next two elements (whether that be a structure/modifier/element) into a lambda","keywords":["**:"],"overloads":["ϩfg: Push the equivalent of λfg} to the stack"]},{"name":"Loop and Collect While Unique","symbol":"ᶨ","description":"Loop and Collect While Unique","keywords":["collect-while-unique:"],"overloads":["ᶨf: Loop and collect while unique"]},{"name":"Collect Until No Change / Neighbours All Equal?","symbol":"ᵘ","description":"Run func on the prev result until the result no longer changes\nreturning all intermediate results\nGiven a dyadic function, apply the function to all overlapping pairs of elements\nand test if all results are equal","keywords":["collect-until-no-change:","until-stable:","stablise:","neighbours-equals:"],"overloads":["ᵘf: Collect until no change"]},{"name":"Apply to Neighbours | Number of Truthy Elements","symbol":"ᵃ","description":"To each overlapping pair, reduce it by an element\nApply a dyadic element for all pairs of neighboring elements.\nCount the number of truthy elements in a list under a mondaic element","keywords":["apply-to-neighbours:","count-truthy:","apply-neighbours:","apply-to-neighbors:","apply-neighbors:","2lvf:","twolif:","to-pairs:","to-overlaps:","count:"],"overloads":["ȧf<monad>: Count how many items in a list are truthy after applying f to each","ᵃf<dyad>: equivalent to pushing the function, then calling ȧ"]},{"name":"Zip With / Reject by","symbol":"ᶻ","description":"Given a dyadic function, zip two lists and reduce each by f\n and then check if all results are equal.\nGiven a monadic function, the inverse of monadic /.\nFilters where the function is falsey","keywords":["zip-with:","zipwith:"],"overloads":[]},{"name":"Conditional Execution","symbol":"¿","description":"Pop the top of the stack, and, if it's truthy, apply a function","keywords":["if-top:","if:"],"overloads":[]},{"name":"Dyadic Double Element Lambda","symbol":"ᵉ","description":"Turn the next two elements (whether that be a structure/modifier/element) into a dyadic lambda","keywords":["**2:"],"overloads":["ᵉfg: Push the equivalent of λ2|fg} to the stack"]},{"name":"Apply to Register","symbol":"ᴿ","description":"Apply a function to the register. Essentially, push\nthe register value to the stack, apply the function, and\nthen pop back into the register","keywords":["apply-to-register:","to-register:","to-reg:"],"overloads":["ᴿf: Apply f to the register"]},{"name":"Dyadic Quadruple Element Lambda","symbol":"ᴳ","description":"Turn the next four elements (whether that be a structure/modifier/element) into a dyadic lambda","keywords":["****2:"],"overloads":["ᵍfghi: Push the equivalent of λ2|fghi} to the stack"]},{"name":"Single Element Lambda","symbol":"⸠","description":"Turn the next element (whether that be a structure/modifier/element) into a lambda","keywords":["*:"],"overloads":["⸠f: Push the equivalent of λf} to the stack"]},{"name":"Map as Stacks","symbol":"ᵗ","description":"Map a function over the top of the stack, treating each iteration\nas if it were a stack of items. Essentially, dump before mapping\n","keywords":["vec-dump:","map-dump:"],"overloads":[]},{"name":"Vectorise","symbol":"ᵛ","description":"Vectorises","keywords":["vectorise:","vec:","v:"],"overloads":["ᵛf: f but vectorised"]},{"name":"Reduce Columns | Map Over Suffixes","symbol":"ᶜ","description":"Reduce columns of a 2d list by a function\nMap an element over suffixes","keywords":["reduce-columns:","map-over-suffixes:","fold-cols:","foldl-cols:","fold-columns-by:","reduce-columns-by:","over-suffixes:"],"overloads":[]},{"name":"Dyadic Triple Element Lambda","symbol":"ᶠ","description":"Turn the next three elements (whether that be a structure/modifier/element) into a dyadic lambda","keywords":["***2:"],"overloads":["ᶠfgh: Push the equivalent of λ2|fgh} to the stack"]},{"name":"Outer Product | Table","symbol":"ᵒ","description":"Outer product","keywords":["outer-product:","table:"],"overloads":["ᵒf: Pop two lists, then make a matrix from them by applying f to each pair of elements"]},{"name":"Foldl | Reduce By | Filter by","symbol":"/","description":"Reduce a list by an element","keywords":["foldl:","reduce:","/:","fold:","reduceby:-"],"overloads":["/f: reduce by element f"]},{"name":"Parallel Apply","symbol":"∥","description":"Parallel apply two elements to the top of the stack","keywords":["parallel-apply:","para-apply:","paraply:","!!:"],"overloads":[]},{"name":"Scan Fixed Point","symbol":"ᵡ","description":"Scan a function until it reaches a fixed point","keywords":["scan-fix:"],"overloads":["ᵡf: scan f until a fixed point is reached / apply until a previous value is repeated, collecting intermediate results"]}],"syntax":[{"name":"Numeric Literal","symbol":"8","description":"The number 8","usage":"8"},{"name":"Retrieve Original Element","symbol":"#:~","description":"Call the original, vyxal defined, meaning of an element. Useful for when you want to define a new element with the same name as a built-in one","usage":"#:~<name>"},{"name":"Open Map Lambda","symbol":"ƛ","description":"Open a lambda that automatically maps its function to the top of the stack","usage":"ƛ<code>}"},{"name":"String Digraphs","symbol":"ø","description":"Used for string-related digraphs","usage":"ø<character>"},{"name":"Open Decision Problem Structure","symbol":"Ḍ","description":"Open a decision problem structure. Returns whether an iterable has any items that match a predicate","usage":"Ḍ<predicate>|<container> }"},{"name":"Close Two Structures","symbol":")","description":"Match and close two open structures.","usage":"<structure open><structure open> <code> ) <code not in structure>"},{"name":"Record Definition","symbol":"#:R","description":"Define a record with members","usage":"#:R<name>|#$restricted #=private #!public}"},{"name":"Base-252 Compressed String","symbol":"„","description":"Decompress and push a string, converted from a bijective base 252 number using the codepage","usage":"\"<compressed string>„"},{"name":"One Character String","symbol":"'","description":"Push the next character as a string","usage":"'<character>"},{"name":"Ternary Statement","symbol":"[","description":"Open a ternary statement. Pop condition, if truthy, run <ontrue>, else run <onfalse>","usage":"<condition> [<ontrue>|<onfalse>}"},{"name":"Numeric Literal","symbol":"2","description":"The number 2","usage":"2"},{"name":"Defined Element Call","symbol":"#:@","description":"Call a defined element","usage":"#:@<name>"},{"name":"Numeric Literal","symbol":"3","description":"The number 3","usage":"3"},{"name":"Comment","symbol":"##","description":"Comment out the rest of the line","usage":"##<comment>"},{"name":"List Digraphs","symbol":"Þ","description":"Used for list-related digraphs","usage":"Þ<character>"},{"name":"Numeric Literal","symbol":"4","description":"The number 4","usage":"4"},{"name":"Close A Structure","symbol":"}","description":"Match and close the nearest open structure.","usage":"<structure open> <code> } <code not in structure>"},{"name":"Augmented Assignment","symbol":"#>","description":"Apply a function to a variable value and store the result in the same variable.","usage":"<function> #> <variable>"},{"name":"Decimal Separator","symbol":".","description":"Used to separate the integer and fractional parts of a number","usage":"<integer>.<fractional>"},{"name":"Close All Structures","symbol":"]","description":"Match and close all open structures.","usage":"<structure openers>] <code not in structure>"},{"name":"Base-252 Compressed Number","symbol":"“","description":"Decompress and push a number, converted from a bijective base 252 number using the codepage","usage":"\"<compressed number>“"},{"name":"Numeric Literal","symbol":"9","description":"The number 9","usage":"9"},{"name":"Context Paramter Index","symbol":"¤","description":"Index into the list of context parameters.","usage":"¤<number>"},{"name":"Open Filter Lambda","symbol":"Ω","description":"Open a lambda that automatically filters the top of the stack by its function","usage":"Ω<code>}"},{"name":"Open Reduce/Accumulate Lambda","symbol":"₳","description":"Open a lambda that automatically reduces/accumulates the top of the stack by its function","usage":"₳<code>}"},{"name":"Close List","symbol":"#]","description":"Close a list. Pushes the list to the stack when closed.","usage":"#[item|item|item#]"},{"name":"Generator Structure","symbol":"Ṇ","description":"Open a generator structure. Allows for generator expressions","usage":"Ṇ<code>|<initial vector>}"},{"name":"Retrieve Variable","symbol":"#$","description":"Push the value of a variable.","usage":"#$<variable>"},{"name":"Numeric Literal","symbol":"5","description":"The number 5","usage":"5"},{"name":"Structure Branch","symbol":"|","description":"Delimit the next section in a structure.","usage":"<structure open> <code> | <code> ..."},{"name":"Two Character String","symbol":"ᶴ","description":"Push the next two characters as a string","usage":"ᶴ<character><character>"},{"name":"Assign Variable","symbol":"#=","description":"Assign a variable to a value.","usage":"#=<variable>"},{"name":"Open/Close String","symbol":"\"","description":"Open/close a string. If the string is closed, push it to the stack. Closes all string types","usage":"\"string contents\""},{"name":"Numeric Literal","symbol":"6","description":"The number 6","usage":"6"},{"name":"Numeric Literal","symbol":"1","description":"The number 1","usage":"1"},{"name":"Open Sort Lambda","symbol":"µ","description":"Open a lambda that automatically sorts the top of the stack by its function","usage":"µ<code>}"},{"name":"Open List","symbol":"#[","description":"Open a list. Pushes the list to the stack when closed.","usage":"#[item|item|item#]"},{"name":"Element/Modifier Definition","symbol":"#::","description":"Define a custom element/modifier that can be used in programs","usage":"#::<mode><name>|<arg>|<arg>...|<code>}"},{"name":"Miscellaneous Digraphs","symbol":"#","description":"Used for miscellaneous digraphs","usage":"#<character>"},{"name":"If/Elif/Else Statement","symbol":"#{","description":"Open an if statement. Allows for if/elif/else statements","usage":"#{<if condition>|<code>|<else if condition>|<code>|<else code>}"},{"name":"While Loop","symbol":"{","description":"Open a while loop. While the top of the stack is truthy, execute code.","usage":"{<condition>|<code>}"},{"name":"Numeric Literal","symbol":"0","description":"The number 0","usage":"0"},{"name":"Extension Method","symbol":"#:>>","description":"Define an overload on a custom element based on types. Requires at least one type to be specified.","usage":"#:>><name>|<arg1>|<type1>|<arg2>|<type2>...|<impl>}"},{"name":"Dictionary Compressed String","symbol":"”","description":"Decompress and push a string using SSS compression, shamelessly stolen from Jelly","usage":"\"<compressed string>”"},{"name":"For Loop","symbol":"(","description":"Open a for loop. For each item in the top of the stack, execute code, storing loop variable.","usage":"<iterable> (<variable>|<code>}"},{"name":"Numeric Literal","symbol":"7","description":"The number 7","usage":"7"},{"name":"Variable Unpacking","symbol":"#:[","description":"Unpack the top of the stack into a list of variables.","usage":"#:[<var>|<var>|<var>]"},{"name":"Mathematical Digraphs","symbol":"∆","description":"Used for math-related digraphs","usage":"∆<character>"},{"name":"Imaginary Number","symbol":"ı","description":"Used to represent the imaginary unit","usage":"<real>ı<imaginary>"},{"name":"Constant Digraphs","symbol":"k","description":"Used for constant-related digraphs","usage":"k<character>"},{"name":"Two Byte Number","symbol":"~","description":"Push the next two bytes as a number, converted from bijective base 255 using the codepage","usage":"~<character><character>"},{"name":"Open Lambda","symbol":"λ","description":"Open a lambda.","usage":"λ<parameters>|<code>}"},{"name":"Defined Modifier Call","symbol":"#:`","description":"Call a defined modifier","usage":"#:`<name>"}],"flags":[{"name":"Range behavior","type":"choice","default":{"name":"Default behavior","flag":""},"choices":{"M":"Start range at 0","m":"End range at n-1","Ṁ":"Both"}},{"name":"Default arity","type":"choice","default":{"name":"1","flag":""},"choices":{"2":"2","3":"3"}},{"name":"End print mode","type":"choice","default":{"name":"Default behavior","flag":""},"choices":{"j":"Join top with newlines","s":"Sum/concatenate top","d":"Deep sum of top","S":"Join top with spaces","O":"No implicit output","o":"Force implicit output","L":"Length of top","§":"Pretty-print top","G":"Maximum of top","g":"Minimum of top","Ṫ":"Sum of stack","!":"Length of stack","ṡ":"Join stack with spaces","N":"Join stack with nothing","¬":"Logical negation of top"}},{"name":"Full traceback","type":"boolean","flag":"X"},{"name":"Preset stack to 100","type":"boolean","flag":"H"},{"name":"Literate mode","type":"boolean","flag":"l"},{"name":"Don't evaluate inputs","type":"boolean","flag":"Ṡ"},{"name":"Rangify","type":"boolean","flag":"R"},{"name":"Limit list output","type":"boolean","flag":"…"}],"sugars":{"#,&":"∧","#^X":"ᵡ","#,/":"ø","#^)":"⁾","#,>":"≥","#.:":"∴","#,O":"Ọ","#,M":"Ṃ","#,5":"₅","#^i":"ᶤ","#.O":"Ȯ","#,o":"§","#^\"":"“","#^o":"ᵒ","#.d":"ḋ","#.<":"«","#^3":"³","#.I":"İ","#^s":"ᶳ","#.r":"ṙ","#^e":"ᵉ","#.i":"ı","#./":"÷","#^*":"ᵜ","#,(":"µ","#^t":"ᵗ","#.E":"Ė","#,H":"Ḥ","#^n":"ⁿ","#.l":"ŀ","#^=":"£","#^4":"Ч","#.R":"Ṙ","#,:":"∵","#.6":"ɠ","#^b":"ᵇ","#^%":"э","#,9":"₉","#.a":"ȧ","#,4":"₄","#,T":"Ṭ","#,~":"ɾ","#.@":"¤","#^H":"ᴴ","#.[":"ƛ","#.!":"⌐","#^l":"ᶪ","#,{":"₳","#.=":"≠","#.{":"λ","#.e":"ė","#,\n":"¶","#,0":"₀","#.(":"Ω","#.9":"Ɠ","#^_":"¯","#^0":"⁰","#.L":"Ŀ","#.H":"Ḣ","#.|":"Φ","#.5":"½","#^^":"↑","#.)":"Þ","#^d":"ᵈ","#.\\":"∆","#^$":"¥","#,8":"₈","#^~":"≈","#.D":"Ḋ","#,S":"Ṣ","#.A":"Ȧ","#.o":"ȯ","#^>":"→","#^p":"ᵖ","#^W":"ᵂ","#.`":"Θ","#,*":"√","#^k":"ᵏ","#^|":"ᶲ","#.f":"ḟ","#^-":"⁻","#^v":"ᵛ","#,3":"₃","#,B":"Ḅ","#.W":"Ẇ","#.M":"Ṁ","#.x":"ẋ","#.X":"Ẋ","#,|":"∨","#.>":"»","#^1":"¹","#^z":"ᶻ","#,v":"⊻","#,\"":"„","#,1":"₁","#,<":"≤","#,7":"₇","#.c":"ċ","#.B":"Ḃ","#,R":"Ṛ","#.n":"ṅ","#.p":"ṗ","#^g":"ᶢ","#^;":"↓","#.P":"Ṗ","#^(":"€","#,+":"±","#.G":"Ġ","#^`":"ᶿ","#^y":"ᵞ","#.t":"ṫ","#.;":"¦","#^2":"²","#.N":"Ṅ","#.T":"Ṫ","#,.":"•","#.*":"×","#,L":"Ḷ","#,N":"Ṇ","#^'":"”","#^f":"ᶠ","#^!":"ꜝ","#.g":"ġ","#,!":"¬","#,=":"₌","#^.":"⸠","#.s":"ṡ","#,2":"₂","#.b":"ð","#..":"…","#^u":"ᵘ","#,A":"Ạ","#.?":"¿","#^j":"ᶨ","#.h":"ḣ","#^c":"ᶜ","#^a":"ᵃ","#^:":"ϩ","#,6":"₆","#.S":"Ṡ","#,I":"Ị","#.C":"Ċ","#.m":"ṁ","#^<":"←","#.~":"ʀ","#^R":"ᴿ","#.F":"Ḟ","#^m":"ᵐ","#.&":"†","#,D":"Ḍ","#^+":"⁺"},"codepage":"ᵃᵇᶜᵈᵉᶠᴳᴴᶤᶨ\nᵏᶪᵐⁿᵒᵖᴿᶳᵗᵘᵛᵂᵡᵞᶻᶴ⸠ϩэЧᵜ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ȦḂĊḊĖḞĠḢİĿṀṄȮṖṘṠṪẆẊικȧḃċḋėḟġḣŀṁṅȯṗṙṡṫẋƒΘΦ§ẠḄḌḤỊḶṂṆỌṚṢṬ…≤≥≠₌⁺⁻⁾√∑«»⌐∴∵⊻₀₁₂₃₄₅₆₇₈₉λƛΩ₳µ∆øÞ½ʀɾ¯×÷£¥←↑→↓±¤†Π¬∧∨⁰¹²⌈⌊Ɠɠ∥∦ı„”ð€“¶ᶿᶲ•≈¿ꜝ","version":"3.4.1"}