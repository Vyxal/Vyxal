var codepage = "ᵃᵇᶜᵈᵉᶠᴳᴴᶤᶨ\nᵏᶪᵐⁿᵒᵖᴿᶳᵗᵘᵛᵂᵡᵞᶻᶴ⸠ϩэЧᵜ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ȦḂĊḊĖḞĠḢİĿṀṄȮṖṘṠṪẆẊικȧḃċḋėḟġḣŀṁṅȯṗṙṡṫẋƒΘΦ§ẠḄḌḤỊḶṂṆỌṚṢṬ…≤≥≠₌⁺⁻⁾√∑«»⌐∴∵⊻₀₁₂₃₄₅₆₇₈₉λƛΩ₳µ∆øÞ½ʀɾ¯×÷£¥←↑→↓±¤†Π¬∧∨⁰¹²⌈⌊Ɠɠ∥∦ı„”ð€“¶ᶿᶲ•≈¿ꜝ";
var codepage_descriptions ={"69":[{"overloads":"a: num -> 2^a\na: str -> evaluate (not execute) a","name":"2 Power | Evaluate","description":"two^ two** eval","token":"E"}],"138":[{"overloads":"a: num -> is a prime?\na: str -> quote a and prepend to a","name":"Is Prime? | Quine Cheese","description":"prime? quineify","token":"Ṅ"}],"101":[{"overloads":"a: num -> a % 2 == 0\na: str -> a split on newlines","name":"Is Even / Split on Newlines","description":"even? even is-even? split-on-newlines newline-split split-newlines","token":"e"},{"overloads":"-> 2.718281828459045","name":"Euler's Number","description":"euler's-number euler e-num","token":"ke"}],"249":[{"overloads":"-> chr(10)","name":"Newline","description":"newline","token":"¶"}],"234":[{"overloads":"The first input to the program","name":"First Input","description":"first-input input-0","token":"⁰"}],"0":[{"name":"Apply to Neighbours | Number of Truthy Elements","description":"To each overlapping pair, reduce it by an element\nApply a dyadic element for all pairs of neighboring elements.\nCount the number of truthy elements in a list under a mondaic element","overloads":"ȧf<monad>: Count how many items in a list are truthy after applying f to each\nᵃf<dyad>: equivalent to pushing the function, then calling ȧ","token":"ᵃ","keywords":"apply-to-neighbours: count-truthy: apply-neighbours: apply-to-neighbors: apply-neighbors: 2lvf: twolif: to-pairs: to-overlaps: count:"}],"88":[{"overloads":"a -> return a","name":"Return Statement","description":"return ret","token":"X"},{"overloads":" -> break out of the current loop","name":"Loop Break","description":"break","token":"#X"}],"170":[{"overloads":"a: num -> unique prime factors of a\na: str -> case of each character of a (uppercase = 1, lowercase = 0)","name":"Unique Prime Factors | Case Of","description":"unique-prime-factors case-of","token":"Ḅ"}],"115":[{"overloads":"a: any, b: any -> split a by b","name":"Split","description":"split","token":"s"},{"overloads":"a: num -> sin(a)","name":"Sine","description":"sin sine","token":"∆s"}],"217":[{"overloads":"a: num -> [1..a]\na: lst[num] -> apl-style iota from 1 to a\na: str -> a.upper()","name":"Inclusive One Range | Uppercase","description":"one->n one-range to-upper upper uppercase","token":"ɾ"}],"5":[{"name":"Dyadic Triple Element Lambda","description":"Turn the next three elements (whether that be a structure/modifier/element) into a dyadic lambda","overloads":"ᶠfgh: Push the equivalent of λ2|fgh} to the stack","token":"ᶠ","keywords":"***2:"}],"202":[{"overloads":"-> 100","name":"One hundred","description":"one-hundred l00","token":"₅"}],"120":[{"overloads":" -> continue the current loop","name":"Loop Continue","description":"continue","token":"#x"},{"overloads":" -> call the current function recursively","name":"Recursion | Recurse","description":"recurse","token":"x"}],"247":[{"overloads":"a: lst -> Suffixes of a","name":"Suffixes","description":"suffixes","token":"€"}],"56":[{"overloads":"8","name":"Numeric Literal","description":"\nThe number 8","token":"8"}],"142":[{"overloads":"a: lst -> sum of each element of a\na: num, b: num -> a // b","name":"Vectorised Sums | Integer Division","description":"vectorised-sums vec-sums integer-division int-div int-rizz sums","token":"Ṡ"}],"153":[{"overloads":"a: num -> prime factors of a\na: str -> a with all alphabet characters removed","name":"Prime Factors | Remove Alphabet","description":"prime-factors remove-alphabet","token":"ḟ"},{"overloads":"a: num -> for all primes less than or equal to a, push the power of that prime in the factorisation of a","name":"All Prime Exponents","description":"all-prime-exponents all-prime-exps","token":"∆ḟ"}],"174":[{"overloads":"a: lst -> sort a by length\na: str -> escape a for regex","name":"Sort by Length | Regex Escape","description":"sort-by-length sort-by-len order-by-length order-by-len length-sort len-sort re-escape regex-escape","token":"Ḷ"}],"185":[{"overloads":"a: any, b: any -> a === b (non-vectorising)","name":"Exactly Equals","description":"=== exactly-equal strictly-equal?","token":"₌"}],"42":[{"overloads":"a: num, b: num -> a ^ b\na: str, b: num -> a with the bth letter removed\na: num, b: str -> b with the ath letter removed\na: str, b: str -> trim b from both sides of a","name":"Exponentation | Remove Nth Letter | Trim","description":"exp ** pow exponent remove-letter str-trim","token":"*"}],"24":[{"name":"Invariant Under? / Vertical Scan","description":"Check if a function is invariant under a transformation / vertical scan","overloads":"ᵞf: check if top of stack is invariant under a transformation\nᵞf: scanl columns by f","token":"ᵞ","keywords":"invariant-under: vertical-scan: vscan: v-scan: invariant?: same?:"}],"37":[{"overloads":"a: num, b: num -> a % b\na: str, b: any -> a.format(b) (replace %s with b if scalar value or each item in b if vector)","name":"Modulo | String Formatting","description":"mod modulo str-format format % strfmt","token":"%"}],"25":[{"name":"Zip With / Reject by","description":"Given a dyadic function, zip two lists and reduce each by f\nGiven a monadic function, the inverse of monadic /.\nFilters where the function is falsey","overloads":"","token":"ᶻ","keywords":"zip-with: zipwith:"}],"52":[{"overloads":"-> 1000000","name":"1000000","description":"one-million l000000 l000k lm","token":"k4"},{"overloads":"4","name":"Numeric Literal","description":"\nThe number 4","token":"4"}],"14":[{"name":"Minimum By","description":"Minimum By Element","overloads":"ᵐf: Minimum of top of stack based on results of f","token":"ⁿ","keywords":"min-by: minimum-by:"}],"184":[{"overloads":"a: any, b: any -> a != b","name":"Not Equal","description":"not-equal =n't","token":"≠"}],"110":[{"overloads":"-> context variable n - defaults to lowercase alphabet if outside context","name":"Get Context Variable N","description":"get-context-n context-n c-var-n ctx-n ctx-primary","token":"n"}],"125":[{"overloads":"<structure open> <code> } <code not in structure>","name":"Close A Structure","description":"end endfor end-for endwhile end-while endlambda end-lambda end\nMatch and close the nearest open structure.","token":"}"}],"196":[{"overloads":"a: num, b: num -> a ^ b\na: str, b: str -> a + space + b","name":"Bitwise Xor","description":"bitwise-xor insert-space","token":"⊻"}],"157":[{"overloads":"num a: a + reversed(a) (as number)\nstr a: a + reversed(a)\nlst a: append reversed(a) to a","name":"Mirror","description":"mirror ab->abba","token":"ṁ"}],"189":[{"overloads":"a: num -> sqrt(a)","name":"Square Root","description":"sqrt square-root","token":"√"}],"20":[{"name":"Collect Until No Change / Neighbours All Equal?","description":"Run func on the prev result until the result no longer changes\nreturning all intermediate results\nGiven a dyadic function, apply the function to all overlapping pairs of elements\nand test if all results are equal","overloads":"ᵘf: Collect until no change","token":"ᵘ","keywords":"collect-until-no-change: until-stable: stablise: neighbours-equals:"}],"46":[{"overloads":"<integer>.<fractional>","name":"Decimal Separator","description":"\nUsed to separate the integer and fractional parts of a number","token":"."}],"93":[{"overloads":"<structure openers>] <code not in structure>","name":"Close All Structures","description":"close-all end-all\nMatch and close all open structures.","token":"]"},{"overloads":"#[item|item|item#]","name":"Close List","description":"]\nClose a list. Pushes the list to the stack when closed.","token":"#]"}],"152":[{"overloads":"a: num -> 1/a\na: str -> a with all whitespace removed","name":"Reciprocal | Remove Whitespace","description":"reciprocal recip remove-whitespace remove-space 1/","token":"ė"}],"228":[{"overloads":"-> number of context parameters","name":"Number of Context Parameters","description":"number-of-context context-number context-count","token":"#¤"},{"overloads":"¤<number>","name":"Context Paramter Index","description":"`n`\nIndex into the list of context parameters.","token":"¤"}],"57":[{"overloads":"9","name":"Numeric Literal","description":"\nThe number 9","token":"9"}],"78":[{"overloads":"a: num -> -a\na: str -> a.swapCase()\na: fun -> first non-negative integer where predicate a is true","name":"Negation | Swap Case | First Non-Negative Integer Where Predicate is True","description":"neg negate swap-case caseswap first-non-negative first-nonneg first>-1","token":"N"}],"29":[{"name":"Triple Element Lambda","description":"Turn the next three elements (whether that be a structure/modifier/element) into a lambda","overloads":"эfgh: Push the equivalent of λfgh} to the stack","token":"э","keywords":"***:"}],"216":[{"overloads":"a: num -> [0..a)\na: lst[num] -> apl-style iota from 0 until a\na: str -> a.lower()","name":"Exclusive Zero Range | Lowercase","description":"0->n zero-range lowered-range to-lower lower lowercase","token":"ʀ"}],"164":[{"overloads":"a: lst, b: num -> cart_prod([a] * n)\na: num, b: lst -> cart_prod([b] * n)\na: str, b: str -> return first index of pattern match b in target string a, -1 if not found\na: lst, b: str -> regex search vectorised\na: str|lst, b: lst -> push a, push cartesian product of b and b","name":"Cartesian Power | Regex Search for Match","description":"cartesian-power re-search regex-search","token":"ẋ"}],"179":[{"overloads":"a: lst -> sublists of a","name":"Sublists","description":"sublists","token":"Ṣ"}],"106":[{"overloads":"a: lst, b: str|num -> a join on b\na: lst, b: lst -> Intersperse elements of b within a","name":"Join On","description":"join-on join join-with join-by","token":"j"}],"238":[{"overloads":"a: num -> floor(a)\na: str -> cast a to num by ignoring non-numeric digits. Returns 0 if there's no valid number","name":"Floor","description":"floor str-num str->num str-to-num","token":"⌊"}],"121":[{"overloads":"a: num, b: num -> a in base b\na: num, b: str|lst -> a in base with alphabet b\na: lst, b: num -> each x in a in base b\na: lst, b: str|lst -> each x in a in base with alphabet b\na: str, b: str -> All matches of b in a","name":"To Base | Regex Find","description":"to-base re-find regex-find","token":"y"}],"84":[{"overloads":"a: num -> tanh(a)","name":"Hyperbolic Tangent","description":"tanh hyperbolic-tangent","token":"∆T"},{"overloads":"a: num -> 3 * a\na: str -> does a contain only alphabet characters?\na: any -> transpose a","name":"Triple | Contains Only Alphabet | Transpose","description":"triple alphabet? alphabetical? contains-only-alphabet? contains-only-alphabetical? transpose flip reverse-axes flip-axes permute-axes","token":"T"},{"overloads":"a: any -> transpose a","name":"Transpose Safe","description":"transpose-safe","token":"ÞT"}],"211":[{"overloads":"µ<code>}","name":"Open Sort Lambda","description":"sort-lam sort< sort-lambda\nOpen a lambda that automatically sorts the top of the stack by its function","token":"µ"}],"253":[{"overloads":"a: lst -> are all elements of a equal?","name":"All Equal?","description":"all-equal all-equal?","token":"≈"}],"147":[{"overloads":"a: any -> `[1, 2, 3, ..., len(a)]`","name":"Length 1-Range","description":"one->len","token":"κ"},{"overloads":"a: lst -> each item of a multiplied by its 1-based index","name":"1-Lift","description":"one-lift lift-1 l-lift","token":"Þκ"}],"61":[{"overloads":"a: any, b: any -> a == b","name":"Equals","description":"eq == equal same? equals? equal?","token":"="},{"overloads":"#=<variable>","name":"Assign Variable","description":":=\nAssign a variable to a value.","token":"#="}],"221":[{"overloads":"a: any -> register = a","name":"Set Register","description":"set-register ->register set-reg ->reg","token":"£"}],"132":[{"overloads":"a: any, b: any -> a.indexOf(b) (-1 if not found)\na: any, b: fun -> truthy indices of mapping b over a","name":"Find","description":"find","token":"Ḟ"}],"1":[{"name":"Apply Without Popping | Remove Duplicates by","description":"Apply a 2+ arity element to the stack without popping\nRemove duplicates from a list by an element","overloads":"ᵇf<dyad|triad|tetrad>: apply f to the stack without popping\nᵇf<monad>: remove duplicates from a list by applying f to each pair of elements","token":"ᵇ","keywords":"without-popping: peek: dedup-by: remove-duplicates-by:"}],"74":[{"overloads":"a: lst, b: lst -> Merge a and b\na: any, b: lst -> Prepend a to b\na: lst, b: any -> Append b to a\na: num, b: num -> num(str(a) + str(b))\na: any, b: any -> str(a) + str(b)","name":"Merge","description":"merge","token":"J"}],"206":[{"overloads":"-> \"\"","name":"Empty string","description":"empty-string <>","token":"₉"}],"89":[{"overloads":"a: any, b: num -> a repeated b times, wrapped in a list\na: num, b: any -> b repeated a times, wrapped in a list\na: lst|str, b: lst[num] -> a[_] repeated b[_] times, wrapped in a list","name":"List Repeat","description":"wrap-repeat","token":"Y"}],"133":[{"overloads":"a: any, b: fun -> group a by the results of b\na: fun, b: any -> group b by the results of a\na: num, b: num -> gcd(a, b)\na: lst[num], b: num -> gcd of b and all elements of a\na: lst[num] -> gcd of all items in a.\na: str, b: str -> all overlapping regex matches of b in a (similar to `y` but with overlaps) (JVM/JS Only)\na: str, b: lst[str] -> vectorised string overload of the above\na: lst, b: str -> vectorised pattern overload of the above","name":"Group by Function Result | Greatest Common Divisor | Find all overlapping regex matches","description":"group-by gcd re-find-overlapping regex-find-overlapping re-find-overlap regex-find-overlap","token":"Ġ"}],"116":[{"overloads":"a: lst -> a[-1]","name":"Tail | Last Item","description":"tail last last-item","token":"t"},{"overloads":"a: num -> tan(a)","name":"Tangent","description":"tan tangent","token":"∆t"}],"243":[{"overloads":"<real>ı<imaginary>","name":"Imaginary Number","description":"i\nUsed to represent the imaginary unit","token":"ı"}],"248":[{"overloads":"a: lst -> a join on nothing\na: str -> is a alphanumeric?\na: fun -> First positive integer ([1, 2, 3, ...]) for which a returns true\na: num -> abs(a) <= 1","name":"Join on Nothing | First Positive Integer | Is Alphanumeric | Insignificant?","description":"nothing-join concat-fold join-on-nothing empty-join single-string as-single-string first-positive-integer first-n>0 is-alphanumeric is-alphanum is-alnum abs<=1 insignificant? insignificant insig? insig","token":"“"},{"overloads":"\"<compressed number>“","name":"Base-252 Compressed Number","description":"\nDecompress and push a number, converted from a bijective base 252 number using the codepage","token":"“"}],"220":[{"overloads":"a: num, b: num -> a / b\na: str, b: num -> a split into b equal sized chunks, with the last chunk potentially smaller\na: num, b: str -> b split into a equal sized chunks, with the last chunk potentially smaller\na: str, b: str -> Split a on the string b","name":"Divide | Split","description":"divide div str-split str-n-pieces n-strings str-pieces string-pieces","token":"÷"},{"overloads":"a: lst, b: num -> a split into b equal sized chunks, with the last chunk potentially smaller\na: str, b: num -> a split into b equal sized chunks, with the last chunk potentially smaller","name":"Into N Pieces | Split Into N Pieces","description":"into-n-pieces split-into-n-pieces","token":"Þ÷"}],"102":[{"overloads":"a: lst -> Flattened a","name":"Flatten","description":"flatten flat","token":"f"},{"overloads":"-> \"Fizz\"","name":"Fizz","description":"fizz FIZZ","token":"kf"}],"233":[{"overloads":"a: any, b: any -> a || b","name":"Logical Or","description":"or logical-or","token":"∨"}],"6":[{"name":"Dyadic Quadruple Element Lambda","description":"Turn the next four elements (whether that be a structure/modifier/element) into a dyadic lambda","overloads":"ᵍfghi: Push the equivalent of λ2|fghi} to the stack","token":"ᴳ","keywords":"****2:"}],"60":[{"overloads":"a: num, b: num -> a < b\na: str, b: num -> a < str(b)\na: num, b: str -> str(a) < b\na: str, b: str -> a < b","name":"Less Than","description":"lt less less-than < less? smaller?","token":"<"},{"overloads":"a: num -> Arg(a)","name":"Argument / Phase / Angle","description":"arg phase angle","token":"∆<"}],"117":[{"overloads":"a: lst|str|num -> a with duplicates removed","name":"Uniquify","description":"uniquify","token":"u"}],"85":[{"overloads":"a: any -> uninterleave a","name":"Uninterleave","description":"uninterleave","token":"U"}],"201":[{"overloads":"-> 64","name":"Sixty-four","description":"sixty-four b4","token":"₄"}],"160":[{"overloads":"a: lst -> List partitions of a\na: num -> Integer partitions of a (all possible ways to sum to a)","name":"List Partitions | Integer Partitions","description":"list-partitions list-parts integer-partitions int-partitions int-parts partitions","token":"ṗ"},{"overloads":"a: num -> real part of a, imaginary part of a","name":"Complex Parts","description":"complex-parts","token":"∆ṗ"}],"70":[{"overloads":"a: fun, b: lst -> Filter b by truthy results of a\na: lst, b: fun -> Filter a by truthy results of b\na: num, b: num -> a from base b to base 10\na: num, b: str|lst -> a from base with alphabet b to base 10","name":"Filter by Function | From Base","description":"filter keep-by from-base 10->b","token":"F"},{"overloads":"-> \"FizzBuzz\"","name":"FizzBuzz","description":"fizzbuzz FB","token":"kF"}],"192":[{"overloads":"a: num, b: num -> a >> b\na: num, b: str -> b padded to length a with spaces appended\na: str, b: num -> a padded to length b with spaces appended\na: str, b: str -> a padded to length of b with spaces appended","name":"Bitshift Right","description":"bitwise-right-shift right-shift right-pad pad-right","token":"»"}],"165":[{"overloads":"a: lst, b: lst -> partition a after truthy indices in b","name":"Partition After Truthy Indices","description":"partition-after-truthy","token":"ƒ"}],"33":[{"overloads":"a: num -> a!","name":"Factorial","description":"fact factorial","token":"!"}],"28":[{"name":"Double Element Lambda","description":"Turn the next two elements (whether that be a structure/modifier/element) into a lambda","overloads":"ϩfg: Push the equivalent of λfg} to the stack","token":"ϩ","keywords":"**:"}],"38":[{"overloads":"a: any, b: any -> list(a) ++ [b]","name":"Append","description":"append","token":"&"}],"21":[{"name":"Vectorise","description":"Vectorises","overloads":"ᵛf: f but vectorised","token":"ᵛ","keywords":"vectorise: vec: v:"}],"137":[{"overloads":"a: str|lst, b: num -> return every b-th element of a. If b is zero, mirror: prepend a to its reverse.\na: num, b: str|lst -> return every a-th element of b. If a is zero, mirror: append b to its reverse.\na: lst, b: lst -> a * b (matrix multiply)\na: str, b: str -> does the entirety of a match b?","name":"Modular | Matrix Multiply | Regex Full Match?","description":"nth-items modular maxtrix-multiply mat-multiply mat-mul regex-full-match? full-match?","token":"Ṁ"}],"92":[{"overloads":"a: any -> dump all values on the stack","name":"Dump","description":"dump","token":"\\"}],"229":[{"overloads":"a: any -> lengths of consecutive groups of a","name":"Length of Consecutive Groups","description":"len-consecutive gvl gavel","token":"†"}],"252":[{"overloads":"-> \"*\"","name":"Asterisk","description":"asterisk","token":"•"}],"197":[{"overloads":"-> 10","name":"Ten","description":"ten l0","token":"₀"}],"65":[{"overloads":"-> \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","name":"Uppercase Alphabet","description":"uppercase-alphabet uppercase-alpha A->Z A-Z amazon","token":"kA"},{"overloads":"a: str -> is (a) a vowel? vectorises for strings len > 1\na: list -> is (a) all truthy?","name":"All Truthy | All() | Is Vowel?","description":"all is-vowel? vowel?","token":"A"},{"overloads":"a: str -> the index of a in the alphabet (one-indexed)\na: int -> the a-th letter of the alphabet (one-indexed)","name":"Letter Number Swap","description":"letter-to-number number-to-letter letter-number-swap number-letter-swap a1-swap","token":"øA"},{"overloads":"a: lst[num] => arithmetic mean of a (sum(a) / len(a))","name":"Arithmetic Mean","description":"mean arithmetic-mean","token":"∆A"}],"97":[{"overloads":"-> \"abcdefghijklmnopqrstuvwxyz\"","name":"Lowercase Alphabet","description":"lowercase-alphabet lowercase-alpha a->z a-z","token":"ka"},{"overloads":"a: str -> is (a) uppercase? vectorises for strings len > 1\na: list -> is (a) any truthy?","name":"Any Truthy | Any() | Is Uppercase?","description":"any is-uppercase? is-upper? upper?","token":"a"}],"224":[{"overloads":"a: any -> indices that will sort a","name":"Grade Up","description":"grade-up","token":"↑"}],"156":[{"overloads":"any a, any b, any c -> transliterate(a,b,c) (in a, replace b[0] with c[0], b[1] with c[1], b[2] with c[2], ...)\na: fun, b: fun, c: any -> call b on c until a(c) is falsy","name":"Transliterate | Call While","description":"transliterate call-while","token":"ŀ"}],"9":[{"name":"Loop and Collect While Unique","description":"Loop and Collect While Unique","overloads":"ᶨf: Loop and collect while unique","token":"ᶨ","keywords":"collect-while-unique:"}],"188":[{"overloads":"a: lst, b: lst -> multi-set intersection of a and b","name":"Multi-Set Intersection","description":"multi-set-intersection multi-set-intersect","token":"Þ⁾"},{"overloads":"a: lst, b: lst -> set intersection of a and b\na: str, b: str -> set intersection of a and b\na: lst, b: num -> flatten a by depth b\na: num, b: str -> each character in b repeated a times\na: str, b: num -> each character in a repeated b times","name":"Set Intersection | Flatten By Depth | Character Multiply","description":"set-intersection intersection flatten-by-depth intersect","token":"⁾"},{"overloads":"a: any, b: any -> a prepended and appended to b","name":"Surround","description":"surround","token":"ø⁾"}],"53":[{"overloads":"5","name":"Numeric Literal","description":"\nThe number 5","token":"5"}],"169":[{"overloads":"a: lst, b: lst[num], c: any -> a[b[0]][b[1]]...[b[n]] = c","name":"Multidimensional Assignment","description":"md-assign","token":"ÞẠ"},{"overloads":"a: lst, b: num, c: non-fun -> assign c to a at the index b / a[b] = c\na: lst, b: num, c: fun -> a[b] c= <stack items> (augmented assignment to list)\na: lst, b: lst, c: lst -> assign c to a at the indices in b\na: str, b: str, c: str -> replace regex matches of pattern b in string a with c\na: str, b: str, c: fun -> replace regex matches of pattern b in string a with the result of applying c to each match\na: str, b: fun, c: str -> replace regex matches of pattern c in string a with the result of applying b to each match\na: fun, b: str, c: str -> replace regex matches of pattern c in string b with the result of applying a to each match\na: rec, b: str, c: str -> a.b = c","name":"Assign","description":"assign assign-at assign<> assign<x> a<x>= a<x>=y a<x>?=y set-item apply-at re-sub regex-sub @=>","token":"Ạ"}],"141":[{"overloads":"a: any -> rotate left once","name":"Rotate Left","description":"abc->bca rot-left rotate-left","token":"Ṙ"}],"109":[{"overloads":"-> context variable m - defaults to uppercase alphabet if outside context","name":"Get Context Variable M","description":"get-context-m context-m c-var-m ctx-m ctx-secondary","token":"m"}],"77":[{"overloads":"a: any, b: fun -> a.map(b)\na: fun, b: any -> b.map(a)\na: lst, b: lst -> a molded to the shape of b\na: num, b: num -> how many times b divides a\na: str, b: str -> regex match of b in a\na: list, b: str -> regex match of b of each element of a\na: str, b: list -> regex match of each element of b in a","name":"Map Function | Mold Lists | Multiplicity","description":"map mold multiplicity times-divide re-match regex-match","token":"M"}],"193":[{"overloads":"a: num -> ~a","name":"Bitwise Not","description":"bitwise-not","token":"⌐"}],"212":[{"overloads":"∆<character>","name":"Mathematical Digraphs","description":"\nUsed for math-related digraphs","token":"∆"}],"96":[{"overloads":" -> push the length of the stack","name":"Length of Stack","description":"length-of-stack stack-length stack-len","token":"`"},{"overloads":"#:`<name>","name":"Defined Modifier Call","description":"$:\nCall a defined modifier","token":"#:`"}],"124":[{"overloads":"<structure open> <code> | <code> ...","name":"Structure Branch","description":": -> else: else elif else-if body do branch then in using no? => from\nDelimit the next section in a structure.","token":"|"}],"225":[{"overloads":" -> rotate the entire stack right once","name":"Rotate Stack Right","description":"rotate-stack-right","token":"→"}],"173":[{"overloads":"a: any, b: num, c: any -> insert c at position b in a\na: any, b: lst, c: any -> insert c at positions b in a\na: any, b: lst[num], c: lst -> insert c[i] at position b[i] in a","name":"Insert","description":"insert insert-at","token":"Ị"},{"overloads":"a: lst => indices of truthy elements of a","name":"Indices Where Truthy","description":"where where-truthy indices-truthy indices-where-truthy","token":"ÞỊ"}],"13":[{"name":"Maximum By","description":"Maximum By Element","overloads":"ᵐf: Maximum of top of stack based on results of f","token":"ᵐ","keywords":"max-by: maximum-by:"}],"129":[{"overloads":"a: lst -> a ++ a ++ a ++ ...\na: num -> a > 0","name":"Cycle | Is Positive?","description":"cycle is-positive? positive? >0?","token":"ÞĊ"},{"overloads":"a: lst, b: lst -> set xor of a and b","name":"Set XOR","description":"set-xor","token":"Ċ"}],"41":[{"overloads":"<structure open><structure open> <code> ) <code not in structure>","name":"Close Two Structures","description":"end-end\nMatch and close two open structures.","token":")"}],"134":[{"overloads":"a: str -> a[1:]\na: any -> toList(a)[1:]","name":"Head Remove | Behead","description":"head-remove behead","token":"Ḣ"}],"73":[{"overloads":"a: lst, b: lst -> Interleave a and b\na: any, b: fun -> Reject elements of a by applying b","name":"Interleave / Reject By Function","description":"interleave reject","token":"I"},{"overloads":"a: num -> Im(a)","name":"Imaginary Part","description":"imag imaginary imaginary-part","token":"∆I"}],"2":[{"name":"Reduce Columns | Map Over Suffixes","description":"Reduce columns of a 2d list by a function\nMap an element over suffixes","overloads":"","token":"ᶜ","keywords":"reduce-columns: map-over-suffixes: fold-cols: foldl-cols: fold-columns-by: reduce-columns-by: over-suffixes:"}],"205":[{"overloads":"-> -1","name":"-1","description":"negative-one neg-1 -1","token":"₈"}],"128":[{"overloads":"a: fun -> Execute a without popping\na: str -> Evaluate a as Vyxal without popping\na: lst -> Return a boolean array with 1s at the indices in a list.\na: num -> Is a == 1?","name":"Execute lambda without popping | Evaluate as Vyxal without popping | Boolean Mask | Is 1?","description":"peek-call exec-peek boolean-mask bool-mask strict-boolify is-1?","token":"Ḃ"}],"237":[{"overloads":"a: num -> ceil(a)","name":"Ceiling","description":"ceiling ceil","token":"⌈"}],"105":[{"overloads":"a: lst, b: lst[num] -> a[b[0]][b[1]]...[b[n]]","name":"Multidimensional Index","description":"md-index","token":"Þi"},{"overloads":"a: lst, b: num -> a[b]\na: num, b: num -> b[x] for x in a\na: lst, b: lst -> a[_] for _ in b\na: str, b: lst[num] -> ''.join(a[i] for i in b)\na: str, b: lst[any] -> x[a] for x in b\na: lst, b: str -> x[b] for x in a\na: any, b: fun -> Apply b on a and collect unique values. Does include the initial value.\na: str, b: str -> enclose b in a (a[0:len(a)//2] + b + a[len(a)//2:])\na: rec, b: str -> get member b of a\na: str, b: rec -> get member a of b","name":"Index | Collect Unique Application Values | Enclose | Read Member","description":"index at item-at nth-item collect-unique enclose @<=","token":"i"},{"overloads":"-> Literally just pi","name":"Pi","description":"pi E-14 E-1415926535897","token":"ki"}],"244":[{"overloads":"a: lst -> a join on spaces\na: num -> a < 0","name":"Join on Spaces | Is Negative? (Used when not closing a string)","description":"space-join join-on-spaces is-negative? negative?","token":"„"},{"overloads":"\"<compressed string>„","name":"Base-252 Compressed String","description":"\nDecompress and push a string, converted from a bijective base 252 number using the codepage","token":"„"}],"166":[{"overloads":"a: lst, b: num>=0 -> [a[0], a[1], ..., a[b-1]]\na: lst, b: num<0 -> [a[b + 1], a[b + 2], ..., a[-1]]\na: lst, b: lst[num] -> apl style take","name":"Zero Slice Until","description":"0>b zero-slice zero-slice-until take slice-to lst-truncate first-n-items first-n","token":"Θ"}],"34":[{"overloads":"\"string contents\"","name":"Open/Close String","description":"\nOpen/close a string. If the string is closed, push it to the stack. Closes all string types","token":"\""}],"148":[{"overloads":"a: num, b: num -> |a - b|\na: lst, b: fun -> apply b to each pair of neighbours in a [applies to windows of length 2]","name":"Absolute Difference | Apply to Neighbours","description":"abs-diff apply-to-neighbours","token":"ȧ"}],"45":[{"overloads":"a: num, b: num -> a - b\na: str, b: num -> a + b '-'s (or '-'s + a if b < 0)\na: num, b: str -> a '-'s + b (or b + '-'s if a < 0)\na: str, b: str -> a with b removed","name":"Subtraction","description":"sub subtract minus str-remove str-remove-all remove-all","token":"-"}],"161":[{"overloads":"a: num -> a from degrees to radians (a * pi / 180)","name":"Degrees to Radians","description":"deg2rad deg-to-rad","token":"∆ṙ"},{"overloads":"a: any -> rotate right once","name":"Rotate Right","description":"abc->cab rot-right rotate-right","token":"ṙ"}],"64":[{"overloads":"a: lst -> cumulative sums of a","name":"Cumulative Sums","description":"cumulative-sums cumsums cumsum cum-sum -_-","token":"@"},{"overloads":"#:@<name>","name":"Defined Element Call","description":"$@\nCall a defined element","token":"#:@"}],"180":[{"overloads":"-> The set of all integers","name":"Set of Integers","description":"ZZ","token":"ÞṬ"},{"overloads":"a: any, b: any -> Trim all elements of b from both sides of a.\na: fun, b: any -> cumulative reduce b by function a","name":"Trim / Cumulative Reduce","description":"trim scanl cumulative-reduce","token":"Ṭ"}],"17":[{"name":"Apply to Register","description":"Apply a function to the register. Essentially, push\nthe register value to the stack, apply the function, and\nthen pop back into the register","overloads":"ᴿf: Apply f to the register","token":"ᴿ","keywords":"apply-to-register: to-register: to-reg:"}],"149":[{"overloads":"a: num -> parity of a (a % 2)\na: str -> last half of a","name":"Bit | Parity | Last Half of String","description":"bit parity str-last-half","token":"ḃ"}],"176":[{"overloads":"-> The set of all natural numbers","name":"Set of Natural Numbers","description":"NN","token":"ÞṆ"},{"overloads":"Ṇ<code>|<initial vector>}","name":"Generator Structure","description":"relation< generate< generate-from<\nOpen a generator structure. Allows for generator expressions","token":"Ṇ"}],"191":[{"overloads":"a: num, b: num -> a << b\na: num, b: str -> b padded to length a with spaces prepended\na: str, b: num -> a padded to length b with spaces prepended\na: str, b: str -> a padded to length of b with spaces prepended","name":"Bitshift Left","description":"bitwise-left-shift left-shift left-pad pad-left","token":"«"}],"22":[{"name":"Dip","description":"Stash the top of the stack temporarily, and then apply\nthe function. Finally, push the stashed value","overloads":"ᵂf: pop M, apply f, push M","token":"ᵂ","keywords":"dip:"}],"44":[{"overloads":"a -> printed to stdout","name":"Print","description":"print puts out println","token":","}],"204":[{"overloads":"-> 256","name":"Two hundred fifty-six","description":"two-hundred-fifty-six Z56 z56","token":"₇"}],"27":[{"name":"Single Element Lambda","description":"Turn the next element (whether that be a structure/modifier/element) into a lambda","overloads":"⸠f: Push the equivalent of λf} to the stack","token":"⸠","keywords":"*:"}],"59":[{"overloads":"a, b -> [a, b]","name":"Pair","description":"pair","token":";"}],"118":[{"overloads":"a: num -> a - 1","name":"Decrement","description":"decr decrement","token":"v"},{"overloads":"*a, f -> f vectorised over however many arguments in a. It is recommended to use the modifier instead","name":"[Internal Use] Vectorise (Element Form) ","description":"","token":"#v"}],"71":[{"overloads":"a: lst[num] => geometric mean of a (prod(a) ** (1 / len(a)))","name":"Geometric Mean","description":"geometric-mean","token":"∆G"},{"overloads":"a: lst -> Maximum of a\na: non-lst, b: non-lst -> Maximum of a and b\na: lst, b: fun -> Call b infinitely with items of a as starting values","name":"Monadic Maximum | Dyadic Maximum | Generate From Function | Vectorised Maximum","description":"max maximum generator","token":"G"}],"12":[{"name":"Loop While Unique","description":"Loop While Unique - similar to ᶨ, but doesn't collect","overloads":"ᶪf: Loop while unique","token":"ᶪ","keywords":"loop-while-unique:"}],"54":[{"overloads":"-> \"0123456789abcdef\"","name":"Hex Digits (lowercase)","description":"hex-digits hex-digs hex-lowercase hex-lower hex-l hex-lc","token":"k6"},{"overloads":"6","name":"Numeric Literal","description":"\nThe number 6","token":"6"}],"144":[{"overloads":"a: lst, b: num -> a wrapped in chunks of length b\na: fun, b: num -> first b truthy integers where a is truthy","name":"Wrap to Length | Predicate Slice From 0","description":"wrap-length pred-slice-0 size-chunk","token":"Ẇ"}],"49":[{"overloads":"-> 1000","name":"1000","description":"one-thousand l000 lk","token":"k1"},{"overloads":"1","name":"Numeric Literal","description":"\nThe number 1","token":"1"}],"236":[{"overloads":"a: num -> a ** 2\na: str -> a split into pairs","name":"Square | Pairs","description":"square pairs","token":"²"}],"181":[{"overloads":"a: num -> a + 2\na: lst -> [x[0] for x in a]","name":"Increment Twice | Vectorised Head","description":"incr-twice vec-head","token":"…"}],"86":[{"overloads":"a: lst -> each element of a reversed\na: num -> 1 - a\na: str -> a converted to title case","name":"Vectorised Reverse | Complement | Title Case","description":"vectorised-reverse vec-reverse complement titlecase title-case","token":"V"}],"159":[{"overloads":"a: any -> bool(a)","name":"Boolify","description":"boolify","token":"ȯ"},{"overloads":"a: lst[lst] -> Grid neighbours of a - up, down, left, right, diagonals\na: lst[lst], b: num -> Grid neighbours of a - right, down, left, up of a and start from direction b => 0: right, 1: down, 2: left, 3: up, 4: down-right, 5: up-left, 6: down-left, 7: up-left. Negative b does not include middle, positive b does","name":"Grid Neighbours (Diagonals)","description":"grid-neighbours-diagonals grid-neighbors-diagonals adjacent-cells-diagonals adj-cells-diagonals surrounding-cells-diagonals eight-cells","token":"Þȯ"}],"187":[{"overloads":"a: num -> a ** 3\na: str -> a split into chunks of length 3","name":"Cube | Threes","description":"cube threes","token":"⁻"}],"172":[{"overloads":"a: lst|str -> Push a[1:], then a[0] onto the stack","name":"Head Extract Under","description":"head-extract-under split-at-head-under head-extract-swap headless-swap head-swap","token":"Ḥ"}],"113":[{"overloads":"a: str -> enclose a in quotes, escape backslashes and quote marks\na: num -> nth prime","name":"Quotify | Nth Prime","description":"quotify nth-prime prime-n","token":"q"},{"overloads":"a: num -> push a list of the power of each prime in the prime factors of a","name":"Prime Exponents","description":"prime-exponents prime-exps","token":"∆q"}],"219":[{"overloads":"a: num, b: num -> a * b\na: num, b: str -> b repeated a times\na: str, b: num -> a repeated b times\na: str, b: str -> ring translate a according to b","name":"Multiplication","description":"mul multiply times str-repeat * ring-trans","token":"×"}],"81":[{"overloads":"a: lst, b: num -> a with bth element removed\na: str, b: str -> regex groups of a with regex b","name":"Remove At | Regex Groups","description":"remove-at re-groups regex-groups","token":"Q"},{"overloads":"a -> Stop program execution","name":"Exit | Quit","description":"exit quit","token":"#Q"}],"230":[{"overloads":"a: lst -> product of a","name":"Product","description":"product prod","token":"Π"}],"76":[{"overloads":"-> \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"","name":"Lowercase and Uppercase Alphabet","description":"lowercase-and-uppercase-alphabet lowercase-and-uppercase-alpha a->zA->Z a-zA-Z","token":"kL"},{"overloads":"a: num, b: num -> lcm(a, b)\na: lst[num], b: num -> lcm of b and all elements of a\na: lst[num] -> lcm of all items in a.","name":"Least Common Multiple","description":"lcm","token":"∆L"},{"overloads":"a: any -> Length of a","name":"Length | Length of List","description":"length len length-of len-of size","token":"L"}],"7":[{"name":"Apply To Head","description":"Apply element only to the head of list","overloads":"ᴴf: Apply f to the head of the top of the stack","token":"ᴴ","keywords":"apply-to-head:"}],"245":[{"overloads":"a: lst -> a join on newlines\na: str -> a padded to a multiple of 8 with 0s\na: num -> a if a == 1 push context variable n","name":"Join On Newlines | Pad Binary to Mod 8 | Context if 1","description":"join-newlines newline-join join-on-newlines binary-pad-8 bin-pad-8 one?->context one?->n","token":"”"},{"overloads":"\"<compressed string>”","name":"Dictionary Compressed String","description":"\nDecompress and push a string using SSS compression, shamelessly stolen from Jelly","token":"”"}],"39":[{"overloads":"a: lst -> sublists of a joined on spaces then that joined on newlines","name":"Join Sublists on Spaces then Newlines (Element Form of ')","description":"join-sublists join-sublists-on-spaces-then-newlines grid","token":"'"},{"overloads":"'<character>","name":"One Character String","description":"\nPush the next character as a string","token":"'"}],"98":[{"overloads":"a: num -> convert a to binary\na: str -> bin(ord(x) for x in a)","name":"Convert To Binary","description":"to-binary dec->bin decimal->bin","token":"b"},{"overloads":"-> \"Buzz\"","name":"Buzz","description":"buzz BUZZ","token":"kb"}],"208":[{"overloads":"ƛ<code>}","name":"Open Map Lambda","description":"map-lam map< map-lambda\nOpen a lambda that automatically maps its function to the top of the stack","token":"ƛ"}],"103":[{"overloads":"a: lst -> Minimum of a\na: non-lst, b: non-lst -> Minimum of a and b\na: lst, b: fun -> Call b infinitely with items of a as starting values (dyadic)","name":"Monadic Minimum | Dyadic Minimum | Generate From Function (Dyadic) | Vectorised Minimum","description":"min minimum generator-dyadic","token":"g"},{"overloads":"-> Literally just phi","name":"Phi","description":"phi golden-ratio golden l-618033988749895","token":"kg"}],"140":[{"overloads":"a: lst -> Permutations of a","name":"Permutations","description":"permutations perms","token":"Ṗ"},{"overloads":"a: num -> push r, theta (polar coordinates of 'a', which is a complex number)","name":"Polar Parts","description":"polar-parts","token":"∆Ṗ"}],"213":[{"overloads":"ø<character>","name":"String Digraphs","description":"\nUsed for string-related digraphs","token":"ø"}],"91":[{"overloads":"<condition> [<ontrue>|<onfalse>}","name":"Ternary Statement","description":"? ?->\nOpen a ternary statement. Pop condition, if truthy, run <ontrue>, else run <onfalse>","token":"["},{"overloads":"#[item|item|item#]","name":"Open List","description":"[\nOpen a list. Pushes the list to the stack when closed.","token":"#["},{"overloads":"#:[<var>|<var>|<var>]","name":"Variable Unpacking","description":":=[\nUnpack the top of the stack into a list of variables.","token":"#:["}],"66":[{"overloads":"a: num -> str(a) from binary\na: str -> int(a, 2)\na: lst -> int(a, 2), using list of digits","name":"Convert From Binary","description":"from-binary bin->dec bin->decimal","token":"B"},{"overloads":"-> \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"","name":"Uppercase and lowercase","description":"uppercase-and-lowercase uppercase-and-lowercase-alpha A->Za->z A-Za-z","token":"kB"}],"155":[{"overloads":"a: lst|str -> Push a[0], then a[1:] onto the stack","name":"Head Extract","description":"head-extract split-at-head","token":"ḣ"}],"198":[{"overloads":"-> 16","name":"Sixteen","description":"sixteen l6","token":"₁"}],"108":[{"overloads":"-> \"ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba\"","name":"Upper and Lowercase Alphabet Reversed","description":"upper-and-lowercase-alphabet-reversed upper-and-lowercase-alpha-reversed Z->Az->a Z-Az-a","token":"kl"},{"overloads":"a: lst -> Length of each item in a","name":"Length of Each Item","description":"length-vectorised length-vect len-vect len-vectorised vec-len vec-length vlen","token":"l"}],"240":[{"overloads":"a: lst -> min(a) without popping a","name":"Minimum without popping","description":"min-no-pop","token":"ɠ"}],"251":[{"overloads":"a: any -> str(a)","name":"Stringify","description":"to-string stringify str","token":"ᶲ"}],"130":[{"overloads":"a: num, b: num -> a % b == 0\na: str, b: num -> a + ' ' * b\na: num, b: str -> b + ' ' * a\na: lst, b: fun -> Remove duplicates from a by applying b to each element\na: str, b: str -> span of first regex match of b in a","name":"Divides? | Append Spaces | Remove Duplicates by Function","description":"divides? +-spaces dedup-by re-span regex-span","token":"Ḋ"}],"223":[{"overloads":" -> rotate the entire stack left once","name":"Rotate Stack Left","description":"rotate-stack-left","token":"←"}],"135":[{"overloads":"a: num, b: num -> a.real + b.real * i\na: str|lst, b: num -> a[b:]\na: lst, b: lst[num] -> apl style drop\na: any, b: fun -> Apply b on a and collect unique values (until fixpoint). Does not include the initial value.","name":"Drop/Zero Slice From | Collect While Unique | Complex Number","description":"drop zero-slice-from slice-from collect-while-unique complex","token":"İ"}],"167":[{"overloads":"a: lst, b: num -> a[1:b]\na: num, b: lst -> b[1:a]","name":"Slice from 1","description":"one->b one-slice","token":"Φ"}],"35":[{"overloads":"##<comment>","name":"Comment","description":"\nComment out the rest of the line","token":"##"},{"overloads":"#<character>","name":"Miscellaneous Digraphs","description":"\nUsed for miscellaneous digraphs","token":"#"}],"226":[{"overloads":"a: any -> indices that will reverse-sort a","name":"Grade Down","description":"grade-down","token":"↓"}],"3":[{"name":"Dyadic Single Element Lambda","description":"Turn the next element (whether that be a structure/modifier/element) into a dyadic lambda","overloads":"ᵈf: Push the equivalent of λ2|f} to the stack","token":"ᵈ","keywords":"*2:"}],"241":[{"name":"Parallel Apply","description":"Parallel apply two elements to the top of the stack","overloads":"","token":"∥","keywords":"parallel-apply: para-apply: paraply: !!:"}],"80":[{"overloads":"-> All of printable ascci. That excludes newline","name":"Printable Ascii","description":"printable-ascii all-ascii","token":"kP"},{"overloads":"a: lst -> Prefixes of a","name":"Prefixes","description":"prefixes","token":"P"},{"overloads":"-> The set of all primes","name":"Set of All Primes","description":"PP primes","token":"ÞP"}],"162":[{"overloads":"a: num -> asin(a)","name":"Arcsine / Inverse Sine","description":"asin arcsin arcsine","token":"∆ṡ"},{"overloads":"a: fun, b: any -> sort iterable b by function a\na: any, b: fun -> sort iterable a by function b\na: lst, b: lst -> set difference of a and b\na: lst, b: num|str -> remove b from a\na: num|str, b: lst -> remove a from b","name":"Sort by Function Object | Partition by Numbers | Set Difference","description":"sort-by sortby sort-by-fun sortbyfun sort-fun sortfun partition-by set-difference set-diff","token":"ṡ"}],"255":[{"overloads":"a: num -> a + 1","name":"Increment","description":"incr increment","token":"ꜝ"}],"209":[{"overloads":"Ω<code>}","name":"Open Filter Lambda","description":"filter-lam filter< filter-lambda\nOpen a lambda that automatically filters the top of the stack by its function","token":"Ω"}],"112":[{"overloads":"-> All punctuation characters","name":"Punctuation","description":"punctuation punct","token":"kp"},{"overloads":"a: lst, b: any -> b prepended to a","name":"Prepend","description":"prepend","token":"p"}],"123":[{"overloads":"#{<if condition>|<code>|<else if condition>|<code>|<else code>}","name":"If/Elif/Else Statement","description":"if\nOpen an if statement. Allows for if/elif/else statements","token":"#{"},{"overloads":"{<condition>|<code>}","name":"While Loop","description":"while while<\nOpen a while loop. While the top of the stack is truthy, execute code.","token":"{"}],"194":[{"overloads":"a: num, b: num -> a & b","name":"Bitwise And","description":"bitwise-and","token":"∴"}],"145":[{"overloads":"a: list, b: list -> cartesian product of a and b","name":"Cartesian Product","description":"cartesian-product cartesian cart-prod cart","token":"Ẋ"},{"overloads":"a: list, b: list -> cartesian product of a and b in the standard order, but without accounting for infinite lists","name":"Cartesian Product Unsafe","description":"cartesian-product-unsafe cartesian-unsafe cart-prod-unsafe cart-unsafe","token":"ÞẊ"}],"48":[{"overloads":"a: lst|str, b: num -> a padded with 0s to length b. Positive b prepends 0s, negative b appends 0s\na: lst|str, b: lst|str -> a padded with 0s to length of b. Positive b prepends 0s, negative b appends 0s","name":"Zero Pad","description":"zero-pad pizza-tower","token":"Þ0"},{"overloads":"0","name":"Numeric Literal","description":"\nThe number 0","token":"0"}],"63":[{"overloads":"->  -> input","name":"Get Input","description":"get-input input stdin readline","token":"?"},{"overloads":"A list of all inputs to the program","name":"All Inputs","description":"all-inputs inputs all-stdin all-stdin?","token":"#?"}],"18":[{"name":"Sort By","description":"Sort By Element / Scanl","overloads":"ᶳf: Sort top of stack based on results of f\nᶳf: Cumulatively reduce a list of items","token":"ᶳ","keywords":"sort-by: scanl:"}],"150":[{"overloads":"a: num -> acos(a)","name":"Arccosine / Inverse Cosine","description":"acos arccos arccosine","token":"∆ċ"},{"overloads":"a: num, b: num -> a choose b\na: str, b: str -> are the character sets of a and b equal?\na: fun, b: any -> run a on b until the result no longer changes returning all intermediate results","name":"N Choose K (Binomial Coefficient) | Character Set Equal? | Repeat Until No Change","description":"n-choose-k ncr nck choose binomial char-set-equal? char-set-eq? until-stable","token":"ċ"},{"overloads":"a: lst, b: lst -> multi-set xor of a and b","name":"Multi-Set XOR","description":"multi-set-xor","token":"Þċ"}],"95":[{"overloads":"a ->","name":"Pop and Discard","description":"pop discard","token":"_"}],"50":[{"overloads":"-> 10000","name":"10000","description":"ten-thousand l0000 l0k","token":"k2"},{"overloads":"2","name":"Numeric Literal","description":"\nThe number 2","token":"2"}],"67":[{"overloads":"a: num -> cosh(a)","name":"Hyperbolic Cosine","description":"cosh hyperbolic-cosine","token":"∆C"},{"overloads":"a: lst, b: any -> count occurrences of b in a\na: any, b: lst -> count occurrences of a in b\na: any, b: any -> count non-overlapping occurrences of b (stringified) in a (stringified)","name":"Count","description":"count","token":"C"},{"overloads":"a: str -> compress a using the dictionary","name":"Compress String Using Dictionary","description":"compress-dict dict-comp compress","token":"#C"}],"199":[{"overloads":"-> 26","name":"Twenty-six","description":"twenty-six Z6 z6","token":"₂"}],"16":[{"name":"Map Over Prefixes","description":"Map an element over the prefixes of a list","overloads":"ᵖf: Map f over prefixes","token":"ᵖ","keywords":"map-over-prefixes: over-prefixes:"}],"127":[{"overloads":"a: num -> |a|\na: str -> keep alphabet characters of a","name":"Absolute Value | Keep Alphabet Characters","description":"abs absolute-value keep-alphabet","token":"Ȧ"}],"31":[{"name":"Lambda to Newline","description":"Scan elements to the left until a newline is found. Push a\nlambda with all of the scanned elements","overloads":"<elements>ᵜ: Push a lambda","token":"ᵜ","keywords":"<-}"}],"177":[{"overloads":"a -> printed to stdout without popping","name":"Print without popping","description":"print-no-pop","token":"Ọ"}],"182":[{"overloads":"a: num, b: num -> a <= b\na: str, b: num -> a <= str(b)\na: num, b: str -> str(a) <= b\na: str, b: str -> a <= b","name":"Less Than Or Equal To","description":"le less-than-or-equal-to","token":"≤"}],"154":[{"overloads":"a: any -> group consecutive identical items of lst(a)","name":"Group By Consecutive Items","description":"group-by-consecutive","token":"ġ"}],"11":[{"name":"Key","description":"Map an element over the groups formed by identical items.","overloads":"ᵏf: Map f over the groups formed by identical items","token":"ᵏ","keywords":"key:"}],"72":[{"overloads":"-> \"Hello, World!\"","name":"Hello, World!","description":"hello-world! HW!","token":"kH"},{"overloads":"a: lst[num] => harmonic mean of a (len(a) / sum(1 / a))","name":"Harmonic Mean","description":"harmonic-mean","token":"∆H"},{"overloads":"a: num -> a in hexadecimal\na: str -> a as a hexadecimal number to base 10","name":"Hexadecimal | To Hexadecimal","description":"hex hexadecimal to-hex to-hexadecimal","token":"H"}],"175":[{"overloads":"a: num -> -1 ** a\na: str -> a split on spaces","name":"-1 Power Of | Split on Spaces","description":"neg-one-power-of neg1** neg1^ neg1-power-of neg1-power split-on-spaces split-spaces space-split","token":"Ṃ"},{"overloads":"a: lst[lst] -> matrix inverse of a","name":"Matrix Inverse","description":"matrix-inverse","token":"ÞṂ"}],"143":[{"overloads":"a: lst -> a[:-1]\na: str -> a[:-1]","name":"Init","description":"init remove-last","token":"Ṫ"},{"overloads":"y: num, x: num -> atan2(y, x)","name":"Dyadic Arctangent / Dyadic Inverse Tangent","description":"atan2 arctan2 arctangent2","token":"∆Ṫ"}],"43":[{"overloads":"a: num, b: num -> a + b\na: num, b: str -> a + b\na: str, b: num -> a + b\na: str, b: str -> a + b","name":"Addition","description":"add + plus","token":"+"}],"99":[{"overloads":"a: num -> cos(a)","name":"Cosine","description":"cos cosine","token":"∆c"},{"overloads":"a: any, b: lst -> is element a in list b?\na: any, b: any -> is str(b) in str(a)?","name":"Contains","description":"contains in","token":"c"},{"overloads":"a: str -> compress a using base 252\na: num -> compress a using base 252","name":"Base-252 Compress String or Number","description":"compress-252 compress-b","token":"#c"}],"87":[{"overloads":"a, b, c, ..., -> [a, b, c, ...]","name":"Wrap","description":"wrap","token":"W"}],"203":[{"overloads":"-> 128","name":"One hundred twenty-eight","description":"one-hundred-twenty-eight l28","token":"₆"}],"218":[{"overloads":"a: lst -> forward pairwise differences of a","name":"Deltas","description":"deltas pairwise-differences differences","token":"¯"}],"104":[{"overloads":"a: lst -> [a[0], a[-1]]\na: str -> [a[0], a[-1]]\na: cmx -> [real, imaginary]\na: num -> [digit[0], digit[-1]]","name":"Ends","description":"ends sides edges","token":"Þh"},{"overloads":"-> \"Hello World\"","name":"Hello World","description":"hello-world HW","token":"kh"},{"overloads":"a: lst -> a[0]","name":"Head | First Item","description":"head first first-item","token":"h"}],"250":[{"overloads":"a: lst -> Push a, then push a reversed","name":"Bifuricate","description":"bifuricate bifur bif furry uwu dup-rev dup-reverse owo","token":"ᶿ"}],"231":[{"overloads":"a: any -> !a","name":"Logical Not","description":"non-vec-not non-vec-logical-not","token":"¬"}],"40":[{"overloads":"<iterable> (<variable>|<code>}","name":"For Loop","description":"for for< do-to-each each-as\nOpen a for loop. For each item in the top of the stack, execute code, storing loop variable.","token":"("}],"26":[{"overloads":"ᶴ<character><character>","name":"Two Character String","description":"\nPush the next two characters as a string","token":"ᶴ"}],"158":[{"overloads":"a: any -> palindromise a","name":"Palindromise","description":"palindromise palindrome ab->aba","token":"ṅ"},{"overloads":"a: lst, b: lst -> multi-set difference of a and b","name":"Multi-Set Difference","description":"multi-set-difference multi-set-diff","token":"Þṅ"}],"186":[{"overloads":"a: lst -> powerset of a","name":"Powerset","description":"powerset","token":"⁺"}],"171":[{"overloads":"Ḍ<predicate>|<container> }","name":"Open Decision Problem Structure","description":"exists<\nOpen a decision problem structure. Returns whether an iterable has any items that match a predicate","token":"Ḍ"}],"139":[{"overloads":"_ -> push a copy of the second item on the stack over the first\na b -> a b a","name":"Over","description":"over","token":"Ȯ"},{"overloads":"a: lst[lst] -> Grid neighbours of a - up, down, left, right, diagonals - wrapping around\na: lst[lst], b: num -> Grid neighbours of a - right, down, left, up of a, wrapping around and start from direction b => 0: right, 1: down, 2: left, 3: up, 4: down-right, 5: up-left, 6: down-left, 7: up-left. Negative b does not include middle, positive b does","name":"Grid Neighbours (Diagonals, Wrap Around)","description":"grid-neighbours-diagonals-wrap grid-neighbors-diagonals-wrap adjacent-cells-diagonals-wrap adj-cells-diagonals-wrap surrounding-cells-diagonals-wrap eight-cells-wrap","token":"ÞȮ"}],"23":[{"name":"Scan Fixed Point","description":"Scan a function until it reaches a fixed point","overloads":"ᵡf: scan f until a fixed point is reached / apply until a previous value is repeated, collecting intermediate results","token":"ᵡ","keywords":"scan-fix:"}],"55":[{"overloads":"7","name":"Numeric Literal","description":"\nThe number 7","token":"7"}],"114":[{"overloads":"-> \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"","name":"Digits, Lowercase, Uppercase","description":"digits-lowercase-uppercase digs-lower-upper o9azAZ o-9a-zA-Z","token":"kr"},{"overloads":"a: str, b: str, c: str -> replace all instances of b in a with c\na: fun, b: any, c: any -> reduce items in zip(b, c) by a","name":"Replace","description":"replace zip-with","token":"r"}],"8":[{"name":"First Index Where","description":"Find the first index where an element is truthy","overloads":"ᶤf: find the first index where f is truthy","token":"ᶤ","keywords":"first-index-where: first-index-of: ind-of: find-by:"}],"75":[{"overloads":"a: num -> Factors of a\na: str -> Is a numeric?","name":"Factors | Is Numeric?","description":"factors divisors is-numeric is-num is-number is-num? is-number?","token":"K"}],"207":[{"overloads":"λ<parameters>|<code>}","name":"Open Lambda","description":"lam lambda {\nOpen a lambda.","token":"λ"}],"82":[{"overloads":"-> \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"","name":"Digits, Uppercase, Lowercase","description":"digits-uppercase-lowercase digs-upper-lower o9AZaz o-9A-Za-z","token":"kR"},{"overloads":"a: lst, b: lst[num] => a reshaped to shape b","name":"Reshape","description":"reshape","token":"ÞR"},{"overloads":"a: num -> Re(a)","name":"Real Part","description":"real real-part","token":"∆R"},{"overloads":"a: fun, b: any -> reduce iterable b by function a\na: any, b: fun -> reduce iterable a by function b\na: num, b: num -> the range [a, b)\na: str, b: num|str -> does regex pattern b match haystack a?\na: lst, b: lst -> union of a and b","name":"Reduce by Function Object | Dyadic Range | Regex Match | Set Union","description":"fun-reduce reduce fold-by range a->b regex-match? re-match? has-regex-match? fold union to","token":"R"},{"overloads":"#:R<name>|#$restricted #=private #!public}","name":"Record Definition","description":"record\nDefine a record with members","token":"#:R"}],"214":[{"overloads":"Þ<character>","name":"List Digraphs","description":"\nUsed for list-related digraphs","token":"Þ"}],"119":[{"overloads":"a -> [a]","name":"Wrap Singleton","description":"wrap-singleton enlist","token":"w"}],"58":[{"overloads":"a -> a, a","name":"Duplicate","description":"dup","token":":"},{"overloads":"#::<mode><name>|<arg>|<arg>...|<code>}","name":"Element/Modifier Definition","description":"define\nDefine a custom element/modifier that can be used in programs","token":"#::"}],"235":[{"overloads":"The second input to the program","name":"Second Input","description":"second-input input-1","token":"¹"}],"246":[{"overloads":"-> \" \"","name":"Space","description":"space","token":"ð"}],"151":[{"overloads":"a: num -> a from radians to degrees (a * 180 / pi)","name":"Radians to Degrees","description":"rad2deg rad-to-deg","token":"∆ḋ"},{"overloads":"a: lst, b: lst -> Dot product of a and b\na: num, b: num -> Convert a to bijective base b\na: lst, b: fun -> First index of a where b is truthy","name":"Dot Product | To Bijective Base | First Index Where Predicate Truthy","description":"dot-product bijective-base dot-prod first-index-where _*","token":"ḋ"}],"36":[{"overloads":"a, b -> b, a","name":"Swap","description":"swap","token":"$"},{"overloads":"#$<variable>","name":"Retrieve Variable","description":"$\nPush the value of a variable.","token":"#$"}],"168":[{"overloads":"a -> printed to stdout without newline","name":"Print without newline","description":"print-no-newline","token":"§"}],"146":[{"overloads":"a: lst -> each item of a multiplied by its 0-based index","name":"0-Lift","description":"zero-lift lift-0 O-lift","token":"Þι"},{"overloads":"a: any -> `[0, 1, 2, ..., len(a)-1]`","name":"Length 0-Range","description":"zero->len","token":"ι"}],"30":[{"name":"Quadruple Element Lambda","description":"Turn the next four elements (whether that be a structure/modifier/element) into a lambda","overloads":"Чfghi: Push the equivalent of λfghi} to the stack","token":"Ч","keywords":"****:"}],"51":[{"overloads":"-> 100000","name":"100000","description":"one-hundered-thousand l00000 l00k","token":"k3"},{"overloads":"3","name":"Numeric Literal","description":"\nThe number 3","token":"3"}],"190":[{"overloads":"a: lst -> sum of a","name":"Sum","description":"sum /+ +/","token":"∑"}],"183":[{"overloads":"a: num, b: num -> a >= b\na: str, b: num -> a >= str(b)\na: num, b: str -> str(a) >= b\na: str, b: str -> a >= b","name":"Greater Than Or Equal To","description":"ge greater-than-or-equal-to","token":"≥"}],"19":[{"name":"Map as Stacks","description":"Map a function over the top of the stack, treating each iteration\nas if it were a stack of items. Essentially, dump before mapping\n","overloads":"","token":"ᵗ","keywords":"vec-dump: map-dump:"}],"210":[{"overloads":"₳<code>}","name":"Open Reduce/Accumulate Lambda","description":"reduce-lam reduce< reduce-lambda fold< fold-lam fold-lambda\nOpen a lambda that automatically reduces/accumulates the top of the stack by its function","token":"₳"}],"107":[{"overloads":"k<character>","name":"Constant Digraphs","description":"\nUsed for constant-related digraphs","token":"k"}],"79":[{"overloads":"a: str -> ord(a)\na: num -> chr(a)","name":"Ord/Chr","description":"ord chr","token":"O"},{"overloads":"a: lst[lst] -> Grid neighbours of a - up, down, left, right - wrapping around\na: lst[lst], b: num -> Grid neighbours of a - right, down, left, up of a, wrapping around and start from direction b => 0: right, 1: down, 2: left, 3: up. Negative b does not include middle, positive b does","name":"Grid Neighbours (Wrap Around)","description":"grid-neighbours-wrap grid-neighbors-wrap adjacent-cells-wrap adj-cells-wrap surrounding-cells-wrap","token":"ÞO"}],"195":[{"overloads":"a: num, b: num -> a | b","name":"Bitwise Or","description":"bitwise-or","token":"∵"}],"94":[{"overloads":" -> reverse the stack","name":"Reverse Stack","description":"reverse-stack rev-stack","token":"^"},{"overloads":"-> \"0123456789ABCDEF\"","name":"Hex Digits (uppercase)","description":"hex-uppercase hex-upper hex-u hex-uc","token":"k^"}],"239":[{"overloads":"a: lst -> max(a) without popping a","name":"Maximum without popping","description":"max-no-pop","token":"Ɠ"}],"242":[{"name":"Parallel Apply and Wrap","description":"Parallel apply two elements to the top of the stack\nand wrap the result in a list","overloads":"","token":"∦","keywords":"parallel-apply-and-wrap: para-apply-and-wrap: <paraply>: <!!>:"}],"4":[{"name":"Dyadic Double Element Lambda","description":"Turn the next two elements (whether that be a structure/modifier/element) into a dyadic lambda","overloads":"ᵉfg: Push the equivalent of λ2|fg} to the stack","token":"ᵉ","keywords":"**2:"}],"126":[{"overloads":"*a, f -> f applied to the stack without popping items. Use the modifier instead.","name":"[Internal Use] Apply Without Popping (Element Form)","description":"","token":"#~"},{"overloads":"#:~<name>","name":"Retrieve Original Element","description":"$.\nCall the original, vyxal defined, meaning of an element. Useful for when you want to define a new element with the same name as a built-in one","token":"#:~"},{"overloads":"~<character><character>","name":"Two Byte Number","description":"\nPush the next two bytes as a number, converted from bijective base 255 using the codepage","token":"~"}],"136":[{"overloads":"a: num, b: num -> log_b(a)\na: fun, b: any -> apply until a previous value is repeated, collecting intermediate results\na: str, b: str -> a same length as b\na: str, b: num -> len(a) == b","name":"Logarithm | Scan Fixpoint | Same Length? | Length Equals?","description":"log logarithm scan-fixpoint scan-fix same-length? same-length length-equals? length-equals len-eq?","token":"Ŀ"}],"15":[{"name":"Outer Product | Table","description":"Outer product","overloads":"ᵒf: Pop two lists, then make a matrix from them by applying f to each pair of elements","token":"ᵒ","keywords":"outer-product: table:"}],"68":[{"overloads":"-> \"|/-\\_\"","name":"Lines","description":"lines dashes bars","token":"kD"},{"overloads":"a -> [a, a, a]","name":"Triplicate","description":"trip","token":"D"}],"62":[{"overloads":"a: num, b: num -> a > b\na: str, b: num -> a > str(b)\na: num, b: str -> str(a) > b\na: str, b: str -> a > b","name":"Greater Than","description":"gt greater greater-than greater? bigger?","token":">"},{"overloads":"<function> #> <variable>","name":"Augmented Assignment","description":":>\nApply a function to a variable value and store the result in the same variable.","token":"#>"},{"overloads":"#:>><name>|<arg1>|<type1>|<arg2>|<type2>...|<impl>}","name":"Extension Method","description":"extension\nDefine an overload on a custom element based on types. Requires at least one type to be specified.","token":"#:>>"}],"178":[{"overloads":"a: any -> reverse a","name":"Reverse","description":"reverse rev","token":"Ṛ"},{"overloads":"a: num => principal a-th root of unity (e^(2i * pi / a))","name":"Principal Root Of Unity","description":"root-of-unity","token":"∆Ṛ"}],"131":[{"overloads":"a: fun -> Execute a\na: str -> Evaluate a as Vyxal\na: num -> 10 ** n","name":"Execute lambda | Evaluate as Vyxal | Power with base 10","description":"execute-lambda evaluate-as-vyxal power-base-10 call @","token":"Ė"}],"47":[{"name":"Foldl | Reduce By | Filter by","description":"Reduce a list by an element","overloads":"/f: reduce by element f","token":"/","keywords":"foldl: reduce: /: fold: reduceby:-"}],"163":[{"overloads":"a: num -> atan(a)","name":"Arctangent / Inverse Tangent","description":"atan arctan arctangent","token":"∆ṫ"},{"overloads":"a: lst|str -> Push a[:-1], a[-1] onto the stack","name":"Last Extract | Tail Extract","description":"last-extract split-at-last tail-extract","token":"ṫ"}],"200":[{"overloads":"-> 32","name":"Thirty-two","description":"thirty-two E2","token":"₃"}],"122":[{"overloads":"-> \"zyxwvutsrqponmlkjihgfedcba\"","name":"Lowercase Alphabet Reversed","description":"lowercase-alphabet-reversed lowercase-alpha-reversed z->a nozama","token":"kz"},{"overloads":"a: num -> [0, 1, ..., a]\na: lst[num] -> apl-style iota from 0 to a\na: str -> is a lowercase?","name":"Inclusive zero Range | Is Lowercase","description":"inclusive-zero-range zero->n is-lowercase? lowercase? lower?","token":"z"}],"83":[{"overloads":"a: num -> sinh(a)","name":"Hyperbolic Sine","description":"sinh hyperbolic-sine","token":"∆S"},{"overloads":"a: any -> convert to list and sort ascending","name":"Sort ascending","description":"sort sortasc sort-asc","token":"S"}],"215":[{"overloads":"a: num -> a / 2\na: str -> a split into two pieces","name":"Halve","description":"halve","token":"½"}],"222":[{"overloads":" -> push the value of the register","name":"Get Register","description":"get-register get-reg register <-register <-reg","token":"¥"}],"232":[{"overloads":"a: any, b: any -> a && b","name":"Logical And","description":"and logical-and","token":"∧"}],"100":[{"overloads":"-> \"0123456789\"","name":"Digits","description":"digits digs o-9","token":"kd"},{"overloads":"a: num -> a * 2\na: str -> a + a","name":"Double","description":"double","token":"d"}],"90":[{"overloads":"-> \"ZYXWVUTSRQPONMLKJIHGFEDCBA\"","name":"Uppercase Alphabet Reversed","description":"uppercase-alphabet-reversed uppercase-alpha-reversed Z->A","token":"kZ"},{"overloads":"a: lst, b: lst -> zip a and b\na: lst, b: fun -> [[x, b(x)] for x in a]\na: fun, b: lst -> [[a(x), x] for x in b]","name":"Zip","description":"zip zip-map","token":"Z"}],"111":[{"overloads":"-> \"01234567\"","name":"Octal Digits","description":"octal-digits octal-digs o-7","token":"ko"},{"overloads":"a: lst[lst] -> Grid neighbours of a - right, down, left, up of a\na: lst[lst], b: num -> Grid neighbours of a - right, down, left, up of a and start from direction b => 0: right, 1: down, 2: left, 3: up. Negative b does not include middle, positive b does","name":"Grid Neighbours","description":"grid-neighbours grid-neighbors adjacent-cells adj-cells surrounding-cells","token":"Þo"},{"overloads":"a: lst, b: num -> Overlapping slices of a of length b\na: lst|str -> Overlapping slices of a of length 2","name":"Overlap | Overlapping Slices","description":"overlap overlaps overlapping overlapping-slices","token":"o"}],"254":[{"overloads":"-> The number of inputs to the program","name":"Number of Inputs","description":"number-of-inputs count-inputs count-stdin","token":"#¿"},{"name":"Conditional Execution","description":"Pop the top of the stack, and, if it's truthy, apply a function","overloads":"","token":"¿","keywords":"if-top: if:"}],"227":[{"overloads":"a: num -> sign of a","name":"Sign","description":"sign","token":"±"}]}