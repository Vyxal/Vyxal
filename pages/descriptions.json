{"69":[{"overloads":"a: num -> 2^a\na: str -> evaluate (not execute) a","name":"2 Power | Evaluate","description":"two^ two** eval","token":"E"}],"138":[{"overloads":"a: lst -> a join on nothing\na: str -> is a alphanumeric?\na: fun -> First positive integer ([1, 2, 3, ...]) for which a returns true","name":"Join on Nothing | First Positive Integer | Is Alphanumeric","description":"nothing-join concat-fold join-on-nothing empty-join single-string as-single-string first-positive-integer first-n>0 is-alphanumeric is-alphanum is-alnum","token":"Ṅ"}],"101":[{"overloads":"a: num -> a % 2 == 0\na: str -> a split on newlines","name":"Is Even / Split on Newlines","description":"even? even is-even? split-on-newlines newline-split split-newlines","token":"e"}],"249":[{"overloads":"-> chr(10)","name":"Newline","description":"newline","token":"¶"}],"234":[{"overloads":"The first input to the program","name":"First Input","description":"first-input input-0","token":"⁰"}],"0":[{"overloads":"apply-to-neighbours: count-truthy: apply-neighbours: apply-to-neighbors: apply-neighbors: 2lvf: twolif: to-pairs: to-overlaps: count:","name":"Apply to Neighbours | Number of Truthy Elements","description":"To each overlapping pair, reduce it by an element\nApply a dyadic element for all pairs of neighboring elements.\nCount the number of truthy elements in a list under a mondaic element\nȧf<monad>: Count how many items in a list are truthy after applying f to each\nᵃf<dyad>: equivalent to pushing the function, then calling ȧ","token":"ᵃ"}],"88":[{"overloads":"a -> return a","name":"Return Statement","description":"return ret","token":"X"},{"overloads":" -> break out of the current loop","name":"Loop Break","description":"break","token":"#X"}],"170":[{"overloads":"a: num -> unique prime factors of a\na: str -> case of each character of a (uppercase = 1, lowercase = 0)","name":"Unique Prime Factors | Case Of","description":"unique-prime-factors case-of","token":"Ḅ"}],"115":[{"overloads":"a: any, b: any -> split a by b","name":"Split","description":"split","token":"s"},{"overloads":"*a, f -> f applied to each prefix of a. Use the modifier instead.","name":"[Internal Use] Map Prefixes (Element Form)","description":"","token":"#|map-prefixes"},{"overloads":"*a, f -> f applied to each suffix of a. Use the modifier instead.","name":"[Internal Use] Map Suffixes (Element Form)","description":"","token":"#|map-suffixes"},{"overloads":"*a, f -> each column of a reduced by f. Use the modifier instead.","name":"[Internal Use] Reduce Columns (Element Form)","description":"","token":"#|reduce-cols"}],"217":[{"overloads":"a: num -> [1..a]\na: str -> a.upper()","name":"Inclusive One Range | Uppercase","description":"one->n one-range to-upper upper uppercase","token":"ɾ"}],"5":[{"overloads":"***2:","name":"Dyadic Triple Element Lambda","description":"Turn the next three elements (whether that be a structure/modifier/element) into a dyadic lambda\nᶠfgh: Push the equivalent of λ2|fgh} to the stack","token":"ᶠ"}],"202":[{"overloads":"-> 100","name":"One hundred","description":"one-hundred","token":"₅"}],"120":[{"overloads":" -> continue the current loop","name":"Loop Continue","description":"continue","token":"#x"},{"overloads":" -> call the current function recursively","name":"Recursion | Recurse","description":"recurse","token":"x"}],"247":[{"overloads":"a: lst -> Suffixes of a","name":"Suffixes","description":"suffixes","token":"€"}],"142":[{"overloads":"a: lst -> sum of each element of a","name":"Vectorised Sums","description":"vectorised-sums vec-sums","token":"Ṡ"}],"153":[{"overloads":"a: num -> prime factors of a\na: str -> a with all non-alphabet characters removed","name":"Prime Factors | Remove Non-Alphabet","description":"prime-factors remove-non-alphabet","token":"ḟ"}],"174":[{"overloads":"a: lst -> sort a by length","name":"Sort by Length","description":"sort-by-length sort-by-len order-by-length order-by-len length-sort len-sort","token":"Ḷ"}],"185":[{"overloads":"a: any, b: any -> a === b (non-vectorising)","name":"Exactly Equals","description":"=== exactly-equal strictly-equal?","token":"₌"}],"42":[{"overloads":"a: num, b: num -> a ^ b\na: str, b: num -> a with the bth letter removed\na: num, b: str -> b with the ath letter removed\na: str, b: str -> trim b from both sides of a","name":"Exponentation | Remove Nth Letter | Trim","description":"exp ** pow exponent remove-letter str-trim","token":"*"}],"24":[{"overloads":"invariant-under: vertical-scan: vscan: v-scan: invariant?: same?:","name":"Invariant Under? / Vertical Scan","description":"Check if a function is invariant under a transformation / vertical scan\nᵞf: check if top of stack is invariant under a transformation\nᵞf: scanl columns by f","token":"ᵞ"}],"37":[{"overloads":"a: num, b: num -> a % b\na: str, b: any -> a.format(b) (replace %s with b if scalar value or each item in b if vector)","name":"Modulo | String Formatting","description":"mod modulo str-format format % strfmt","token":"%"}],"25":[{"overloads":"zip-with: zipwith:","name":"Zip With / Reject by","description":"\n      |Given a dyadic function, zip two lists and reduce each by f\n      | and then check if all results are equal.\n      |Given a monadic function, the inverse of monadic /.\n      |Filters where the function is falsey","token":"ᶻ"}],"14":[{"overloads":"min-by: minimum-by:","name":"Minimum By","description":"Minimum By Element\nᵐf: Minimum of top of stack based on results of f","token":"ⁿ"}],"184":[{"overloads":"a: any, b: any -> a !== b (non-vectorising)","name":"Not Equal","description":"not-equal =n't","token":"≠"}],"110":[{"overloads":"->  -> context variable n","name":"Get Context Variable N","description":"get-context-n context-n c-var-n ctx-n ctx-primary","token":"n"},{"overloads":"*a, f -> scanl each column. Use the modifier instead.","name":"[Internal Use] Vectorised Scan (Element Form)","description":"","token":"#|vscan"}],"196":[{"overloads":"a: num, b: num -> a ^ b","name":"Bitwise Xor","description":"bitwise-xor","token":"⊻"}],"157":[{"overloads":"num a: a + reversed(a) (as number)\nstr a: a + reversed(a)\nlst a: append reversed(a) to a","name":"Mirror","description":"mirror","token":"ṁ"}],"189":[{"overloads":"a: num -> sqrt(a)","name":"Square Root","description":"sqrt square-root","token":"√"}],"20":[{"overloads":"collect-until-no-change: until-stable: stablise: neighbours-equals:","name":"Collect Until No Change / Neighbours All Equal?","description":"Run func on the prev result until the result no longer changes\nreturning all intermediate results\nGiven a dyadic function, apply the function to all overlapping pairs of elements\nand test if all results are equal\nᵘf: Collect until no change","token":"ᵘ"}],"152":[{"overloads":"a: num -> 1/a\na: str -> a with all whitespace removed","name":"Reciprocal | Remove Whitespace","description":"reciprocal recip remove-whitespace remove-space 1/","token":"ė"}],"78":[{"overloads":"a: num -> -a\na: str -> a.swapCase()\na: fun -> first non-negative integer where predicate a is true","name":"Negation | Swap Case | First Non-Negative Integer Where Predicate is True","description":"neg negate swap-case caseswap first-non-negative first-nonneg first>-1","token":"N"}],"29":[{"overloads":"***:","name":"Triple Element Lambda","description":"Turn the next three elements (whether that be a structure/modifier/element) into a lambda\nэfgh: Push the equivalent of λfgh} to the stack","token":"э"}],"216":[{"overloads":"a: num -> [0..a)\na: str -> a.lower()","name":"Exclusive Zero Range | Lowercase","description":"0->n zero-range lowered-range to-lower lower lowercase","token":"ʀ"}],"164":[{"overloads":"a: lst, b: num -> cart_prod([a] * n)","name":"Cartesian Power","description":"cartesian-power","token":"ẋ"}],"179":[{"overloads":"a: lst -> sublists of a","name":"Sublists","description":"sublists","token":"Ṣ"}],"253":[{"overloads":"a: lst -> are all elements of a equal?","name":"All Equal?","description":"all-equal all-equal?","token":"≈"}],"106":[{"overloads":"a: lst, b: str|num -> a join on b\na: lst, b: lst -> Intersperse elements of b within a","name":"Join On","description":"join-on join join-with join-by","token":"j"}],"238":[{"overloads":"a: num -> floor(a)","name":"Floor","description":"floor","token":"⌊"}],"121":[{"overloads":"*a, f -> The iconic parallel apply. Use the modifier instead bingus.","name":"[Internal Use] Parallel Apply (Element Form)","description":"","token":"#|para-apply"},{"overloads":"a: num, b: num -> a in base b\na: num, b: str|lst -> a in base with alphabet b\na: lst, b: num -> each x in a in base b\na: lst, b: str|lst -> each x in a in base with alphabet b","name":"To Base","description":"to-base","token":"y"},{"overloads":"*a, f -> minimum of a by f. Use the modifier instead.","name":"[Internal Use] Minimum By (Element Form)","description":"","token":"#|minimum-by"},{"overloads":"*a, f -> maximum of a by f. Use the modifier instead.","name":"[Internal Use] Maximum By (Element Form)","description":"","token":"#|maximum-by"}],"84":[{"overloads":"a: num -> 3 * a\na: str -> does a contain only alphabet characters?\na: any -> transpose a","name":"Triple | Contains Only Alphabet | Transpose","description":"triple alphabet? alphabetical? contains-only-alphabet? contains-only-alphabetical? transpose flip reverse-axes flip-axes permute-axes","token":"T"},{"overloads":"a: any -> transpose a","name":"Transpose Safe","description":"transpose-safe","token":"ÞT"}],"147":[{"overloads":"a: any -> `[1, 2, 3, ..., len(a)]`","name":"Lenght 1-Range","description":"one->len","token":"κ"}],"61":[{"overloads":"a: any, b: any -> a == b","name":"Equals","description":"eq == equal same? equals? equal?","token":"="}],"221":[{"overloads":"a: any -> register = a","name":"Set Register","description":"set-register ->register set-reg ->reg","token":"£"}],"132":[{"overloads":"a: any, b: any -> a.indexOf(b) (-1 if not found)\na: any, b: fun -> truthy indices of mapping b over a","name":"Find","description":"find","token":"Ḟ"}],"116":[{"overloads":"a: lst -> a[-1]","name":"Tail | Last Item","description":"tail last last-item","token":"t"}],"1":[{"overloads":"without-popping: peek: dedup-by: remove-duplicates-by:","name":"Apply Without Popping | Remove Duplicates by","description":"Apply a 2+ arity element to the stack without popping\nRemove duplicates from a list by an element\nᵇf<dyad|triad|tetrad>: apply f to the stack without popping\nᵇf<monad>: remove duplicates from a list by applying f to each pair of elements","token":"ᵇ"}],"74":[{"overloads":"a: lst, b: lst -> Merge a and b\na: any, b: lst -> Prepend a to b\na: lst, b: any -> Append b to a\na: num, b: num -> num(str(a) + str(b))\na: any, b: any -> str(a) + str(b)","name":"Merge","description":"merge","token":"J"}],"206":[{"overloads":"-> []","name":"Empty array","description":"empty-list nil-list new-list","token":"₉"}],"89":[{"overloads":"a: any, b: num -> a repeated b times, wrapped in a list\na: num, b: any -> b repeated a times, wrapped in a list\na: lst|str, b: lst[num] -> a[_] repeated b[_] times, wrapped in a list","name":"List Repeat","description":"wrap-repeat","token":"Y"}],"133":[{"overloads":"a: any, b: fun -> group a by the results of b\na: fun, b: any -> group b by the results of a","name":"Group by Function Result","description":"group-by","token":"Ġ"}],"220":[{"overloads":"a: num, b: num -> a / b\na: str, b: str -> Split a on the regex b","name":"Divide | Split","description":"divide div str-split","token":"÷"}],"102":[{"overloads":"a: lst -> Flattened a","name":"Flatten","description":"flatten flat","token":"f"}],"233":[{"overloads":"a: any, b: any -> a || b","name":"Logical Or","description":"or logical-or","token":"∨"}],"6":[{"overloads":"****2:","name":"Dyadic Quadruple Element Lambda","description":"Turn the next four elements (whether that be a structure/modifier/element) into a dyadic lambda\nᵍfghi: Push the equivalent of λ2|fghi} to the stack","token":"ᴳ"}],"60":[{"overloads":"a: num, b: num -> a < b\na: str, b: num -> a < str(b)\na: num, b: str -> str(a) < b\na: str, b: str -> a < b","name":"Less Than","description":"lt less less-than < less? smaller?","token":"<"}],"117":[{"overloads":"a: lst|str|num -> a with duplicates removed","name":"Uniquify","description":"uniquify","token":"u"}],"85":[{"overloads":"a: any -> uninterleave a","name":"Uninterleave","description":"uninterleave","token":"U"}],"201":[{"overloads":"-> 64","name":"Sixty-four","description":"sixty-four","token":"₄"}],"160":[{"overloads":"a: lst -> List partitions of a\na: num -> Integer partitions of a (all possible ways to sum to a)","name":"List Partitions | Integer Partitions","description":"list-partitions list-parts integer-partitions int-partitions int-parts","token":"ṗ"}],"70":[{"overloads":"a: fun, b: lst -> Filter b by truthy results of a\na: lst, b: fun -> Filter a by truthy results of b\na: num, b: num -> a from base b to base 10\na: num, b: str|lst -> a from base with alphabet b to base 10","name":"Filter by Function | From Base","description":"filter keep-by from-base 10->b","token":"F"}],"192":[{"overloads":"a: num, b: num -> a >> b","name":"Bitshift Right","description":"bitwise-right-shift right-shift","token":"»"}],"165":[{"overloads":"a: lst, b: lst -> partition a after truthy indices in b","name":"Partition After Truthy Indices","description":"partition-after-truthy","token":"ƒ"}],"33":[{"overloads":"a: num -> a!","name":"Factorial","description":"fact factorial","token":"!"}],"28":[{"overloads":"**:","name":"Double Element Lambda","description":"Turn the next two elements (whether that be a structure/modifier/element) into a lambda\nϩfg: Push the equivalent of λfg} to the stack","token":"ϩ"}],"38":[{"overloads":"a: any, b: any -> list(a) ++ [b]","name":"Append","description":"append","token":"&"}],"21":[{"overloads":"a: num -> a - 1","name":"Decrement","description":"decr decrement","token":"ᵛ"}],"137":[{"overloads":"a: str|lst, b: num -> return every b-th element of a. If b is zero, mirror: prepend a to its reverse.\na: num, b: str|lst -> return every a-th element of b. If a is zero, mirror: append b to its reverse.\na: lst, b: lst -> a * b (matrix multiply)\na: str, b: str -> does the entirety of a match b?","name":"Modular | Matrix Multiply | Regex Full Match?","description":"nth-items modular maxtrix-multiply mat-multiply mat-mul regex-full-match? full-match?","token":"Ṁ"}],"92":[{"overloads":"a: any -> dump all values on the stack","name":"Dump","description":"dump","token":"\\"}],"229":[{"overloads":"a: any -> lengths of consecutive groups of a","name":"Length of Consecutive Groups","description":"len-consecutive gvl gavel","token":"†"}],"252":[{"overloads":"-> \"*\"","name":"Asterisk","description":"asterisk","token":"•"}],"197":[{"overloads":"-> 10","name":"Ten","description":"ten","token":"₀"}],"65":[{"overloads":"a: str -> is (a) a vowel? vectorises for strings len > 1\na: list -> is (a) all truthy?","name":"All Truthy | All() | Is Vowel?","description":"all is-vowel? vowel?","token":"A"}],"97":[{"overloads":"a: str -> is (a) uppercase? vectorises for strings len > 1\na: list -> is (a) any truthy?","name":"Any Truthy | Any() | Is Uppercase?","description":"any is-uppercase? is-upper? upper?","token":"a"}],"224":[{"overloads":"a: any -> indices that will sort a","name":"Grade Up","description":"grade-up","token":"↑"}],"156":[{"overloads":"any a, any b, any c -> transliterate(a,b,c) (in a, replace b[0] with c[0], b[1] with c[1], b[2] with c[2], ...)\na: fun, b: fun, c: any -> call b on c until a(c) is falsy","name":"Transliterate | Call While","description":"transliterate call-while","token":"ŀ"}],"9":[{"overloads":"collect-while-unique:","name":"Loop and Collect While Unique","description":"Loop and Collect While Unique\nᶨf: Loop and collect while unique","token":"ᶨ"}],"188":[{"overloads":"a: num, b: str -> each character in b repeated a times\na: any, b: any -> a prepended and appended to b","name":"Surround | Character Multiply","description":"surround character-multiply","token":"⁾"}],"169":[{"overloads":"a: lst, b: num, c: non-fun -> assign c to a at the index b / a[b] = c\na: lst, b: num, c: fun -> a[b] c= <stack items> (augmented assignment to list)\na: lst, b: lst, c: lst -> assign c to a at the indices in b","name":"Assign","description":"assign assign-at assign<> assign<x> a<x>= a<x>=y a<x>?=y set-item apply-at","token":"Ạ"}],"141":[{"overloads":"a: any -> rotate left once","name":"Rotate Left","description":"abc->bca rot-left rotate-left","token":"Ṙ"}],"109":[{"overloads":"->  -> context variable m","name":"Get Context Variable M","description":"get-context-m context-m c-var-m ctx-m ctx-secondary","token":"m"}],"225":[{"overloads":" -> rotate the entire stack right once","name":"Rotate Stack Right","description":"rotate-stack-right","token":"→"}],"77":[{"overloads":"a: any, b: fun -> a.map(b)\na: fun, b: any -> b.map(a)\na: lst, b: lst -> a molded to the shape of b\na: num, b: num -> how many times b divides a","name":"Map Function | Mold Lists | Multiplicity","description":"map mold multiplicity times-divide","token":"M"}],"193":[{"overloads":"a: num -> ~a","name":"Bitwise Not","description":"bitwise-not","token":"⌐"}],"96":[{"overloads":"vec-dump: map-dump:","name":"Map as Stacks","description":"Map a function over the top of the stack, treating each iteration\nas if it were a stack of items. Essentially, dump before mapping\n","token":"`"}],"173":[{"overloads":"a: any, b: num, c: any -> insert c at position b in a\na: any, b: lst, c: any -> insert c at positions b in a\na: any, b: lst[num], c: lst -> insert c[i] at position b[i] in a","name":"Insert","description":"insert insert-at","token":"Ị"}],"13":[{"overloads":"max-by: maximum-by:","name":"Maximum By","description":"Maximum By Element\nᵐf: Maximum of top of stack based on results of f","token":"ᵐ"}],"129":[{"overloads":"a: lst -> a ++ a ++ a ++ ...\na: num -> a > 0","name":"Cycle | Is Positive?","description":"cycle is-positive? positive? >0?","token":"Ċ"}],"134":[{"overloads":"a: str -> a[1:]\na: any -> toList(a)[1:]","name":"Head Remove | Behead","description":"head-remove behead","token":"Ḣ"}],"73":[{"overloads":"a: lst, b: lst -> Interleave a and b\na: any, b: fun -> Reject elements of a by applying b","name":"Interleave / Reject By Function","description":"interleave reject","token":"I"}],"105":[{"overloads":"a: lst, b: num -> a[b]\na: lst, b: lst -> a[_] for _ in b\na: str, b: lst -> ''.join(a[i] for i in b)\na: any, b: fun -> Apply b on a and collect unique values. Does include the initial value.\na: str, b: str -> enclose b in a (a[0:len(a)//2] + b + a[len(a)//2:])","name":"Index | Collect Unique Application Values | Enclose","description":"index at item-at nth-item collect-unique enclose","token":"i"}],"2":[{"overloads":"reduce-columns: map-over-suffixes: fold-cols: foldl-cols: fold-columns-by: reduce-columns-by: over-suffixes:","name":"Reduce Columns | Map Over Suffixes","description":"Reduce columns of a 2d list by a function\nMap an element over suffixes","token":"ᶜ"}],"205":[{"overloads":"-> \"abcdefghijklmnopqrstuvwxyz\"","name":"Alphabet","description":"alphabet a-z","token":"₈"}],"128":[{"overloads":"a: fun -> Execute a without popping\na: str -> Evaluate a as Vyxal without popping\na: lst -> Return a boolean array with 1s at the indices in a list.\na: num -> Is a == 1?","name":"Execute lambda without popping | Evaluate as Vyxal without popping | Boolean Mask | Is 1?","description":"peek-call exec-peek boolean-mask bool-mask strict-boolify is-1?","token":"Ḃ"}],"237":[{"overloads":"a: num -> ceil(a)","name":"Ceiling","description":"ceiling ceil","token":"⌈"}],"166":[{"overloads":"a: lst, b: num -> [a[0], a[1], ..., a[b-1]]","name":"Zero Slice Until","description":"0>b zero-slice zero-slice-until take slice-to lst-truncate first-n-items first-n","token":"Θ"}],"148":[{"overloads":"a: num, b: num -> |a - b|\na: lst, b: fun -> apply b to each pair of neighbours in a [applies to windows of length 2]","name":"Absolute Difference | Apply to Neighbours","description":"abs-diff apply-to-neighbours","token":"ȧ"}],"45":[{"overloads":"a: num, b: num -> a - b\na: str, b: num -> a + b '-'s (or '-'s + a if b < 0)\na: num, b: str -> a '-'s + b (or b + '-'s if a < 0)\na: str, b: str -> a with b removed","name":"Subtraction","description":"sub subtract minus str-remove remove str-remove-all remove-all","token":"-"}],"161":[{"overloads":"a: any -> rotate right once","name":"Rotate Right","description":"abc->cab rot-right rotate-right","token":"ṙ"}],"180":[{"overloads":"a: any, b: any -> Trim all elements of b from both sides of a.\na: fun, b: any -> cumulative reduce b by function a","name":"Trim / Cumulative Reduce","description":"trim scanl cumulative-reduce","token":"Ṭ"}],"17":[{"overloads":"apply-to-register: to-register: to-reg:","name":"Apply to Register","description":"Apply a function to the register. Essentially, push\nthe reigster value to the stack, apply the function, and\nthen pop back into the register\nᴿf: Apply f to the register","token":"ᴿ"}],"149":[{"overloads":"a: num -> parity of a (a % 2)\na: str -> last half of a","name":"Bit | Parity | Last Half of String","description":"bit parity str-last-half","token":"ḃ"}],"191":[{"overloads":"a: num, b: num -> a << b","name":"Bitshift Left","description":"bitwise-left-shift left-shift","token":"«"}],"22":[{"overloads":"dip:","name":"Dip","description":"Stash the top of the stack temporarily, and then apply\nthe function. Finally, push the stashed value\nᵂf: pop M, apply f, push M","token":"ᵂ"}],"44":[{"overloads":"a -> printed to stdout","name":"Print","description":"print puts out println","token":","}],"204":[{"overloads":"-> 256","name":"Two hundred fifty-six","description":"two-hundred-fifty-six","token":"₇"}],"27":[{"overloads":"*:","name":"Single Element Lambda","description":"Turn the next element (whether that be a structure/modifier/element) into a lambda\n⸠f: Push the equivalent of λf} to the stack","token":"⸠"}],"59":[{"overloads":"a, b -> [a, b]","name":"Pair","description":"pair","token":";"}],"118":[{"overloads":"*a, f -> f vectorised over however many arguments in a. It is recommended to use the modifier instead","name":"[Internal Use] Vectorise (Element Form) ","description":"","token":"#v"},{"overloads":"vectorise: vec: v:","name":"Vectorise","description":"Vectorises\nvf: f but vectorised","token":"v"}],"71":[{"overloads":"a: lst -> Maximum of a\na: non-lst, b: non-lst -> Maximum of a and b\na: lst, b: fun -> Call b infinitely with items of a as starting values","name":"Monadic Maximum | Dyadic Maximum | Generate From Function | Vectorised Maximum","description":"max maximum generator","token":"G"}],"12":[{"overloads":"loop-while-unique:","name":"Loop While Unique","description":"Loop While Unique - similar to ᶨ, but doesn't collect\nᶪf: Loop while unique","token":"ᶪ"}],"144":[{"overloads":"a: lst, b: num -> a wrapped in chunks of length b\na: fun, b: num -> first b truthy integers where a is truthy","name":"Wrap to Length | Predicate Slice From 0","description":"wrap-length pred-slice-0","token":"Ẇ"}],"236":[{"overloads":"The third input to the program","name":"Third Input","description":"third-input input-2","token":"²"}],"181":[{"overloads":"a: num -> a + 2\na: lst -> [x[0] for x in a]","name":"Increment Twice | Vectorised Head","description":"incr-twice vec-head","token":"…"}],"86":[{"overloads":"a: lst -> each element of a reversed\na: num -> 1 - a\na: str -> a converted to title case","name":"Vectorised Reverse | Complement | Title Case","description":"vectorised-reverse vec-reverse complement titlecase title-case","token":"V"}],"159":[{"overloads":"a: any -> bool(a)","name":"Boolify","description":"boolify","token":"ȯ"}],"187":[{"overloads":"a: num -> a ** 3\na: str -> a split into chunks of length 3","name":"Cube | Threes","description":"cube threes","token":"⁻"}],"172":[{"overloads":"a: lst|str -> Push a[1:], then a[0] onto the stack","name":"Head Extract","description":"head-extract-swap split-at-head-swap","token":"Ḥ"}],"113":[{"overloads":"a: any -> enclose a in quotes, escape backslashes and quote marks","name":"Quotify","description":"quotify","token":"q"}],"219":[{"overloads":"a: num, b: num -> a * b\na: num, b: str -> b repeated a times\na: str, b: num -> a repeated b times\na: str, b: str -> ring translate a according to b","name":"Multiplication","description":"mul multiply times str-repeat * ring-trans","token":"×"}],"81":[{"overloads":"a -> Stop program execution","name":"Exit | Quit","description":"exit quit","token":"Q"}],"230":[{"overloads":"a: lst -> product of a","name":"Product","description":"product prod","token":"Π"}],"76":[{"overloads":"a: any -> Length of a","name":"Length | Length of List","description":"length len length-of len-of size","token":"L"}],"7":[{"overloads":"apply-to-head:","name":"Apply To Head","description":"Apply element only to the head of list\nᴴf: Apply f to the head of the top of the stack","token":"ᴴ"}],"98":[{"overloads":"a: num -> convert a to binary\na: str -> bin(ord(x) for x in a)","name":"Convert To Binary","description":"to-binary dec->bin decimal->bin","token":"b"}],"103":[{"overloads":"a: lst -> Minimum of a\na: non-lst, b: non-lst -> Minimum of a and b\na: lst, b: fun -> Call b infinitely with items of a as starting values (dyadic)","name":"Monadic Minimum | Dyadic Minimum | Generate From Function (Dyadic) | Vectorised Minimum","description":"min minimum generator-dyadic","token":"g"}],"140":[{"overloads":"a: lst -> Permutations of a","name":"Permutations","description":"permutations perms","token":"Ṗ"}],"66":[{"overloads":"a: num -> str(a) from binary\na: str -> int(a, 2)\na: lst -> int(a, 2), using list of digits","name":"Convert From Binary","description":"from-binary bin->dec bin->decimal","token":"B"}],"155":[{"overloads":"a: lst|str -> Push a[0], then a[1:] onto the stack","name":"Head Extract","description":"head-extract split-at-head","token":"ḣ"}],"198":[{"overloads":"-> 16","name":"Sixteen","description":"sixteen","token":"₁"}],"108":[{"overloads":"a: lst -> Length of each item in a","name":"Length of Each Item","description":"length-vectorised length-vect len-vect len-vectorised vec-len vec-length vlen","token":"l"}],"240":[{"overloads":"a: lst -> min(a) without popping a","name":"Minimum without popping","description":"min-no-pop","token":"ɠ"}],"251":[{"overloads":"a: any -> str(a)","name":"Stringify","description":"to-string stringify str","token":"ᶲ"}],"130":[{"overloads":"a: num, b: num -> a % b == 0\na: str, b: num -> a + ' ' * b\na: num, b: str -> b + ' ' * a\na: lst, b: fun -> Remove duplicates from a by applying b to each element","name":"Divides? | Append Spaces | Remove Duplicates by Function","description":"divides? +-spaces dedup-by","token":"Ḋ"}],"223":[{"overloads":" -> rotate the entire stack left once","name":"Rotate Stack Left","description":"rotate-stack-left","token":"←"}],"135":[{"overloads":"a: num, b: num -> a.real + b.real * i\na: any, b: lst -> `[a[item] for item in b]`\na: any, b: fun -> Apply b on a and collect unique values (until fixpoint). Does not include the initial value.","name":"Index into Multiple | Collect While Unique | Complex Number","description":"index-into-multiple collect-while-unique complex","token":"İ"}],"167":[{"overloads":"a: lst, b: num -> a[1:b]\na: num, b: lst -> b[1:a]","name":"Slice from 1","description":"1->b","token":"Φ"}],"226":[{"overloads":"a: any -> indices that will reverse-sort a","name":"Grade Down","description":"grade-down","token":"↓"}],"3":[{"overloads":"*2:","name":"Dyadic Single Element Lambda","description":"Turn the next element (whether that be a structure/modifier/element) into a dyadic lambda\nᵈf: Push the equivalent of λ2|f} to the stack","token":"ᵈ"}],"241":[{"overloads":"parallel-apply: para-apply: paraply: !!:","name":"Parallel Apply","description":"Parallel apply two elements to the top of the stack\n","token":"∥"}],"80":[{"overloads":"a: lst -> Prefixes of a","name":"Prefixes","description":"prefixes","token":"P"}],"162":[{"overloads":"a: fun, b: any -> sort iterable b by function a\na: any, b: fun -> sort iterable a by function b\na: lst, b: lst[num] -> partition a into sublists of length items in b","name":"Sort by Function Object | Partition by Numbers","description":"sort-by sortby sort-by-fun sortbyfun sort-fun sortfun partition-by","token":"ṡ"}],"255":[{"overloads":"a: num -> a + 1","name":"Increment","description":"incr increment","token":"ꜝ"}],"112":[{"overloads":"*a, f -> The iconic parallel apply. Use the modifier instead bingus.","name":"[Internal Use] Parallel Apply Wrap (Element Form)","description":"","token":"#|para-apply-wrap"},{"overloads":"a: lst, b: any -> b prepended to a","name":"Prepend","description":"prepend","token":"p"},{"overloads":"*a, f -> f applied to each element of a, treating as a stack. Use the modifier instead.","name":"[Internal Use] Map Dump (Element Form)","description":"","token":"#|vec-dump"},{"overloads":"*a, f -> f applied to a with a pushed back. Use the modifier instead.","name":"[Internal Use] Dip (Element Form)","description":"","token":"#|dip"}],"194":[{"overloads":"a: num, b: num -> a & b","name":"Bitwise And","description":"bitwise-and","token":"∴"}],"145":[{"overloads":"a: list, b: list -> cartesian product of a and b","name":"Cartesian Product","description":"cartesian-product cartesian cart-prod cart","token":"Ẋ"}],"63":[{"overloads":"->  -> input","name":"Get Input","description":"get-input input stdin readline","token":"?"}],"18":[{"overloads":"sort-by: scanl:","name":"Sort By","description":"Sort By Element / Scanl\nᶳf: Sort top of stack based on results of f\nᶳf: Cumulatively reduce a list of items","token":"ᶳ"}],"150":[{"overloads":"a: num, b: num -> a choose b\na: str, b: str -> are the character sets of a and b equal?\na: fun, b: any -> run a on b until the result no longer changes returning all intermediate results","name":"N Choose K | Character Set Equal? | Repeat Until No Change","description":"n-choose-k ncr nck choose char-set-equal? char-set-eq? until-stable","token":"ċ"}],"95":[{"overloads":"a ->","name":"Pop and Discard","description":"pop discard","token":"_"}],"67":[{"overloads":"a: any, b: any -> count(b in a)","name":"Count","description":"count","token":"C"},{"overloads":"a: str -> compress a using the dictionary","name":"Compress String Using Dictionary","description":"compress-dict dict-comp compress","token":"#C"}],"199":[{"overloads":"-> 26","name":"Twenty-six","description":"twenty-six","token":"₂"}],"16":[{"overloads":"map-over-prefixes: over-prefixes:","name":"Map Over Prefixes","description":"Map an element over the prefixes of a list\nᵖf: Map f over prefixes","token":"ᵖ"}],"127":[{"overloads":"a: num -> |a|\na: str -> keep alphabet characters of a","name":"Absolute Value | Keep Alphabet Characters","description":"abs absolute-value keep-alphabet","token":"Ȧ"}],"177":[{"overloads":"a -> printed to stdout without popping","name":"Print without popping","description":"print-no-pop","token":"Ọ"}],"182":[{"overloads":"a: num, b: num -> a <= b\na: str, b: num -> a <= str(b)\na: num, b: str -> str(a) <= b\na: str, b: str -> a <= b","name":"Less Than Or Equal To","description":"le less-than-or-equal-to","token":"≤"}],"154":[{"overloads":"a: any -> group consecutive identical items of lst(a)","name":"Group By Consecutive Items","description":"group-by-consecutive","token":"ġ"}],"11":[{"overloads":"key:","name":"Key","description":"Map an element over the groups formed by identical items.\nᵏf: Map f over the groups formed by identical items","token":"ᵏ"}],"72":[{"overloads":"a: num -> a in hexadecimal\na: str -> a as a hexadecimal number to base 10","name":"Hexadecimal | To Hexadecimal","description":"hex hexadecimal to-hex to-hexadecimal","token":"H"}],"175":[{"overloads":"a: num -> bit length of a\na: lst[lst] -> matrix inverse of a","name":"Bit Length | Matrix Inverse","description":"bit-length matrix-inverse","token":"Ṃ"}],"143":[{"overloads":"a: lst -> a[:-1]\na: str -> a[:-1]","name":"Init","description":"init remove-last","token":"Ṫ"}],"43":[{"overloads":"a: num, b: num -> a + b\na: num, b: str -> a + b\na: str, b: num -> a + b\na: str, b: str -> a + b","name":"Addition","description":"add + plus","token":"+"}],"99":[{"overloads":"a: any, b: lst -> is element a in list b?\na: any, b: any -> is str(b) in str(a)?","name":"Contains","description":"contains in","token":"c"}],"87":[{"overloads":"a, b, c, ..., -> [a, b, c, ...]","name":"Wrap","description":"wrap","token":"W"}],"203":[{"overloads":"-> 128","name":"One hundred twenty-eight","description":"one-hundred-twenty-eight","token":"₆"}],"218":[{"overloads":"a: lst -> forward-differences of a","name":"Deltas","description":"deltas","token":"¯"}],"104":[{"overloads":"a: lst -> a[0]","name":"Head | First Item","description":"head first first-item","token":"h"},{"overloads":"*a, f -> f applied to each neighbour of a. Use the modifier instead.","name":"[Internal Use] All Neighbours (Element Form)","description":"","token":"#|all-neigh"}],"250":[{"overloads":"a: list, b: list -> cartesian product of a and b in the standard order, but without accounting for infinite lists","name":"Cartesian Product Unsafe","description":"cartesian-product-unsafe cartesian-unsafe cart-prod-unsafe cart-unsafe","token":"ᶿ"}],"231":[{"overloads":"a: any -> !a","name":"Logical Not","description":"non-vec-not non-vec-logical-not","token":"¬"}],"158":[{"overloads":"a: lst -> a join on newlines\na: str -> a padded to a multiple of 8 with 0s\na: num -> a if a == 1 push context variable n","name":"Join On Newlines | Pad Binary to Mod 8 | Context if 1","description":"join-newlines newline-join join-on-newlines binary-pad-8 bin-pad-8 one?->context one?->n","token":"ṅ"}],"186":[{"overloads":"a: num -> a ** 2\na: str -> a split into pairs","name":"Square | Pairs","description":"square pairs","token":"⁺"}],"114":[{"overloads":"*a, f -> f applied to the register. Use the modifier instead.","name":"[Internal Use] Apply to Register (Element Form)","description":"","token":"#|apply-to-register"},{"overloads":"*a, f -> Use the ᵞ modifier instead.","name":"[Internal Use] Invariant (Element Form)","description":"","token":"#|invar"},{"overloads":"a: str, b: str, c: str -> replace all instances of b in a with c\na: fun, b: any, c: any -> reduce items in zip(b, c) by a","name":"Replace","description":"replace zip-with","token":"r"}],"139":[{"overloads":"_ -> push a copy of the second item on the stack over the first\na b -> a b a","name":"Over","description":"over","token":"Ȯ"}],"23":[{"overloads":"scan-fix:","name":"Scan Fixed Point","description":"Scan a function until it reaches a fixed point\nᵡf: scan f until a fixed point is reached / apply until a previous value is repeated, collecting intermediate results","token":"ᵡ"}],"8":[{"overloads":"first-index-where: first-index-of: ind-of: find-by:","name":"First Index Where","description":"Find the first index where an element is truthy\nᶤf: find the first index where f is truthy","token":"ᶤ"}],"75":[{"overloads":"a: num -> Factors of a\na: str -> Is a numeric?","name":"Factors | Is Numeric?","description":"factors divisors is-numeric is-num is-number is-num? is-number?","token":"K"}],"82":[{"overloads":"a: fun, b: any -> reduce iterable b by function a\na: any, b: fun -> reduce iterable a by function b\na: num, b: num -> the range [a, b)\na: str, b: num|str -> does regex pattern b match haystack a?","name":"Reduce by Function Object | Dyadic Range | Regex Match","description":"fun-reduce reduce fold-by range a->b regex-match? re-match? has-regex-match? fold","token":"R"}],"119":[{"overloads":"a -> [a]","name":"Wrap Singleton","description":"wrap-singleton enlist","token":"w"}],"58":[{"overloads":"a -> a, a","name":"Duplicate","description":"dup","token":":"}],"235":[{"overloads":"The second input to the program","name":"Second Input","description":"second-input input-1","token":"¹"}],"246":[{"overloads":"-> \" \"","name":"Space","description":"space","token":"ð"}],"151":[{"overloads":"a: lst, b: lst -> Dot product of a and b\na: num, b: num -> Convert a to bijective base b","name":"Dot Product | To Bijective Base | First Index Where Predicate Truthy","description":"dot-product bijective-base dot-prod first-index-where","token":"ḋ"}],"36":[{"overloads":"a, b -> b, a","name":"Swap","description":"swap","token":"$"}],"168":[{"overloads":"a -> printed to stdout without newline","name":"Print without newline","description":"print-no-newline","token":"§"}],"146":[{"overloads":"a: any -> `[0, 1, 2, ..., len(a)-1]`","name":"Length 0-Range","description":"zero->len","token":"ι"}],"30":[{"overloads":"****:","name":"Quadruple Element Lambda","description":"Turn the next four elements (whether that be a structure/modifier/element) into a lambda\nЧfghi: Push the equivalent of λfghi} to the stack","token":"Ч"}],"190":[{"overloads":"a: lst -> sum of a","name":"Sum","description":"sum /+ +/","token":"∑"}],"183":[{"overloads":"a: num, b: num -> a >= b\na: str, b: num -> a >= str(b)\na: num, b: str -> str(a) >= b\na: str, b: str -> a >= b","name":"Greater Than Or Equal To","description":"ge greater-than-or-equal-to","token":"≥"}],"19":[{"overloads":"","name":"Unassigned","description":"Unassigned","token":"ᵗ"}],"79":[{"overloads":"a: str -> ord(a)\na: num -> chr(a)","name":"Ord/Chr","description":"ord chr","token":"O"}],"195":[{"overloads":"a: num, b: num -> a | b","name":"Bitwise Or","description":"bitwise-or","token":"∵"}],"239":[{"overloads":"a: lst -> max(a) without popping a","name":"Maximum without popping","description":"max-no-pop","token":"Ɠ"}],"242":[{"overloads":"parallel-apply-and-wrap: para-apply-and-wrap: <paraply>: <!!>:","name":"Parallel Apply and Wrap","description":"Parallel apply two elements to the top of the stack\nand wrap the result in a list\n","token":"∦"}],"4":[{"overloads":"**2:","name":"Dyadic Double Element Lambda","description":"Turn the next two elements (whether that be a structure/modifier/element) into a dyadic lambda\nᵉfg: Push the equivalent of λ2|fg} to the stack","token":"ᵉ"}],"126":[{"overloads":"*a, f -> f applied to the stack without popping items. Use the modifier instead.","name":"[Internal Use] Apply Without Popping (Element Form)","description":"","token":"#~"}],"136":[{"overloads":"a: num, b: num -> log_b(a)\na: fun, b: any -> apply until a previous value is repeated, collecting intermediate results\na: str, b: str -> a same length as b\na: str, b: num -> len(a) == b","name":"Logarithm | Scan Fixpoint | Same Length? | Length Equals?","description":"log logarithm scan-fixpoint scan-fix same-length? same-length length-equals? length-equals len-eq?","token":"Ŀ"}],"15":[{"overloads":"outer-product: table:","name":"Outer Product | Table","description":"Outer product\nᵒf: Pop two lists, then make a matrix from them by applying f to each pair of elements","token":"ᵒ"}],"68":[{"overloads":"a -> [a, a, a]","name":"Triplicate","description":"trip","token":"D"}],"62":[{"overloads":"a: num, b: num -> a > b\na: str, b: num -> a > str(b)\na: num, b: str -> str(a) > b\na: str, b: str -> a > b","name":"Greater Than","description":"gt greater greater-than greater? bigger?","token":">"}],"178":[{"overloads":"a: any -> reverse a","name":"Reverse","description":"reverse","token":"Ṛ"}],"131":[{"overloads":"a: fun -> Execute a\na: str -> Evaluate a as Vyxal\na: num -> 10 ** n","name":"Execute lambda | Evaluate as Vyxal | Power with base 10","description":"execute-lambda evaluate-as-vyxal power-base-10 call @","token":"Ė"}],"47":[{"overloads":"foldl: reduce: /: fold: reduceby:-","name":"Foldl | Reduce By | Filter by","description":"Reduce a list by an element\n/f: reduce by element f","token":"/"}],"163":[{"overloads":"a: lst|str -> Push a[-1], then a[:-1] onto the stack","name":"Last Extract","description":"last-extract split-at-last","token":"ṫ"}],"200":[{"overloads":"-> 32","name":"Thirty-two","description":"thirty-two","token":"₃"}],"122":[{"overloads":"a: num -> [0, 1, ..., a]\na: str -> is a lowercase?","name":"Inclusive zero Range | Is Lowercase","description":"inclusive-zero-range zero->n is-lowercase? lowercase? lower?","token":"z"}],"83":[{"overloads":"a: any -> convert to list and sort ascending","name":"Sort ascending","description":"sort sortasc sort-asc","token":"S"}],"215":[{"overloads":"a: num -> a / 2\na: str -> a split into two pieces","name":"Halve","description":"halve","token":"½"}],"222":[{"overloads":" -> push the value of the register","name":"Get Register","description":"get-register get-reg register <-register <-reg","token":"¥"}],"232":[{"overloads":"a: any, b: any -> a && b","name":"Logical And","description":"and logical-and","token":"∧"}],"100":[{"overloads":"a: num -> a * 2\na: str -> a + a","name":"Double","description":"double","token":"d"}],"90":[{"overloads":"a: lst, b: lst -> zip a and b\na: lst, b: fun -> [[x, b(x)] for x in a]\na: fun, b: lst -> [[a(x), x] for x in b]","name":"Zip","description":"zip zip-map","token":"Z"}],"111":[{"overloads":"a: lst, b: num -> Overlapping slices of a of length b\na: lst|str -> Overlapping slices of a of length 2","name":"Overlap | Overlapping Slices","description":"overlap overlaps overlapping overlapping-slices","token":"o"}],"254":[{"overloads":"if-top: if:","name":"Conditional Execution","description":"Pop the top of the stack, and, if it's truthy,\napply a function","token":"¿"}],"227":[{"overloads":"a: num -> sign of a","name":"Sign","description":"sign","token":"±"}]}
